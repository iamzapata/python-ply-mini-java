Created by PLY version 3.7 (http://www.dabeaz.com/ply)

Unused terminals:

    UMINUS
    MULTILINECOMMENT
    LINECOMMENT

Grammar

Rule 0     S' -> Program
Rule 1     Program -> ClassDeclList
Rule 2     ClassDeclList -> ClassDecl ClassDeclList
Rule 3     ClassDeclList -> empty
Rule 4     ClassDecl -> CLASS IDEN ExtendClass LEFTBRACE FieldMethDecl RIGHTBRACE
Rule 5     ExtendClass -> EXTENDS IDEN
Rule 6     ExtendClass -> empty
Rule 7     FieldMethDecl -> FieldMeth FieldMethDecl
Rule 8     FieldMethDecl -> empty
Rule 9     FieldMeth -> FieldDecl
Rule 10    FieldMeth -> MethDecl
Rule 11    FieldDecl -> Type IDEN IdenCommaList SEMICOLON
Rule 12    IdenCommaList -> IdenComma IdenCommaList
Rule 13    IdenCommaList -> empty
Rule 14    IdenComma -> COMMA IDEN
Rule 15    MethDecl -> MethType IDEN LEFTPARENT Args RIGHTPARENT Block
Rule 16    MethType -> Type
Rule 17    MethType -> VOID
Rule 18    Args -> Formals
Rule 19    Args -> empty
Rule 20    Formals -> Type IDEN IdenTypeCommaList
Rule 21    IdenTypeCommaList -> CommaTypeId IdenTypeCommaList
Rule 22    IdenTypeCommaList -> empty
Rule 23    CommaTypeId -> COMMA Type IDEN
Rule 24    Type -> INT
Rule 25    Type -> BOOLEAN
Rule 26    Type -> STRING
Rule 27    Type -> IDEN
Rule 28    Type -> Array
Rule 29    Array -> Type LEFTSQRBRACKET RIGHTSQRBRACKET
Rule 30    Block -> LEFTBRACE VarDeclList StmtList RIGHTBRACE
Rule 31    StmtList -> Stmt StmtList
Rule 32    StmtList -> empty
Rule 33    VarDeclList -> Type IDEN ExpDecl ExpDeclList SEMICOLON VarDeclList
Rule 34    VarDeclList -> empty
Rule 35    ExpDeclList -> CommaExpDecl ExpDeclList
Rule 36    ExpDeclList -> empty
Rule 37    CommaExpDecl -> COMMA IDEN ExpDecl
Rule 38    ExpDecl -> ASSIGNMENT Expr
Rule 39    ExpDecl -> empty
Rule 40    Stmt -> Assign SEMICOLON
Rule 41    Stmt -> Call SEMICOLON
Rule 42    Stmt -> Return
Rule 43    Stmt -> IfStmt
Rule 44    Stmt -> WhileStmt
Rule 45    Stmt -> BREAK SEMICOLON
Rule 46    Stmt -> CONTINUE SEMICOLON
Rule 47    Stmt -> Block
Rule 48    Assign -> Location ASSIGNMENT Expr
Rule 49    Location -> IDEN
Rule 50    Location -> Expr DOT IDEN
Rule 51    Location -> Expr LEFTSQRBRACKET Expr RIGHTSQRBRACKET
Rule 52    Call -> Method LEFTPARENT Actuals RIGHTPARENT
Rule 53    Method -> IDEN
Rule 54    Method -> Expr DOT IDEN
Rule 55    Actuals -> Expr ExprCommaList
Rule 56    ExprCommaList -> ExprComma ExprCommaList
Rule 57    ExprCommaList -> empty
Rule 58    ExprComma -> COMMA Expr
Rule 59    Return -> RETURN ReturnExpr SEMICOLON
Rule 60    ReturnExpr -> Expr
Rule 61    ReturnExpr -> empty
Rule 62    IfStmt -> IF LEFTPARENT Expr RIGHTPARENT Stmt ElseStmt
Rule 63    ElseStmt -> ELSE Stmt
Rule 64    ElseStmt -> empty
Rule 65    WhileStmt -> WHILE LEFTPARENT Expr RIGHTPARENT Stmt
Rule 66    Expr -> Location
Rule 67    Expr -> Call
Rule 68    Expr -> THIS
Rule 69    Expr -> NewId
Rule 70    Expr -> NewTypeExpr
Rule 71    Expr -> ExprLength
Rule 72    Expr -> ExprBinaryExpr
Rule 73    Expr -> UnaryExpr
Rule 74    Expr -> Literal
Rule 75    Expr -> Number
Rule 76    Expr -> ParentExprParent
Rule 77    NewId -> NEW IDEN LEFTPARENT RIGHTPARENT
Rule 78    NewTypeExpr -> NEW Type LEFTSQRBRACKET Expr LEFTSQRBRACKET
Rule 79    ExprLength -> Expr DOT LENGTH
Rule 80    ExprBinaryExpr -> Expr ADDITION Expr
Rule 81    ExprBinaryExpr -> Expr SUBSTRACTION Expr
Rule 82    ExprBinaryExpr -> Expr MULTIPLICATION Expr
Rule 83    ExprBinaryExpr -> Expr DIVISION Expr
Rule 84    ExprBinaryExpr -> Expr MODULO Expr
Rule 85    ExprBinaryExpr -> Expr AND Expr
Rule 86    ExprBinaryExpr -> Expr OR Expr
Rule 87    ExprBinaryExpr -> Expr CONCAT Expr
Rule 88    ExprBinaryExpr -> Expr LESS Expr
Rule 89    ExprBinaryExpr -> Expr LESSEQUAL Expr
Rule 90    ExprBinaryExpr -> Expr GREATER Expr
Rule 91    ExprBinaryExpr -> Expr GREATEREQUAL Expr
Rule 92    ExprBinaryExpr -> Expr EQUAL Expr
Rule 93    ExprBinaryExpr -> Expr NOTEQUAL Expr
Rule 94    UnaryExpr -> UnaryMinus
Rule 95    UnaryExpr -> NOT
Rule 96    UnaryMinus -> SUBSTRACTION Expr
Rule 97    Literal -> INT
Rule 98    Literal -> STRING
Rule 99    Literal -> TRUE
Rule 100   Literal -> FALSE
Rule 101   Literal -> NULL
Rule 102   ParentExprParent -> LEFTPARENT Expr RIGHTPARENT
Rule 103   Number -> CIENTIFIC
Rule 104   Number -> HEXADEC
Rule 105   Number -> NUMBER
Rule 106   Number -> BINARY
Rule 107   Number -> FLOAT
Rule 108   empty -> <empty>

Terminals, with rules where they appear

ADDITION             : 80
AND                  : 85
ASSIGNMENT           : 38 48
BINARY               : 106
BOOLEAN              : 25
BREAK                : 45
CIENTIFIC            : 103
CLASS                : 4
COMMA                : 14 23 37 58
CONCAT               : 87
CONTINUE             : 46
DIVISION             : 83
DOT                  : 50 54 79
ELSE                 : 63
EQUAL                : 92
EXTENDS              : 5
FALSE                : 100
FLOAT                : 107
GREATER              : 90
GREATEREQUAL         : 91
HEXADEC              : 104
IDEN                 : 4 5 11 14 15 20 23 27 33 37 49 50 53 54 77
IF                   : 62
INT                  : 24 97
LEFTBRACE            : 4 30
LEFTPARENT           : 15 52 62 65 77 102
LEFTSQRBRACKET       : 29 51 78 78
LENGTH               : 79
LESS                 : 88
LESSEQUAL            : 89
LINECOMMENT          : 
MODULO               : 84
MULTILINECOMMENT     : 
MULTIPLICATION       : 82
NEW                  : 77 78
NOT                  : 95
NOTEQUAL             : 93
NULL                 : 101
NUMBER               : 105
OR                   : 86
RETURN               : 59
RIGHTBRACE           : 4 30
RIGHTPARENT          : 15 52 62 65 77 102
RIGHTSQRBRACKET      : 29 51
SEMICOLON            : 11 33 40 41 45 46 59
STRING               : 26 98
SUBSTRACTION         : 81 96
THIS                 : 68
TRUE                 : 99
UMINUS               : 
VOID                 : 17
WHILE                : 65
error                : 

Nonterminals, with rules where they appear

Actuals              : 52
Args                 : 15
Array                : 28
Assign               : 40
Block                : 15 47
Call                 : 41 67
ClassDecl            : 2
ClassDeclList        : 1 2
CommaExpDecl         : 35
CommaTypeId          : 21
ElseStmt             : 62
ExpDecl              : 33 37
ExpDeclList          : 33 35
Expr                 : 38 48 50 51 51 54 55 58 60 62 65 78 79 80 80 81 81 82 82 83 83 84 84 85 85 86 86 87 87 88 88 89 89 90 90 91 91 92 92 93 93 96 102
ExprBinaryExpr       : 72
ExprComma            : 56
ExprCommaList        : 55 56
ExprLength           : 71
ExtendClass          : 4
FieldDecl            : 9
FieldMeth            : 7
FieldMethDecl        : 4 7
Formals              : 18
IdenComma            : 12
IdenCommaList        : 11 12
IdenTypeCommaList    : 20 21
IfStmt               : 43
Literal              : 74
Location             : 48 66
MethDecl             : 10
MethType             : 15
Method               : 52
NewId                : 69
NewTypeExpr          : 70
Number               : 75
ParentExprParent     : 76
Program              : 0
Return               : 42
ReturnExpr           : 59
Stmt                 : 31 62 63 65
StmtList             : 30 31
Type                 : 11 16 20 23 29 33 78
UnaryExpr            : 73
UnaryMinus           : 94
VarDeclList          : 30 33
WhileStmt            : 44
empty                : 3 6 8 13 19 22 32 34 36 39 57 61 64

Parsing method: SLR

state 0

    (0) S' -> . Program
    (1) Program -> . ClassDeclList
    (2) ClassDeclList -> . ClassDecl ClassDeclList
    (3) ClassDeclList -> . empty
    (4) ClassDecl -> . CLASS IDEN ExtendClass LEFTBRACE FieldMethDecl RIGHTBRACE
    (108) empty -> .

    CLASS           shift and go to state 4
    $end            reduce using rule 108 (empty -> .)
    LEFTBRACE       reduce using rule 108 (empty -> .)
    RIGHTBRACE      reduce using rule 108 (empty -> .)
    SEMICOLON       reduce using rule 108 (empty -> .)
    RIGHTPARENT     reduce using rule 108 (empty -> .)
    RETURN          reduce using rule 108 (empty -> .)
    IF              reduce using rule 108 (empty -> .)
    BREAK           reduce using rule 108 (empty -> .)
    CONTINUE        reduce using rule 108 (empty -> .)
    IDEN            reduce using rule 108 (empty -> .)
    WHILE           reduce using rule 108 (empty -> .)
    THIS            reduce using rule 108 (empty -> .)
    NEW             reduce using rule 108 (empty -> .)
    INT             reduce using rule 108 (empty -> .)
    STRING          reduce using rule 108 (empty -> .)
    TRUE            reduce using rule 108 (empty -> .)
    FALSE           reduce using rule 108 (empty -> .)
    NULL            reduce using rule 108 (empty -> .)
    LEFTPARENT      reduce using rule 108 (empty -> .)
    NOT             reduce using rule 108 (empty -> .)
    CIENTIFIC       reduce using rule 108 (empty -> .)
    HEXADEC         reduce using rule 108 (empty -> .)
    NUMBER          reduce using rule 108 (empty -> .)
    BINARY          reduce using rule 108 (empty -> .)
    FLOAT           reduce using rule 108 (empty -> .)
    SUBSTRACTION    reduce using rule 108 (empty -> .)
    COMMA           reduce using rule 108 (empty -> .)
    ELSE            reduce using rule 108 (empty -> .)

    ClassDecl                      shift and go to state 1
    Program                        shift and go to state 2
    ClassDeclList                  shift and go to state 3
    empty                          shift and go to state 5

state 1

    (2) ClassDeclList -> ClassDecl . ClassDeclList
    (2) ClassDeclList -> . ClassDecl ClassDeclList
    (3) ClassDeclList -> . empty
    (4) ClassDecl -> . CLASS IDEN ExtendClass LEFTBRACE FieldMethDecl RIGHTBRACE
    (108) empty -> .

    CLASS           shift and go to state 4
    $end            reduce using rule 108 (empty -> .)
    LEFTBRACE       reduce using rule 108 (empty -> .)
    RIGHTBRACE      reduce using rule 108 (empty -> .)
    SEMICOLON       reduce using rule 108 (empty -> .)
    RIGHTPARENT     reduce using rule 108 (empty -> .)
    RETURN          reduce using rule 108 (empty -> .)
    IF              reduce using rule 108 (empty -> .)
    BREAK           reduce using rule 108 (empty -> .)
    CONTINUE        reduce using rule 108 (empty -> .)
    IDEN            reduce using rule 108 (empty -> .)
    WHILE           reduce using rule 108 (empty -> .)
    THIS            reduce using rule 108 (empty -> .)
    NEW             reduce using rule 108 (empty -> .)
    INT             reduce using rule 108 (empty -> .)
    STRING          reduce using rule 108 (empty -> .)
    TRUE            reduce using rule 108 (empty -> .)
    FALSE           reduce using rule 108 (empty -> .)
    NULL            reduce using rule 108 (empty -> .)
    LEFTPARENT      reduce using rule 108 (empty -> .)
    NOT             reduce using rule 108 (empty -> .)
    CIENTIFIC       reduce using rule 108 (empty -> .)
    HEXADEC         reduce using rule 108 (empty -> .)
    NUMBER          reduce using rule 108 (empty -> .)
    BINARY          reduce using rule 108 (empty -> .)
    FLOAT           reduce using rule 108 (empty -> .)
    SUBSTRACTION    reduce using rule 108 (empty -> .)
    COMMA           reduce using rule 108 (empty -> .)
    ELSE            reduce using rule 108 (empty -> .)

    ClassDeclList                  shift and go to state 6
    ClassDecl                      shift and go to state 1
    empty                          shift and go to state 5

state 2

    (0) S' -> Program .



state 3

    (1) Program -> ClassDeclList .

    $end            reduce using rule 1 (Program -> ClassDeclList .)


state 4

    (4) ClassDecl -> CLASS . IDEN ExtendClass LEFTBRACE FieldMethDecl RIGHTBRACE

    IDEN            shift and go to state 7


state 5

    (3) ClassDeclList -> empty .

    $end            reduce using rule 3 (ClassDeclList -> empty .)


state 6

    (2) ClassDeclList -> ClassDecl ClassDeclList .

    $end            reduce using rule 2 (ClassDeclList -> ClassDecl ClassDeclList .)


state 7

    (4) ClassDecl -> CLASS IDEN . ExtendClass LEFTBRACE FieldMethDecl RIGHTBRACE
    (5) ExtendClass -> . EXTENDS IDEN
    (6) ExtendClass -> . empty
    (108) empty -> .

    EXTENDS         shift and go to state 9
    $end            reduce using rule 108 (empty -> .)
    LEFTBRACE       reduce using rule 108 (empty -> .)
    RIGHTBRACE      reduce using rule 108 (empty -> .)
    SEMICOLON       reduce using rule 108 (empty -> .)
    RIGHTPARENT     reduce using rule 108 (empty -> .)
    RETURN          reduce using rule 108 (empty -> .)
    IF              reduce using rule 108 (empty -> .)
    BREAK           reduce using rule 108 (empty -> .)
    CONTINUE        reduce using rule 108 (empty -> .)
    IDEN            reduce using rule 108 (empty -> .)
    WHILE           reduce using rule 108 (empty -> .)
    THIS            reduce using rule 108 (empty -> .)
    NEW             reduce using rule 108 (empty -> .)
    INT             reduce using rule 108 (empty -> .)
    STRING          reduce using rule 108 (empty -> .)
    TRUE            reduce using rule 108 (empty -> .)
    FALSE           reduce using rule 108 (empty -> .)
    NULL            reduce using rule 108 (empty -> .)
    LEFTPARENT      reduce using rule 108 (empty -> .)
    NOT             reduce using rule 108 (empty -> .)
    CIENTIFIC       reduce using rule 108 (empty -> .)
    HEXADEC         reduce using rule 108 (empty -> .)
    NUMBER          reduce using rule 108 (empty -> .)
    BINARY          reduce using rule 108 (empty -> .)
    FLOAT           reduce using rule 108 (empty -> .)
    SUBSTRACTION    reduce using rule 108 (empty -> .)
    COMMA           reduce using rule 108 (empty -> .)
    ELSE            reduce using rule 108 (empty -> .)

    ExtendClass                    shift and go to state 8
    empty                          shift and go to state 10

state 8

    (4) ClassDecl -> CLASS IDEN ExtendClass . LEFTBRACE FieldMethDecl RIGHTBRACE

    LEFTBRACE       shift and go to state 11


state 9

    (5) ExtendClass -> EXTENDS . IDEN

    IDEN            shift and go to state 12


state 10

    (6) ExtendClass -> empty .

    LEFTBRACE       reduce using rule 6 (ExtendClass -> empty .)


state 11

    (4) ClassDecl -> CLASS IDEN ExtendClass LEFTBRACE . FieldMethDecl RIGHTBRACE
    (7) FieldMethDecl -> . FieldMeth FieldMethDecl
    (8) FieldMethDecl -> . empty
    (9) FieldMeth -> . FieldDecl
    (10) FieldMeth -> . MethDecl
    (108) empty -> .
    (11) FieldDecl -> . Type IDEN IdenCommaList SEMICOLON
    (15) MethDecl -> . MethType IDEN LEFTPARENT Args RIGHTPARENT Block
    (24) Type -> . INT
    (25) Type -> . BOOLEAN
    (26) Type -> . STRING
    (27) Type -> . IDEN
    (28) Type -> . Array
    (16) MethType -> . Type
    (17) MethType -> . VOID
    (29) Array -> . Type LEFTSQRBRACKET RIGHTSQRBRACKET

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for IDEN resolved as shift
    $end            reduce using rule 108 (empty -> .)
    LEFTBRACE       reduce using rule 108 (empty -> .)
    RIGHTBRACE      reduce using rule 108 (empty -> .)
    SEMICOLON       reduce using rule 108 (empty -> .)
    RIGHTPARENT     reduce using rule 108 (empty -> .)
    RETURN          reduce using rule 108 (empty -> .)
    IF              reduce using rule 108 (empty -> .)
    BREAK           reduce using rule 108 (empty -> .)
    CONTINUE        reduce using rule 108 (empty -> .)
    WHILE           reduce using rule 108 (empty -> .)
    THIS            reduce using rule 108 (empty -> .)
    NEW             reduce using rule 108 (empty -> .)
    TRUE            reduce using rule 108 (empty -> .)
    FALSE           reduce using rule 108 (empty -> .)
    NULL            reduce using rule 108 (empty -> .)
    LEFTPARENT      reduce using rule 108 (empty -> .)
    NOT             reduce using rule 108 (empty -> .)
    CIENTIFIC       reduce using rule 108 (empty -> .)
    HEXADEC         reduce using rule 108 (empty -> .)
    NUMBER          reduce using rule 108 (empty -> .)
    BINARY          reduce using rule 108 (empty -> .)
    FLOAT           reduce using rule 108 (empty -> .)
    SUBSTRACTION    reduce using rule 108 (empty -> .)
    COMMA           reduce using rule 108 (empty -> .)
    ELSE            reduce using rule 108 (empty -> .)
    INT             shift and go to state 22
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 20
    IDEN            shift and go to state 13
    VOID            shift and go to state 21

  ! IDEN            [ reduce using rule 108 (empty -> .) ]
  ! INT             [ reduce using rule 108 (empty -> .) ]
  ! STRING          [ reduce using rule 108 (empty -> .) ]

    FieldMeth                      shift and go to state 16
    FieldMethDecl                  shift and go to state 17
    FieldDecl                      shift and go to state 23
    empty                          shift and go to state 19
    MethType                       shift and go to state 14
    Array                          shift and go to state 25
    Type                           shift and go to state 15
    MethDecl                       shift and go to state 18

state 12

    (5) ExtendClass -> EXTENDS IDEN .

    LEFTBRACE       reduce using rule 5 (ExtendClass -> EXTENDS IDEN .)


state 13

    (27) Type -> IDEN .

    IDEN            reduce using rule 27 (Type -> IDEN .)
    LEFTSQRBRACKET  reduce using rule 27 (Type -> IDEN .)


state 14

    (15) MethDecl -> MethType . IDEN LEFTPARENT Args RIGHTPARENT Block

    IDEN            shift and go to state 26


state 15

    (11) FieldDecl -> Type . IDEN IdenCommaList SEMICOLON
    (16) MethType -> Type .
    (29) Array -> Type . LEFTSQRBRACKET RIGHTSQRBRACKET

  ! shift/reduce conflict for IDEN resolved as shift
    IDEN            shift and go to state 27
    LEFTSQRBRACKET  shift and go to state 28

  ! IDEN            [ reduce using rule 16 (MethType -> Type .) ]


state 16

    (7) FieldMethDecl -> FieldMeth . FieldMethDecl
    (7) FieldMethDecl -> . FieldMeth FieldMethDecl
    (8) FieldMethDecl -> . empty
    (9) FieldMeth -> . FieldDecl
    (10) FieldMeth -> . MethDecl
    (108) empty -> .
    (11) FieldDecl -> . Type IDEN IdenCommaList SEMICOLON
    (15) MethDecl -> . MethType IDEN LEFTPARENT Args RIGHTPARENT Block
    (24) Type -> . INT
    (25) Type -> . BOOLEAN
    (26) Type -> . STRING
    (27) Type -> . IDEN
    (28) Type -> . Array
    (16) MethType -> . Type
    (17) MethType -> . VOID
    (29) Array -> . Type LEFTSQRBRACKET RIGHTSQRBRACKET

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for IDEN resolved as shift
    $end            reduce using rule 108 (empty -> .)
    LEFTBRACE       reduce using rule 108 (empty -> .)
    RIGHTBRACE      reduce using rule 108 (empty -> .)
    SEMICOLON       reduce using rule 108 (empty -> .)
    RIGHTPARENT     reduce using rule 108 (empty -> .)
    RETURN          reduce using rule 108 (empty -> .)
    IF              reduce using rule 108 (empty -> .)
    BREAK           reduce using rule 108 (empty -> .)
    CONTINUE        reduce using rule 108 (empty -> .)
    WHILE           reduce using rule 108 (empty -> .)
    THIS            reduce using rule 108 (empty -> .)
    NEW             reduce using rule 108 (empty -> .)
    TRUE            reduce using rule 108 (empty -> .)
    FALSE           reduce using rule 108 (empty -> .)
    NULL            reduce using rule 108 (empty -> .)
    LEFTPARENT      reduce using rule 108 (empty -> .)
    NOT             reduce using rule 108 (empty -> .)
    CIENTIFIC       reduce using rule 108 (empty -> .)
    HEXADEC         reduce using rule 108 (empty -> .)
    NUMBER          reduce using rule 108 (empty -> .)
    BINARY          reduce using rule 108 (empty -> .)
    FLOAT           reduce using rule 108 (empty -> .)
    SUBSTRACTION    reduce using rule 108 (empty -> .)
    COMMA           reduce using rule 108 (empty -> .)
    ELSE            reduce using rule 108 (empty -> .)
    INT             shift and go to state 22
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 20
    IDEN            shift and go to state 13
    VOID            shift and go to state 21

  ! IDEN            [ reduce using rule 108 (empty -> .) ]
  ! INT             [ reduce using rule 108 (empty -> .) ]
  ! STRING          [ reduce using rule 108 (empty -> .) ]

    FieldMeth                      shift and go to state 16
    FieldMethDecl                  shift and go to state 29
    FieldDecl                      shift and go to state 23
    empty                          shift and go to state 19
    MethType                       shift and go to state 14
    Array                          shift and go to state 25
    Type                           shift and go to state 15
    MethDecl                       shift and go to state 18

state 17

    (4) ClassDecl -> CLASS IDEN ExtendClass LEFTBRACE FieldMethDecl . RIGHTBRACE

    RIGHTBRACE      shift and go to state 30


state 18

    (10) FieldMeth -> MethDecl .

    INT             reduce using rule 10 (FieldMeth -> MethDecl .)
    BOOLEAN         reduce using rule 10 (FieldMeth -> MethDecl .)
    STRING          reduce using rule 10 (FieldMeth -> MethDecl .)
    IDEN            reduce using rule 10 (FieldMeth -> MethDecl .)
    VOID            reduce using rule 10 (FieldMeth -> MethDecl .)
    RIGHTBRACE      reduce using rule 10 (FieldMeth -> MethDecl .)


state 19

    (8) FieldMethDecl -> empty .

    RIGHTBRACE      reduce using rule 8 (FieldMethDecl -> empty .)


state 20

    (26) Type -> STRING .

    IDEN            reduce using rule 26 (Type -> STRING .)
    LEFTSQRBRACKET  reduce using rule 26 (Type -> STRING .)


state 21

    (17) MethType -> VOID .

    IDEN            reduce using rule 17 (MethType -> VOID .)


state 22

    (24) Type -> INT .

    IDEN            reduce using rule 24 (Type -> INT .)
    LEFTSQRBRACKET  reduce using rule 24 (Type -> INT .)


state 23

    (9) FieldMeth -> FieldDecl .

    INT             reduce using rule 9 (FieldMeth -> FieldDecl .)
    BOOLEAN         reduce using rule 9 (FieldMeth -> FieldDecl .)
    STRING          reduce using rule 9 (FieldMeth -> FieldDecl .)
    IDEN            reduce using rule 9 (FieldMeth -> FieldDecl .)
    VOID            reduce using rule 9 (FieldMeth -> FieldDecl .)
    RIGHTBRACE      reduce using rule 9 (FieldMeth -> FieldDecl .)


state 24

    (25) Type -> BOOLEAN .

    IDEN            reduce using rule 25 (Type -> BOOLEAN .)
    LEFTSQRBRACKET  reduce using rule 25 (Type -> BOOLEAN .)


state 25

    (28) Type -> Array .

    IDEN            reduce using rule 28 (Type -> Array .)
    LEFTSQRBRACKET  reduce using rule 28 (Type -> Array .)


state 26

    (15) MethDecl -> MethType IDEN . LEFTPARENT Args RIGHTPARENT Block

    LEFTPARENT      shift and go to state 31


state 27

    (11) FieldDecl -> Type IDEN . IdenCommaList SEMICOLON
    (12) IdenCommaList -> . IdenComma IdenCommaList
    (13) IdenCommaList -> . empty
    (14) IdenComma -> . COMMA IDEN
    (108) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 33
    $end            reduce using rule 108 (empty -> .)
    LEFTBRACE       reduce using rule 108 (empty -> .)
    RIGHTBRACE      reduce using rule 108 (empty -> .)
    SEMICOLON       reduce using rule 108 (empty -> .)
    RIGHTPARENT     reduce using rule 108 (empty -> .)
    RETURN          reduce using rule 108 (empty -> .)
    IF              reduce using rule 108 (empty -> .)
    BREAK           reduce using rule 108 (empty -> .)
    CONTINUE        reduce using rule 108 (empty -> .)
    IDEN            reduce using rule 108 (empty -> .)
    WHILE           reduce using rule 108 (empty -> .)
    THIS            reduce using rule 108 (empty -> .)
    NEW             reduce using rule 108 (empty -> .)
    INT             reduce using rule 108 (empty -> .)
    STRING          reduce using rule 108 (empty -> .)
    TRUE            reduce using rule 108 (empty -> .)
    FALSE           reduce using rule 108 (empty -> .)
    NULL            reduce using rule 108 (empty -> .)
    LEFTPARENT      reduce using rule 108 (empty -> .)
    NOT             reduce using rule 108 (empty -> .)
    CIENTIFIC       reduce using rule 108 (empty -> .)
    HEXADEC         reduce using rule 108 (empty -> .)
    NUMBER          reduce using rule 108 (empty -> .)
    BINARY          reduce using rule 108 (empty -> .)
    FLOAT           reduce using rule 108 (empty -> .)
    SUBSTRACTION    reduce using rule 108 (empty -> .)
    ELSE            reduce using rule 108 (empty -> .)

  ! COMMA           [ reduce using rule 108 (empty -> .) ]

    IdenCommaList                  shift and go to state 32
    IdenComma                      shift and go to state 34
    empty                          shift and go to state 35

state 28

    (29) Array -> Type LEFTSQRBRACKET . RIGHTSQRBRACKET

    RIGHTSQRBRACKET shift and go to state 36


state 29

    (7) FieldMethDecl -> FieldMeth FieldMethDecl .

    RIGHTBRACE      reduce using rule 7 (FieldMethDecl -> FieldMeth FieldMethDecl .)


state 30

    (4) ClassDecl -> CLASS IDEN ExtendClass LEFTBRACE FieldMethDecl RIGHTBRACE .

    CLASS           reduce using rule 4 (ClassDecl -> CLASS IDEN ExtendClass LEFTBRACE FieldMethDecl RIGHTBRACE .)
    $end            reduce using rule 4 (ClassDecl -> CLASS IDEN ExtendClass LEFTBRACE FieldMethDecl RIGHTBRACE .)


state 31

    (15) MethDecl -> MethType IDEN LEFTPARENT . Args RIGHTPARENT Block
    (18) Args -> . Formals
    (19) Args -> . empty
    (20) Formals -> . Type IDEN IdenTypeCommaList
    (108) empty -> .
    (24) Type -> . INT
    (25) Type -> . BOOLEAN
    (26) Type -> . STRING
    (27) Type -> . IDEN
    (28) Type -> . Array
    (29) Array -> . Type LEFTSQRBRACKET RIGHTSQRBRACKET

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for IDEN resolved as shift
    $end            reduce using rule 108 (empty -> .)
    LEFTBRACE       reduce using rule 108 (empty -> .)
    RIGHTBRACE      reduce using rule 108 (empty -> .)
    SEMICOLON       reduce using rule 108 (empty -> .)
    RIGHTPARENT     reduce using rule 108 (empty -> .)
    RETURN          reduce using rule 108 (empty -> .)
    IF              reduce using rule 108 (empty -> .)
    BREAK           reduce using rule 108 (empty -> .)
    CONTINUE        reduce using rule 108 (empty -> .)
    WHILE           reduce using rule 108 (empty -> .)
    THIS            reduce using rule 108 (empty -> .)
    NEW             reduce using rule 108 (empty -> .)
    TRUE            reduce using rule 108 (empty -> .)
    FALSE           reduce using rule 108 (empty -> .)
    NULL            reduce using rule 108 (empty -> .)
    LEFTPARENT      reduce using rule 108 (empty -> .)
    NOT             reduce using rule 108 (empty -> .)
    CIENTIFIC       reduce using rule 108 (empty -> .)
    HEXADEC         reduce using rule 108 (empty -> .)
    NUMBER          reduce using rule 108 (empty -> .)
    BINARY          reduce using rule 108 (empty -> .)
    FLOAT           reduce using rule 108 (empty -> .)
    SUBSTRACTION    reduce using rule 108 (empty -> .)
    COMMA           reduce using rule 108 (empty -> .)
    ELSE            reduce using rule 108 (empty -> .)
    INT             shift and go to state 22
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 20
    IDEN            shift and go to state 13

  ! IDEN            [ reduce using rule 108 (empty -> .) ]
  ! INT             [ reduce using rule 108 (empty -> .) ]
  ! STRING          [ reduce using rule 108 (empty -> .) ]

    Args                           shift and go to state 37
    Array                          shift and go to state 25
    Type                           shift and go to state 39
    empty                          shift and go to state 38
    Formals                        shift and go to state 40

state 32

    (11) FieldDecl -> Type IDEN IdenCommaList . SEMICOLON

    SEMICOLON       shift and go to state 41


state 33

    (14) IdenComma -> COMMA . IDEN

    IDEN            shift and go to state 42


state 34

    (12) IdenCommaList -> IdenComma . IdenCommaList
    (12) IdenCommaList -> . IdenComma IdenCommaList
    (13) IdenCommaList -> . empty
    (14) IdenComma -> . COMMA IDEN
    (108) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 33
    $end            reduce using rule 108 (empty -> .)
    LEFTBRACE       reduce using rule 108 (empty -> .)
    RIGHTBRACE      reduce using rule 108 (empty -> .)
    SEMICOLON       reduce using rule 108 (empty -> .)
    RIGHTPARENT     reduce using rule 108 (empty -> .)
    RETURN          reduce using rule 108 (empty -> .)
    IF              reduce using rule 108 (empty -> .)
    BREAK           reduce using rule 108 (empty -> .)
    CONTINUE        reduce using rule 108 (empty -> .)
    IDEN            reduce using rule 108 (empty -> .)
    WHILE           reduce using rule 108 (empty -> .)
    THIS            reduce using rule 108 (empty -> .)
    NEW             reduce using rule 108 (empty -> .)
    INT             reduce using rule 108 (empty -> .)
    STRING          reduce using rule 108 (empty -> .)
    TRUE            reduce using rule 108 (empty -> .)
    FALSE           reduce using rule 108 (empty -> .)
    NULL            reduce using rule 108 (empty -> .)
    LEFTPARENT      reduce using rule 108 (empty -> .)
    NOT             reduce using rule 108 (empty -> .)
    CIENTIFIC       reduce using rule 108 (empty -> .)
    HEXADEC         reduce using rule 108 (empty -> .)
    NUMBER          reduce using rule 108 (empty -> .)
    BINARY          reduce using rule 108 (empty -> .)
    FLOAT           reduce using rule 108 (empty -> .)
    SUBSTRACTION    reduce using rule 108 (empty -> .)
    ELSE            reduce using rule 108 (empty -> .)

  ! COMMA           [ reduce using rule 108 (empty -> .) ]

    IdenComma                      shift and go to state 34
    IdenCommaList                  shift and go to state 43
    empty                          shift and go to state 35

state 35

    (13) IdenCommaList -> empty .

    SEMICOLON       reduce using rule 13 (IdenCommaList -> empty .)


state 36

    (29) Array -> Type LEFTSQRBRACKET RIGHTSQRBRACKET .

    IDEN            reduce using rule 29 (Array -> Type LEFTSQRBRACKET RIGHTSQRBRACKET .)
    LEFTSQRBRACKET  reduce using rule 29 (Array -> Type LEFTSQRBRACKET RIGHTSQRBRACKET .)


state 37

    (15) MethDecl -> MethType IDEN LEFTPARENT Args . RIGHTPARENT Block

    RIGHTPARENT     shift and go to state 44


state 38

    (19) Args -> empty .

    RIGHTPARENT     reduce using rule 19 (Args -> empty .)


state 39

    (20) Formals -> Type . IDEN IdenTypeCommaList
    (29) Array -> Type . LEFTSQRBRACKET RIGHTSQRBRACKET

    IDEN            shift and go to state 45
    LEFTSQRBRACKET  shift and go to state 28


state 40

    (18) Args -> Formals .

    RIGHTPARENT     reduce using rule 18 (Args -> Formals .)


state 41

    (11) FieldDecl -> Type IDEN IdenCommaList SEMICOLON .

    INT             reduce using rule 11 (FieldDecl -> Type IDEN IdenCommaList SEMICOLON .)
    BOOLEAN         reduce using rule 11 (FieldDecl -> Type IDEN IdenCommaList SEMICOLON .)
    STRING          reduce using rule 11 (FieldDecl -> Type IDEN IdenCommaList SEMICOLON .)
    IDEN            reduce using rule 11 (FieldDecl -> Type IDEN IdenCommaList SEMICOLON .)
    VOID            reduce using rule 11 (FieldDecl -> Type IDEN IdenCommaList SEMICOLON .)
    RIGHTBRACE      reduce using rule 11 (FieldDecl -> Type IDEN IdenCommaList SEMICOLON .)


state 42

    (14) IdenComma -> COMMA IDEN .

    COMMA           reduce using rule 14 (IdenComma -> COMMA IDEN .)
    SEMICOLON       reduce using rule 14 (IdenComma -> COMMA IDEN .)


state 43

    (12) IdenCommaList -> IdenComma IdenCommaList .

    SEMICOLON       reduce using rule 12 (IdenCommaList -> IdenComma IdenCommaList .)


state 44

    (15) MethDecl -> MethType IDEN LEFTPARENT Args RIGHTPARENT . Block
    (30) Block -> . LEFTBRACE VarDeclList StmtList RIGHTBRACE

    LEFTBRACE       shift and go to state 47

    Block                          shift and go to state 46

state 45

    (20) Formals -> Type IDEN . IdenTypeCommaList
    (21) IdenTypeCommaList -> . CommaTypeId IdenTypeCommaList
    (22) IdenTypeCommaList -> . empty
    (23) CommaTypeId -> . COMMA Type IDEN
    (108) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 50
    $end            reduce using rule 108 (empty -> .)
    LEFTBRACE       reduce using rule 108 (empty -> .)
    RIGHTBRACE      reduce using rule 108 (empty -> .)
    SEMICOLON       reduce using rule 108 (empty -> .)
    RIGHTPARENT     reduce using rule 108 (empty -> .)
    RETURN          reduce using rule 108 (empty -> .)
    IF              reduce using rule 108 (empty -> .)
    BREAK           reduce using rule 108 (empty -> .)
    CONTINUE        reduce using rule 108 (empty -> .)
    IDEN            reduce using rule 108 (empty -> .)
    WHILE           reduce using rule 108 (empty -> .)
    THIS            reduce using rule 108 (empty -> .)
    NEW             reduce using rule 108 (empty -> .)
    INT             reduce using rule 108 (empty -> .)
    STRING          reduce using rule 108 (empty -> .)
    TRUE            reduce using rule 108 (empty -> .)
    FALSE           reduce using rule 108 (empty -> .)
    NULL            reduce using rule 108 (empty -> .)
    LEFTPARENT      reduce using rule 108 (empty -> .)
    NOT             reduce using rule 108 (empty -> .)
    CIENTIFIC       reduce using rule 108 (empty -> .)
    HEXADEC         reduce using rule 108 (empty -> .)
    NUMBER          reduce using rule 108 (empty -> .)
    BINARY          reduce using rule 108 (empty -> .)
    FLOAT           reduce using rule 108 (empty -> .)
    SUBSTRACTION    reduce using rule 108 (empty -> .)
    ELSE            reduce using rule 108 (empty -> .)

  ! COMMA           [ reduce using rule 108 (empty -> .) ]

    CommaTypeId                    shift and go to state 49
    empty                          shift and go to state 51
    IdenTypeCommaList              shift and go to state 48

state 46

    (15) MethDecl -> MethType IDEN LEFTPARENT Args RIGHTPARENT Block .

    INT             reduce using rule 15 (MethDecl -> MethType IDEN LEFTPARENT Args RIGHTPARENT Block .)
    BOOLEAN         reduce using rule 15 (MethDecl -> MethType IDEN LEFTPARENT Args RIGHTPARENT Block .)
    STRING          reduce using rule 15 (MethDecl -> MethType IDEN LEFTPARENT Args RIGHTPARENT Block .)
    IDEN            reduce using rule 15 (MethDecl -> MethType IDEN LEFTPARENT Args RIGHTPARENT Block .)
    VOID            reduce using rule 15 (MethDecl -> MethType IDEN LEFTPARENT Args RIGHTPARENT Block .)
    RIGHTBRACE      reduce using rule 15 (MethDecl -> MethType IDEN LEFTPARENT Args RIGHTPARENT Block .)


state 47

    (30) Block -> LEFTBRACE . VarDeclList StmtList RIGHTBRACE
    (33) VarDeclList -> . Type IDEN ExpDecl ExpDeclList SEMICOLON VarDeclList
    (34) VarDeclList -> . empty
    (24) Type -> . INT
    (25) Type -> . BOOLEAN
    (26) Type -> . STRING
    (27) Type -> . IDEN
    (28) Type -> . Array
    (108) empty -> .
    (29) Array -> . Type LEFTSQRBRACKET RIGHTSQRBRACKET

  ! shift/reduce conflict for IDEN resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    INT             shift and go to state 22
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 20
    IDEN            shift and go to state 13
    $end            reduce using rule 108 (empty -> .)
    LEFTBRACE       reduce using rule 108 (empty -> .)
    RIGHTBRACE      reduce using rule 108 (empty -> .)
    SEMICOLON       reduce using rule 108 (empty -> .)
    RIGHTPARENT     reduce using rule 108 (empty -> .)
    RETURN          reduce using rule 108 (empty -> .)
    IF              reduce using rule 108 (empty -> .)
    BREAK           reduce using rule 108 (empty -> .)
    CONTINUE        reduce using rule 108 (empty -> .)
    WHILE           reduce using rule 108 (empty -> .)
    THIS            reduce using rule 108 (empty -> .)
    NEW             reduce using rule 108 (empty -> .)
    TRUE            reduce using rule 108 (empty -> .)
    FALSE           reduce using rule 108 (empty -> .)
    NULL            reduce using rule 108 (empty -> .)
    LEFTPARENT      reduce using rule 108 (empty -> .)
    NOT             reduce using rule 108 (empty -> .)
    CIENTIFIC       reduce using rule 108 (empty -> .)
    HEXADEC         reduce using rule 108 (empty -> .)
    NUMBER          reduce using rule 108 (empty -> .)
    BINARY          reduce using rule 108 (empty -> .)
    FLOAT           reduce using rule 108 (empty -> .)
    SUBSTRACTION    reduce using rule 108 (empty -> .)
    COMMA           reduce using rule 108 (empty -> .)
    ELSE            reduce using rule 108 (empty -> .)

  ! IDEN            [ reduce using rule 108 (empty -> .) ]
  ! INT             [ reduce using rule 108 (empty -> .) ]
  ! STRING          [ reduce using rule 108 (empty -> .) ]

    VarDeclList                    shift and go to state 52
    Array                          shift and go to state 25
    Type                           shift and go to state 53
    empty                          shift and go to state 54

state 48

    (20) Formals -> Type IDEN IdenTypeCommaList .

    RIGHTPARENT     reduce using rule 20 (Formals -> Type IDEN IdenTypeCommaList .)


state 49

    (21) IdenTypeCommaList -> CommaTypeId . IdenTypeCommaList
    (21) IdenTypeCommaList -> . CommaTypeId IdenTypeCommaList
    (22) IdenTypeCommaList -> . empty
    (23) CommaTypeId -> . COMMA Type IDEN
    (108) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 50
    $end            reduce using rule 108 (empty -> .)
    LEFTBRACE       reduce using rule 108 (empty -> .)
    RIGHTBRACE      reduce using rule 108 (empty -> .)
    SEMICOLON       reduce using rule 108 (empty -> .)
    RIGHTPARENT     reduce using rule 108 (empty -> .)
    RETURN          reduce using rule 108 (empty -> .)
    IF              reduce using rule 108 (empty -> .)
    BREAK           reduce using rule 108 (empty -> .)
    CONTINUE        reduce using rule 108 (empty -> .)
    IDEN            reduce using rule 108 (empty -> .)
    WHILE           reduce using rule 108 (empty -> .)
    THIS            reduce using rule 108 (empty -> .)
    NEW             reduce using rule 108 (empty -> .)
    INT             reduce using rule 108 (empty -> .)
    STRING          reduce using rule 108 (empty -> .)
    TRUE            reduce using rule 108 (empty -> .)
    FALSE           reduce using rule 108 (empty -> .)
    NULL            reduce using rule 108 (empty -> .)
    LEFTPARENT      reduce using rule 108 (empty -> .)
    NOT             reduce using rule 108 (empty -> .)
    CIENTIFIC       reduce using rule 108 (empty -> .)
    HEXADEC         reduce using rule 108 (empty -> .)
    NUMBER          reduce using rule 108 (empty -> .)
    BINARY          reduce using rule 108 (empty -> .)
    FLOAT           reduce using rule 108 (empty -> .)
    SUBSTRACTION    reduce using rule 108 (empty -> .)
    ELSE            reduce using rule 108 (empty -> .)

  ! COMMA           [ reduce using rule 108 (empty -> .) ]

    CommaTypeId                    shift and go to state 49
    empty                          shift and go to state 51
    IdenTypeCommaList              shift and go to state 55

state 50

    (23) CommaTypeId -> COMMA . Type IDEN
    (24) Type -> . INT
    (25) Type -> . BOOLEAN
    (26) Type -> . STRING
    (27) Type -> . IDEN
    (28) Type -> . Array
    (29) Array -> . Type LEFTSQRBRACKET RIGHTSQRBRACKET

    INT             shift and go to state 22
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 20
    IDEN            shift and go to state 13

    Array                          shift and go to state 25
    Type                           shift and go to state 56

state 51

    (22) IdenTypeCommaList -> empty .

    RIGHTPARENT     reduce using rule 22 (IdenTypeCommaList -> empty .)


state 52

    (30) Block -> LEFTBRACE VarDeclList . StmtList RIGHTBRACE
    (31) StmtList -> . Stmt StmtList
    (32) StmtList -> . empty
    (40) Stmt -> . Assign SEMICOLON
    (41) Stmt -> . Call SEMICOLON
    (42) Stmt -> . Return
    (43) Stmt -> . IfStmt
    (44) Stmt -> . WhileStmt
    (45) Stmt -> . BREAK SEMICOLON
    (46) Stmt -> . CONTINUE SEMICOLON
    (47) Stmt -> . Block
    (108) empty -> .
    (48) Assign -> . Location ASSIGNMENT Expr
    (52) Call -> . Method LEFTPARENT Actuals RIGHTPARENT
    (59) Return -> . RETURN ReturnExpr SEMICOLON
    (62) IfStmt -> . IF LEFTPARENT Expr RIGHTPARENT Stmt ElseStmt
    (65) WhileStmt -> . WHILE LEFTPARENT Expr RIGHTPARENT Stmt
    (30) Block -> . LEFTBRACE VarDeclList StmtList RIGHTBRACE
    (49) Location -> . IDEN
    (50) Location -> . Expr DOT IDEN
    (51) Location -> . Expr LEFTSQRBRACKET Expr RIGHTSQRBRACKET
    (53) Method -> . IDEN
    (54) Method -> . Expr DOT IDEN
    (66) Expr -> . Location
    (67) Expr -> . Call
    (68) Expr -> . THIS
    (69) Expr -> . NewId
    (70) Expr -> . NewTypeExpr
    (71) Expr -> . ExprLength
    (72) Expr -> . ExprBinaryExpr
    (73) Expr -> . UnaryExpr
    (74) Expr -> . Literal
    (75) Expr -> . Number
    (76) Expr -> . ParentExprParent
    (77) NewId -> . NEW IDEN LEFTPARENT RIGHTPARENT
    (78) NewTypeExpr -> . NEW Type LEFTSQRBRACKET Expr LEFTSQRBRACKET
    (79) ExprLength -> . Expr DOT LENGTH
    (80) ExprBinaryExpr -> . Expr ADDITION Expr
    (81) ExprBinaryExpr -> . Expr SUBSTRACTION Expr
    (82) ExprBinaryExpr -> . Expr MULTIPLICATION Expr
    (83) ExprBinaryExpr -> . Expr DIVISION Expr
    (84) ExprBinaryExpr -> . Expr MODULO Expr
    (85) ExprBinaryExpr -> . Expr AND Expr
    (86) ExprBinaryExpr -> . Expr OR Expr
    (87) ExprBinaryExpr -> . Expr CONCAT Expr
    (88) ExprBinaryExpr -> . Expr LESS Expr
    (89) ExprBinaryExpr -> . Expr LESSEQUAL Expr
    (90) ExprBinaryExpr -> . Expr GREATER Expr
    (91) ExprBinaryExpr -> . Expr GREATEREQUAL Expr
    (92) ExprBinaryExpr -> . Expr EQUAL Expr
    (93) ExprBinaryExpr -> . Expr NOTEQUAL Expr
    (94) UnaryExpr -> . UnaryMinus
    (95) UnaryExpr -> . NOT
    (97) Literal -> . INT
    (98) Literal -> . STRING
    (99) Literal -> . TRUE
    (100) Literal -> . FALSE
    (101) Literal -> . NULL
    (103) Number -> . CIENTIFIC
    (104) Number -> . HEXADEC
    (105) Number -> . NUMBER
    (106) Number -> . BINARY
    (107) Number -> . FLOAT
    (102) ParentExprParent -> . LEFTPARENT Expr RIGHTPARENT
    (96) UnaryMinus -> . SUBSTRACTION Expr

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for LEFTBRACE resolved as shift
  ! shift/reduce conflict for IDEN resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for CIENTIFIC resolved as shift
  ! shift/reduce conflict for HEXADEC resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for BINARY resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LEFTPARENT resolved as shift
  ! shift/reduce conflict for SUBSTRACTION resolved as shift
    BREAK           shift and go to state 94
    CONTINUE        shift and go to state 95
    $end            reduce using rule 108 (empty -> .)
    RIGHTBRACE      reduce using rule 108 (empty -> .)
    SEMICOLON       reduce using rule 108 (empty -> .)
    RIGHTPARENT     reduce using rule 108 (empty -> .)
    COMMA           reduce using rule 108 (empty -> .)
    ELSE            reduce using rule 108 (empty -> .)
    RETURN          shift and go to state 58
    IF              shift and go to state 87
    WHILE           shift and go to state 60
    LEFTBRACE       shift and go to state 47
    IDEN            shift and go to state 57
    THIS            shift and go to state 90
    NEW             shift and go to state 64
    NOT             shift and go to state 96
    INT             shift and go to state 75
    STRING          shift and go to state 77
    TRUE            shift and go to state 69
    FALSE           shift and go to state 89
    NULL            shift and go to state 65
    CIENTIFIC       shift and go to state 70
    HEXADEC         shift and go to state 81
    NUMBER          shift and go to state 98
    BINARY          shift and go to state 78
    FLOAT           shift and go to state 91
    LEFTPARENT      shift and go to state 84
    SUBSTRACTION    shift and go to state 97

  ! LEFTBRACE       [ reduce using rule 108 (empty -> .) ]
  ! RETURN          [ reduce using rule 108 (empty -> .) ]
  ! IF              [ reduce using rule 108 (empty -> .) ]
  ! BREAK           [ reduce using rule 108 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 108 (empty -> .) ]
  ! IDEN            [ reduce using rule 108 (empty -> .) ]
  ! WHILE           [ reduce using rule 108 (empty -> .) ]
  ! THIS            [ reduce using rule 108 (empty -> .) ]
  ! NEW             [ reduce using rule 108 (empty -> .) ]
  ! INT             [ reduce using rule 108 (empty -> .) ]
  ! STRING          [ reduce using rule 108 (empty -> .) ]
  ! TRUE            [ reduce using rule 108 (empty -> .) ]
  ! FALSE           [ reduce using rule 108 (empty -> .) ]
  ! NULL            [ reduce using rule 108 (empty -> .) ]
  ! LEFTPARENT      [ reduce using rule 108 (empty -> .) ]
  ! NOT             [ reduce using rule 108 (empty -> .) ]
  ! CIENTIFIC       [ reduce using rule 108 (empty -> .) ]
  ! HEXADEC         [ reduce using rule 108 (empty -> .) ]
  ! NUMBER          [ reduce using rule 108 (empty -> .) ]
  ! BINARY          [ reduce using rule 108 (empty -> .) ]
  ! FLOAT           [ reduce using rule 108 (empty -> .) ]
  ! SUBSTRACTION    [ reduce using rule 108 (empty -> .) ]

    ParentExprParent               shift and go to state 59
    Literal                        shift and go to state 92
    Call                           shift and go to state 61
    Location                       shift and go to state 62
    StmtList                       shift and go to state 63
    Method                         shift and go to state 66
    Return                         shift and go to state 67
    ExprLength                     shift and go to state 68
    Stmt                           shift and go to state 71
    IfStmt                         shift and go to state 72
    NewId                          shift and go to state 73
    empty                          shift and go to state 76
    NewTypeExpr                    shift and go to state 79
    Expr                           shift and go to state 80
    UnaryExpr                      shift and go to state 82
    WhileStmt                      shift and go to state 83
    Assign                         shift and go to state 85
    Block                          shift and go to state 86
    ExprBinaryExpr                 shift and go to state 88
    Number                         shift and go to state 74
    UnaryMinus                     shift and go to state 93

state 53

    (33) VarDeclList -> Type . IDEN ExpDecl ExpDeclList SEMICOLON VarDeclList
    (29) Array -> Type . LEFTSQRBRACKET RIGHTSQRBRACKET

    IDEN            shift and go to state 99
    LEFTSQRBRACKET  shift and go to state 28


state 54

    (34) VarDeclList -> empty .

    RETURN          reduce using rule 34 (VarDeclList -> empty .)
    IF              reduce using rule 34 (VarDeclList -> empty .)
    BREAK           reduce using rule 34 (VarDeclList -> empty .)
    CONTINUE        reduce using rule 34 (VarDeclList -> empty .)
    IDEN            reduce using rule 34 (VarDeclList -> empty .)
    WHILE           reduce using rule 34 (VarDeclList -> empty .)
    LEFTBRACE       reduce using rule 34 (VarDeclList -> empty .)
    THIS            reduce using rule 34 (VarDeclList -> empty .)
    NEW             reduce using rule 34 (VarDeclList -> empty .)
    INT             reduce using rule 34 (VarDeclList -> empty .)
    STRING          reduce using rule 34 (VarDeclList -> empty .)
    TRUE            reduce using rule 34 (VarDeclList -> empty .)
    FALSE           reduce using rule 34 (VarDeclList -> empty .)
    NULL            reduce using rule 34 (VarDeclList -> empty .)
    LEFTPARENT      reduce using rule 34 (VarDeclList -> empty .)
    NOT             reduce using rule 34 (VarDeclList -> empty .)
    CIENTIFIC       reduce using rule 34 (VarDeclList -> empty .)
    HEXADEC         reduce using rule 34 (VarDeclList -> empty .)
    NUMBER          reduce using rule 34 (VarDeclList -> empty .)
    BINARY          reduce using rule 34 (VarDeclList -> empty .)
    FLOAT           reduce using rule 34 (VarDeclList -> empty .)
    SUBSTRACTION    reduce using rule 34 (VarDeclList -> empty .)
    RIGHTBRACE      reduce using rule 34 (VarDeclList -> empty .)


state 55

    (21) IdenTypeCommaList -> CommaTypeId IdenTypeCommaList .

    RIGHTPARENT     reduce using rule 21 (IdenTypeCommaList -> CommaTypeId IdenTypeCommaList .)


state 56

    (23) CommaTypeId -> COMMA Type . IDEN
    (29) Array -> Type . LEFTSQRBRACKET RIGHTSQRBRACKET

    IDEN            shift and go to state 100
    LEFTSQRBRACKET  shift and go to state 28


state 57

    (49) Location -> IDEN .
    (53) Method -> IDEN .

    ASSIGNMENT      reduce using rule 49 (Location -> IDEN .)
    COMMA           reduce using rule 49 (Location -> IDEN .)
    SEMICOLON       reduce using rule 49 (Location -> IDEN .)
    DOT             reduce using rule 49 (Location -> IDEN .)
    LEFTSQRBRACKET  reduce using rule 49 (Location -> IDEN .)
    RIGHTSQRBRACKET reduce using rule 49 (Location -> IDEN .)
    RIGHTPARENT     reduce using rule 49 (Location -> IDEN .)
    ADDITION        reduce using rule 49 (Location -> IDEN .)
    SUBSTRACTION    reduce using rule 49 (Location -> IDEN .)
    MULTIPLICATION  reduce using rule 49 (Location -> IDEN .)
    DIVISION        reduce using rule 49 (Location -> IDEN .)
    MODULO          reduce using rule 49 (Location -> IDEN .)
    AND             reduce using rule 49 (Location -> IDEN .)
    OR              reduce using rule 49 (Location -> IDEN .)
    CONCAT          reduce using rule 49 (Location -> IDEN .)
    LESS            reduce using rule 49 (Location -> IDEN .)
    LESSEQUAL       reduce using rule 49 (Location -> IDEN .)
    GREATER         reduce using rule 49 (Location -> IDEN .)
    GREATEREQUAL    reduce using rule 49 (Location -> IDEN .)
    EQUAL           reduce using rule 49 (Location -> IDEN .)
    NOTEQUAL        reduce using rule 49 (Location -> IDEN .)
    LEFTPARENT      reduce using rule 53 (Method -> IDEN .)


state 58

    (59) Return -> RETURN . ReturnExpr SEMICOLON
    (60) ReturnExpr -> . Expr
    (61) ReturnExpr -> . empty
    (66) Expr -> . Location
    (67) Expr -> . Call
    (68) Expr -> . THIS
    (69) Expr -> . NewId
    (70) Expr -> . NewTypeExpr
    (71) Expr -> . ExprLength
    (72) Expr -> . ExprBinaryExpr
    (73) Expr -> . UnaryExpr
    (74) Expr -> . Literal
    (75) Expr -> . Number
    (76) Expr -> . ParentExprParent
    (108) empty -> .
    (49) Location -> . IDEN
    (50) Location -> . Expr DOT IDEN
    (51) Location -> . Expr LEFTSQRBRACKET Expr RIGHTSQRBRACKET
    (52) Call -> . Method LEFTPARENT Actuals RIGHTPARENT
    (77) NewId -> . NEW IDEN LEFTPARENT RIGHTPARENT
    (78) NewTypeExpr -> . NEW Type LEFTSQRBRACKET Expr LEFTSQRBRACKET
    (79) ExprLength -> . Expr DOT LENGTH
    (80) ExprBinaryExpr -> . Expr ADDITION Expr
    (81) ExprBinaryExpr -> . Expr SUBSTRACTION Expr
    (82) ExprBinaryExpr -> . Expr MULTIPLICATION Expr
    (83) ExprBinaryExpr -> . Expr DIVISION Expr
    (84) ExprBinaryExpr -> . Expr MODULO Expr
    (85) ExprBinaryExpr -> . Expr AND Expr
    (86) ExprBinaryExpr -> . Expr OR Expr
    (87) ExprBinaryExpr -> . Expr CONCAT Expr
    (88) ExprBinaryExpr -> . Expr LESS Expr
    (89) ExprBinaryExpr -> . Expr LESSEQUAL Expr
    (90) ExprBinaryExpr -> . Expr GREATER Expr
    (91) ExprBinaryExpr -> . Expr GREATEREQUAL Expr
    (92) ExprBinaryExpr -> . Expr EQUAL Expr
    (93) ExprBinaryExpr -> . Expr NOTEQUAL Expr
    (94) UnaryExpr -> . UnaryMinus
    (95) UnaryExpr -> . NOT
    (97) Literal -> . INT
    (98) Literal -> . STRING
    (99) Literal -> . TRUE
    (100) Literal -> . FALSE
    (101) Literal -> . NULL
    (103) Number -> . CIENTIFIC
    (104) Number -> . HEXADEC
    (105) Number -> . NUMBER
    (106) Number -> . BINARY
    (107) Number -> . FLOAT
    (102) ParentExprParent -> . LEFTPARENT Expr RIGHTPARENT
    (53) Method -> . IDEN
    (54) Method -> . Expr DOT IDEN
    (96) UnaryMinus -> . SUBSTRACTION Expr

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for IDEN resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for CIENTIFIC resolved as shift
  ! shift/reduce conflict for HEXADEC resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for BINARY resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LEFTPARENT resolved as shift
  ! shift/reduce conflict for SUBSTRACTION resolved as shift
    THIS            shift and go to state 90
    $end            reduce using rule 108 (empty -> .)
    LEFTBRACE       reduce using rule 108 (empty -> .)
    RIGHTBRACE      reduce using rule 108 (empty -> .)
    SEMICOLON       reduce using rule 108 (empty -> .)
    RIGHTPARENT     reduce using rule 108 (empty -> .)
    RETURN          reduce using rule 108 (empty -> .)
    IF              reduce using rule 108 (empty -> .)
    BREAK           reduce using rule 108 (empty -> .)
    CONTINUE        reduce using rule 108 (empty -> .)
    WHILE           reduce using rule 108 (empty -> .)
    COMMA           reduce using rule 108 (empty -> .)
    ELSE            reduce using rule 108 (empty -> .)
    IDEN            shift and go to state 57
    NEW             shift and go to state 64
    NOT             shift and go to state 96
    INT             shift and go to state 75
    STRING          shift and go to state 77
    TRUE            shift and go to state 69
    FALSE           shift and go to state 89
    NULL            shift and go to state 65
    CIENTIFIC       shift and go to state 70
    HEXADEC         shift and go to state 81
    NUMBER          shift and go to state 98
    BINARY          shift and go to state 78
    FLOAT           shift and go to state 91
    LEFTPARENT      shift and go to state 84
    SUBSTRACTION    shift and go to state 97

  ! IDEN            [ reduce using rule 108 (empty -> .) ]
  ! THIS            [ reduce using rule 108 (empty -> .) ]
  ! NEW             [ reduce using rule 108 (empty -> .) ]
  ! INT             [ reduce using rule 108 (empty -> .) ]
  ! STRING          [ reduce using rule 108 (empty -> .) ]
  ! TRUE            [ reduce using rule 108 (empty -> .) ]
  ! FALSE           [ reduce using rule 108 (empty -> .) ]
  ! NULL            [ reduce using rule 108 (empty -> .) ]
  ! LEFTPARENT      [ reduce using rule 108 (empty -> .) ]
  ! NOT             [ reduce using rule 108 (empty -> .) ]
  ! CIENTIFIC       [ reduce using rule 108 (empty -> .) ]
  ! HEXADEC         [ reduce using rule 108 (empty -> .) ]
  ! NUMBER          [ reduce using rule 108 (empty -> .) ]
  ! BINARY          [ reduce using rule 108 (empty -> .) ]
  ! FLOAT           [ reduce using rule 108 (empty -> .) ]
  ! SUBSTRACTION    [ reduce using rule 108 (empty -> .) ]

    ExprBinaryExpr                 shift and go to state 88
    Method                         shift and go to state 66
    ExprLength                     shift and go to state 68
    NewTypeExpr                    shift and go to state 79
    Expr                           shift and go to state 104
    UnaryExpr                      shift and go to state 82
    Number                         shift and go to state 74
    ReturnExpr                     shift and go to state 105
    Literal                        shift and go to state 92
    NewId                          shift and go to state 73
    Location                       shift and go to state 102
    UnaryMinus                     shift and go to state 93
    Call                           shift and go to state 101
    ParentExprParent               shift and go to state 59
    empty                          shift and go to state 103

state 59

    (76) Expr -> ParentExprParent .

    COMMA           reduce using rule 76 (Expr -> ParentExprParent .)
    SEMICOLON       reduce using rule 76 (Expr -> ParentExprParent .)
    DOT             reduce using rule 76 (Expr -> ParentExprParent .)
    LEFTSQRBRACKET  reduce using rule 76 (Expr -> ParentExprParent .)
    RIGHTSQRBRACKET reduce using rule 76 (Expr -> ParentExprParent .)
    RIGHTPARENT     reduce using rule 76 (Expr -> ParentExprParent .)
    ADDITION        reduce using rule 76 (Expr -> ParentExprParent .)
    SUBSTRACTION    reduce using rule 76 (Expr -> ParentExprParent .)
    MULTIPLICATION  reduce using rule 76 (Expr -> ParentExprParent .)
    DIVISION        reduce using rule 76 (Expr -> ParentExprParent .)
    MODULO          reduce using rule 76 (Expr -> ParentExprParent .)
    AND             reduce using rule 76 (Expr -> ParentExprParent .)
    OR              reduce using rule 76 (Expr -> ParentExprParent .)
    CONCAT          reduce using rule 76 (Expr -> ParentExprParent .)
    LESS            reduce using rule 76 (Expr -> ParentExprParent .)
    LESSEQUAL       reduce using rule 76 (Expr -> ParentExprParent .)
    GREATER         reduce using rule 76 (Expr -> ParentExprParent .)
    GREATEREQUAL    reduce using rule 76 (Expr -> ParentExprParent .)
    EQUAL           reduce using rule 76 (Expr -> ParentExprParent .)
    NOTEQUAL        reduce using rule 76 (Expr -> ParentExprParent .)


state 60

    (65) WhileStmt -> WHILE . LEFTPARENT Expr RIGHTPARENT Stmt

    LEFTPARENT      shift and go to state 106


state 61

    (41) Stmt -> Call . SEMICOLON
    (67) Expr -> Call .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 107
    COMMA           reduce using rule 67 (Expr -> Call .)
    DOT             reduce using rule 67 (Expr -> Call .)
    LEFTSQRBRACKET  reduce using rule 67 (Expr -> Call .)
    RIGHTSQRBRACKET reduce using rule 67 (Expr -> Call .)
    RIGHTPARENT     reduce using rule 67 (Expr -> Call .)
    ADDITION        reduce using rule 67 (Expr -> Call .)
    SUBSTRACTION    reduce using rule 67 (Expr -> Call .)
    MULTIPLICATION  reduce using rule 67 (Expr -> Call .)
    DIVISION        reduce using rule 67 (Expr -> Call .)
    MODULO          reduce using rule 67 (Expr -> Call .)
    AND             reduce using rule 67 (Expr -> Call .)
    OR              reduce using rule 67 (Expr -> Call .)
    CONCAT          reduce using rule 67 (Expr -> Call .)
    LESS            reduce using rule 67 (Expr -> Call .)
    LESSEQUAL       reduce using rule 67 (Expr -> Call .)
    GREATER         reduce using rule 67 (Expr -> Call .)
    GREATEREQUAL    reduce using rule 67 (Expr -> Call .)
    EQUAL           reduce using rule 67 (Expr -> Call .)
    NOTEQUAL        reduce using rule 67 (Expr -> Call .)

  ! SEMICOLON       [ reduce using rule 67 (Expr -> Call .) ]


state 62

    (48) Assign -> Location . ASSIGNMENT Expr
    (66) Expr -> Location .

    ASSIGNMENT      shift and go to state 108
    COMMA           reduce using rule 66 (Expr -> Location .)
    SEMICOLON       reduce using rule 66 (Expr -> Location .)
    DOT             reduce using rule 66 (Expr -> Location .)
    LEFTSQRBRACKET  reduce using rule 66 (Expr -> Location .)
    RIGHTSQRBRACKET reduce using rule 66 (Expr -> Location .)
    RIGHTPARENT     reduce using rule 66 (Expr -> Location .)
    ADDITION        reduce using rule 66 (Expr -> Location .)
    SUBSTRACTION    reduce using rule 66 (Expr -> Location .)
    MULTIPLICATION  reduce using rule 66 (Expr -> Location .)
    DIVISION        reduce using rule 66 (Expr -> Location .)
    MODULO          reduce using rule 66 (Expr -> Location .)
    AND             reduce using rule 66 (Expr -> Location .)
    OR              reduce using rule 66 (Expr -> Location .)
    CONCAT          reduce using rule 66 (Expr -> Location .)
    LESS            reduce using rule 66 (Expr -> Location .)
    LESSEQUAL       reduce using rule 66 (Expr -> Location .)
    GREATER         reduce using rule 66 (Expr -> Location .)
    GREATEREQUAL    reduce using rule 66 (Expr -> Location .)
    EQUAL           reduce using rule 66 (Expr -> Location .)
    NOTEQUAL        reduce using rule 66 (Expr -> Location .)


state 63

    (30) Block -> LEFTBRACE VarDeclList StmtList . RIGHTBRACE

    RIGHTBRACE      shift and go to state 109


state 64

    (77) NewId -> NEW . IDEN LEFTPARENT RIGHTPARENT
    (78) NewTypeExpr -> NEW . Type LEFTSQRBRACKET Expr LEFTSQRBRACKET
    (24) Type -> . INT
    (25) Type -> . BOOLEAN
    (26) Type -> . STRING
    (27) Type -> . IDEN
    (28) Type -> . Array
    (29) Array -> . Type LEFTSQRBRACKET RIGHTSQRBRACKET

    IDEN            shift and go to state 110
    INT             shift and go to state 22
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 20

    Array                          shift and go to state 25
    Type                           shift and go to state 111

state 65

    (101) Literal -> NULL .

    COMMA           reduce using rule 101 (Literal -> NULL .)
    SEMICOLON       reduce using rule 101 (Literal -> NULL .)
    DOT             reduce using rule 101 (Literal -> NULL .)
    LEFTSQRBRACKET  reduce using rule 101 (Literal -> NULL .)
    RIGHTSQRBRACKET reduce using rule 101 (Literal -> NULL .)
    RIGHTPARENT     reduce using rule 101 (Literal -> NULL .)
    ADDITION        reduce using rule 101 (Literal -> NULL .)
    SUBSTRACTION    reduce using rule 101 (Literal -> NULL .)
    MULTIPLICATION  reduce using rule 101 (Literal -> NULL .)
    DIVISION        reduce using rule 101 (Literal -> NULL .)
    MODULO          reduce using rule 101 (Literal -> NULL .)
    AND             reduce using rule 101 (Literal -> NULL .)
    OR              reduce using rule 101 (Literal -> NULL .)
    CONCAT          reduce using rule 101 (Literal -> NULL .)
    LESS            reduce using rule 101 (Literal -> NULL .)
    LESSEQUAL       reduce using rule 101 (Literal -> NULL .)
    GREATER         reduce using rule 101 (Literal -> NULL .)
    GREATEREQUAL    reduce using rule 101 (Literal -> NULL .)
    EQUAL           reduce using rule 101 (Literal -> NULL .)
    NOTEQUAL        reduce using rule 101 (Literal -> NULL .)


state 66

    (52) Call -> Method . LEFTPARENT Actuals RIGHTPARENT

    LEFTPARENT      shift and go to state 112


state 67

    (42) Stmt -> Return .

    RETURN          reduce using rule 42 (Stmt -> Return .)
    IF              reduce using rule 42 (Stmt -> Return .)
    BREAK           reduce using rule 42 (Stmt -> Return .)
    CONTINUE        reduce using rule 42 (Stmt -> Return .)
    IDEN            reduce using rule 42 (Stmt -> Return .)
    WHILE           reduce using rule 42 (Stmt -> Return .)
    LEFTBRACE       reduce using rule 42 (Stmt -> Return .)
    THIS            reduce using rule 42 (Stmt -> Return .)
    NEW             reduce using rule 42 (Stmt -> Return .)
    INT             reduce using rule 42 (Stmt -> Return .)
    STRING          reduce using rule 42 (Stmt -> Return .)
    TRUE            reduce using rule 42 (Stmt -> Return .)
    FALSE           reduce using rule 42 (Stmt -> Return .)
    NULL            reduce using rule 42 (Stmt -> Return .)
    LEFTPARENT      reduce using rule 42 (Stmt -> Return .)
    NOT             reduce using rule 42 (Stmt -> Return .)
    CIENTIFIC       reduce using rule 42 (Stmt -> Return .)
    HEXADEC         reduce using rule 42 (Stmt -> Return .)
    NUMBER          reduce using rule 42 (Stmt -> Return .)
    BINARY          reduce using rule 42 (Stmt -> Return .)
    FLOAT           reduce using rule 42 (Stmt -> Return .)
    SUBSTRACTION    reduce using rule 42 (Stmt -> Return .)
    RIGHTBRACE      reduce using rule 42 (Stmt -> Return .)
    ELSE            reduce using rule 42 (Stmt -> Return .)


state 68

    (71) Expr -> ExprLength .

    COMMA           reduce using rule 71 (Expr -> ExprLength .)
    SEMICOLON       reduce using rule 71 (Expr -> ExprLength .)
    DOT             reduce using rule 71 (Expr -> ExprLength .)
    LEFTSQRBRACKET  reduce using rule 71 (Expr -> ExprLength .)
    RIGHTSQRBRACKET reduce using rule 71 (Expr -> ExprLength .)
    RIGHTPARENT     reduce using rule 71 (Expr -> ExprLength .)
    ADDITION        reduce using rule 71 (Expr -> ExprLength .)
    SUBSTRACTION    reduce using rule 71 (Expr -> ExprLength .)
    MULTIPLICATION  reduce using rule 71 (Expr -> ExprLength .)
    DIVISION        reduce using rule 71 (Expr -> ExprLength .)
    MODULO          reduce using rule 71 (Expr -> ExprLength .)
    AND             reduce using rule 71 (Expr -> ExprLength .)
    OR              reduce using rule 71 (Expr -> ExprLength .)
    CONCAT          reduce using rule 71 (Expr -> ExprLength .)
    LESS            reduce using rule 71 (Expr -> ExprLength .)
    LESSEQUAL       reduce using rule 71 (Expr -> ExprLength .)
    GREATER         reduce using rule 71 (Expr -> ExprLength .)
    GREATEREQUAL    reduce using rule 71 (Expr -> ExprLength .)
    EQUAL           reduce using rule 71 (Expr -> ExprLength .)
    NOTEQUAL        reduce using rule 71 (Expr -> ExprLength .)


state 69

    (99) Literal -> TRUE .

    COMMA           reduce using rule 99 (Literal -> TRUE .)
    SEMICOLON       reduce using rule 99 (Literal -> TRUE .)
    DOT             reduce using rule 99 (Literal -> TRUE .)
    LEFTSQRBRACKET  reduce using rule 99 (Literal -> TRUE .)
    RIGHTSQRBRACKET reduce using rule 99 (Literal -> TRUE .)
    RIGHTPARENT     reduce using rule 99 (Literal -> TRUE .)
    ADDITION        reduce using rule 99 (Literal -> TRUE .)
    SUBSTRACTION    reduce using rule 99 (Literal -> TRUE .)
    MULTIPLICATION  reduce using rule 99 (Literal -> TRUE .)
    DIVISION        reduce using rule 99 (Literal -> TRUE .)
    MODULO          reduce using rule 99 (Literal -> TRUE .)
    AND             reduce using rule 99 (Literal -> TRUE .)
    OR              reduce using rule 99 (Literal -> TRUE .)
    CONCAT          reduce using rule 99 (Literal -> TRUE .)
    LESS            reduce using rule 99 (Literal -> TRUE .)
    LESSEQUAL       reduce using rule 99 (Literal -> TRUE .)
    GREATER         reduce using rule 99 (Literal -> TRUE .)
    GREATEREQUAL    reduce using rule 99 (Literal -> TRUE .)
    EQUAL           reduce using rule 99 (Literal -> TRUE .)
    NOTEQUAL        reduce using rule 99 (Literal -> TRUE .)


state 70

    (103) Number -> CIENTIFIC .

    COMMA           reduce using rule 103 (Number -> CIENTIFIC .)
    SEMICOLON       reduce using rule 103 (Number -> CIENTIFIC .)
    DOT             reduce using rule 103 (Number -> CIENTIFIC .)
    LEFTSQRBRACKET  reduce using rule 103 (Number -> CIENTIFIC .)
    RIGHTSQRBRACKET reduce using rule 103 (Number -> CIENTIFIC .)
    RIGHTPARENT     reduce using rule 103 (Number -> CIENTIFIC .)
    ADDITION        reduce using rule 103 (Number -> CIENTIFIC .)
    SUBSTRACTION    reduce using rule 103 (Number -> CIENTIFIC .)
    MULTIPLICATION  reduce using rule 103 (Number -> CIENTIFIC .)
    DIVISION        reduce using rule 103 (Number -> CIENTIFIC .)
    MODULO          reduce using rule 103 (Number -> CIENTIFIC .)
    AND             reduce using rule 103 (Number -> CIENTIFIC .)
    OR              reduce using rule 103 (Number -> CIENTIFIC .)
    CONCAT          reduce using rule 103 (Number -> CIENTIFIC .)
    LESS            reduce using rule 103 (Number -> CIENTIFIC .)
    LESSEQUAL       reduce using rule 103 (Number -> CIENTIFIC .)
    GREATER         reduce using rule 103 (Number -> CIENTIFIC .)
    GREATEREQUAL    reduce using rule 103 (Number -> CIENTIFIC .)
    EQUAL           reduce using rule 103 (Number -> CIENTIFIC .)
    NOTEQUAL        reduce using rule 103 (Number -> CIENTIFIC .)


state 71

    (31) StmtList -> Stmt . StmtList
    (31) StmtList -> . Stmt StmtList
    (32) StmtList -> . empty
    (40) Stmt -> . Assign SEMICOLON
    (41) Stmt -> . Call SEMICOLON
    (42) Stmt -> . Return
    (43) Stmt -> . IfStmt
    (44) Stmt -> . WhileStmt
    (45) Stmt -> . BREAK SEMICOLON
    (46) Stmt -> . CONTINUE SEMICOLON
    (47) Stmt -> . Block
    (108) empty -> .
    (48) Assign -> . Location ASSIGNMENT Expr
    (52) Call -> . Method LEFTPARENT Actuals RIGHTPARENT
    (59) Return -> . RETURN ReturnExpr SEMICOLON
    (62) IfStmt -> . IF LEFTPARENT Expr RIGHTPARENT Stmt ElseStmt
    (65) WhileStmt -> . WHILE LEFTPARENT Expr RIGHTPARENT Stmt
    (30) Block -> . LEFTBRACE VarDeclList StmtList RIGHTBRACE
    (49) Location -> . IDEN
    (50) Location -> . Expr DOT IDEN
    (51) Location -> . Expr LEFTSQRBRACKET Expr RIGHTSQRBRACKET
    (53) Method -> . IDEN
    (54) Method -> . Expr DOT IDEN
    (66) Expr -> . Location
    (67) Expr -> . Call
    (68) Expr -> . THIS
    (69) Expr -> . NewId
    (70) Expr -> . NewTypeExpr
    (71) Expr -> . ExprLength
    (72) Expr -> . ExprBinaryExpr
    (73) Expr -> . UnaryExpr
    (74) Expr -> . Literal
    (75) Expr -> . Number
    (76) Expr -> . ParentExprParent
    (77) NewId -> . NEW IDEN LEFTPARENT RIGHTPARENT
    (78) NewTypeExpr -> . NEW Type LEFTSQRBRACKET Expr LEFTSQRBRACKET
    (79) ExprLength -> . Expr DOT LENGTH
    (80) ExprBinaryExpr -> . Expr ADDITION Expr
    (81) ExprBinaryExpr -> . Expr SUBSTRACTION Expr
    (82) ExprBinaryExpr -> . Expr MULTIPLICATION Expr
    (83) ExprBinaryExpr -> . Expr DIVISION Expr
    (84) ExprBinaryExpr -> . Expr MODULO Expr
    (85) ExprBinaryExpr -> . Expr AND Expr
    (86) ExprBinaryExpr -> . Expr OR Expr
    (87) ExprBinaryExpr -> . Expr CONCAT Expr
    (88) ExprBinaryExpr -> . Expr LESS Expr
    (89) ExprBinaryExpr -> . Expr LESSEQUAL Expr
    (90) ExprBinaryExpr -> . Expr GREATER Expr
    (91) ExprBinaryExpr -> . Expr GREATEREQUAL Expr
    (92) ExprBinaryExpr -> . Expr EQUAL Expr
    (93) ExprBinaryExpr -> . Expr NOTEQUAL Expr
    (94) UnaryExpr -> . UnaryMinus
    (95) UnaryExpr -> . NOT
    (97) Literal -> . INT
    (98) Literal -> . STRING
    (99) Literal -> . TRUE
    (100) Literal -> . FALSE
    (101) Literal -> . NULL
    (103) Number -> . CIENTIFIC
    (104) Number -> . HEXADEC
    (105) Number -> . NUMBER
    (106) Number -> . BINARY
    (107) Number -> . FLOAT
    (102) ParentExprParent -> . LEFTPARENT Expr RIGHTPARENT
    (96) UnaryMinus -> . SUBSTRACTION Expr

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for LEFTBRACE resolved as shift
  ! shift/reduce conflict for IDEN resolved as shift
  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for CIENTIFIC resolved as shift
  ! shift/reduce conflict for HEXADEC resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for BINARY resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LEFTPARENT resolved as shift
  ! shift/reduce conflict for SUBSTRACTION resolved as shift
    BREAK           shift and go to state 94
    CONTINUE        shift and go to state 95
    $end            reduce using rule 108 (empty -> .)
    RIGHTBRACE      reduce using rule 108 (empty -> .)
    SEMICOLON       reduce using rule 108 (empty -> .)
    RIGHTPARENT     reduce using rule 108 (empty -> .)
    COMMA           reduce using rule 108 (empty -> .)
    ELSE            reduce using rule 108 (empty -> .)
    RETURN          shift and go to state 58
    IF              shift and go to state 87
    WHILE           shift and go to state 60
    LEFTBRACE       shift and go to state 47
    IDEN            shift and go to state 57
    THIS            shift and go to state 90
    NEW             shift and go to state 64
    NOT             shift and go to state 96
    INT             shift and go to state 75
    STRING          shift and go to state 77
    TRUE            shift and go to state 69
    FALSE           shift and go to state 89
    NULL            shift and go to state 65
    CIENTIFIC       shift and go to state 70
    HEXADEC         shift and go to state 81
    NUMBER          shift and go to state 98
    BINARY          shift and go to state 78
    FLOAT           shift and go to state 91
    LEFTPARENT      shift and go to state 84
    SUBSTRACTION    shift and go to state 97

  ! LEFTBRACE       [ reduce using rule 108 (empty -> .) ]
  ! RETURN          [ reduce using rule 108 (empty -> .) ]
  ! IF              [ reduce using rule 108 (empty -> .) ]
  ! BREAK           [ reduce using rule 108 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 108 (empty -> .) ]
  ! IDEN            [ reduce using rule 108 (empty -> .) ]
  ! WHILE           [ reduce using rule 108 (empty -> .) ]
  ! THIS            [ reduce using rule 108 (empty -> .) ]
  ! NEW             [ reduce using rule 108 (empty -> .) ]
  ! INT             [ reduce using rule 108 (empty -> .) ]
  ! STRING          [ reduce using rule 108 (empty -> .) ]
  ! TRUE            [ reduce using rule 108 (empty -> .) ]
  ! FALSE           [ reduce using rule 108 (empty -> .) ]
  ! NULL            [ reduce using rule 108 (empty -> .) ]
  ! LEFTPARENT      [ reduce using rule 108 (empty -> .) ]
  ! NOT             [ reduce using rule 108 (empty -> .) ]
  ! CIENTIFIC       [ reduce using rule 108 (empty -> .) ]
  ! HEXADEC         [ reduce using rule 108 (empty -> .) ]
  ! NUMBER          [ reduce using rule 108 (empty -> .) ]
  ! BINARY          [ reduce using rule 108 (empty -> .) ]
  ! FLOAT           [ reduce using rule 108 (empty -> .) ]
  ! SUBSTRACTION    [ reduce using rule 108 (empty -> .) ]

    ParentExprParent               shift and go to state 59
    Literal                        shift and go to state 92
    Call                           shift and go to state 61
    Location                       shift and go to state 62
    StmtList                       shift and go to state 113
    Method                         shift and go to state 66
    Return                         shift and go to state 67
    ExprLength                     shift and go to state 68
    Stmt                           shift and go to state 71
    IfStmt                         shift and go to state 72
    NewId                          shift and go to state 73
    empty                          shift and go to state 76
    NewTypeExpr                    shift and go to state 79
    Expr                           shift and go to state 80
    UnaryExpr                      shift and go to state 82
    WhileStmt                      shift and go to state 83
    Assign                         shift and go to state 85
    Block                          shift and go to state 86
    ExprBinaryExpr                 shift and go to state 88
    Number                         shift and go to state 74
    UnaryMinus                     shift and go to state 93

state 72

    (43) Stmt -> IfStmt .

    RETURN          reduce using rule 43 (Stmt -> IfStmt .)
    IF              reduce using rule 43 (Stmt -> IfStmt .)
    BREAK           reduce using rule 43 (Stmt -> IfStmt .)
    CONTINUE        reduce using rule 43 (Stmt -> IfStmt .)
    IDEN            reduce using rule 43 (Stmt -> IfStmt .)
    WHILE           reduce using rule 43 (Stmt -> IfStmt .)
    LEFTBRACE       reduce using rule 43 (Stmt -> IfStmt .)
    THIS            reduce using rule 43 (Stmt -> IfStmt .)
    NEW             reduce using rule 43 (Stmt -> IfStmt .)
    INT             reduce using rule 43 (Stmt -> IfStmt .)
    STRING          reduce using rule 43 (Stmt -> IfStmt .)
    TRUE            reduce using rule 43 (Stmt -> IfStmt .)
    FALSE           reduce using rule 43 (Stmt -> IfStmt .)
    NULL            reduce using rule 43 (Stmt -> IfStmt .)
    LEFTPARENT      reduce using rule 43 (Stmt -> IfStmt .)
    NOT             reduce using rule 43 (Stmt -> IfStmt .)
    CIENTIFIC       reduce using rule 43 (Stmt -> IfStmt .)
    HEXADEC         reduce using rule 43 (Stmt -> IfStmt .)
    NUMBER          reduce using rule 43 (Stmt -> IfStmt .)
    BINARY          reduce using rule 43 (Stmt -> IfStmt .)
    FLOAT           reduce using rule 43 (Stmt -> IfStmt .)
    SUBSTRACTION    reduce using rule 43 (Stmt -> IfStmt .)
    RIGHTBRACE      reduce using rule 43 (Stmt -> IfStmt .)
    ELSE            reduce using rule 43 (Stmt -> IfStmt .)


state 73

    (69) Expr -> NewId .

    COMMA           reduce using rule 69 (Expr -> NewId .)
    SEMICOLON       reduce using rule 69 (Expr -> NewId .)
    DOT             reduce using rule 69 (Expr -> NewId .)
    LEFTSQRBRACKET  reduce using rule 69 (Expr -> NewId .)
    RIGHTSQRBRACKET reduce using rule 69 (Expr -> NewId .)
    RIGHTPARENT     reduce using rule 69 (Expr -> NewId .)
    ADDITION        reduce using rule 69 (Expr -> NewId .)
    SUBSTRACTION    reduce using rule 69 (Expr -> NewId .)
    MULTIPLICATION  reduce using rule 69 (Expr -> NewId .)
    DIVISION        reduce using rule 69 (Expr -> NewId .)
    MODULO          reduce using rule 69 (Expr -> NewId .)
    AND             reduce using rule 69 (Expr -> NewId .)
    OR              reduce using rule 69 (Expr -> NewId .)
    CONCAT          reduce using rule 69 (Expr -> NewId .)
    LESS            reduce using rule 69 (Expr -> NewId .)
    LESSEQUAL       reduce using rule 69 (Expr -> NewId .)
    GREATER         reduce using rule 69 (Expr -> NewId .)
    GREATEREQUAL    reduce using rule 69 (Expr -> NewId .)
    EQUAL           reduce using rule 69 (Expr -> NewId .)
    NOTEQUAL        reduce using rule 69 (Expr -> NewId .)


state 74

    (75) Expr -> Number .

    COMMA           reduce using rule 75 (Expr -> Number .)
    SEMICOLON       reduce using rule 75 (Expr -> Number .)
    DOT             reduce using rule 75 (Expr -> Number .)
    LEFTSQRBRACKET  reduce using rule 75 (Expr -> Number .)
    RIGHTSQRBRACKET reduce using rule 75 (Expr -> Number .)
    RIGHTPARENT     reduce using rule 75 (Expr -> Number .)
    ADDITION        reduce using rule 75 (Expr -> Number .)
    SUBSTRACTION    reduce using rule 75 (Expr -> Number .)
    MULTIPLICATION  reduce using rule 75 (Expr -> Number .)
    DIVISION        reduce using rule 75 (Expr -> Number .)
    MODULO          reduce using rule 75 (Expr -> Number .)
    AND             reduce using rule 75 (Expr -> Number .)
    OR              reduce using rule 75 (Expr -> Number .)
    CONCAT          reduce using rule 75 (Expr -> Number .)
    LESS            reduce using rule 75 (Expr -> Number .)
    LESSEQUAL       reduce using rule 75 (Expr -> Number .)
    GREATER         reduce using rule 75 (Expr -> Number .)
    GREATEREQUAL    reduce using rule 75 (Expr -> Number .)
    EQUAL           reduce using rule 75 (Expr -> Number .)
    NOTEQUAL        reduce using rule 75 (Expr -> Number .)


state 75

    (97) Literal -> INT .

    COMMA           reduce using rule 97 (Literal -> INT .)
    SEMICOLON       reduce using rule 97 (Literal -> INT .)
    DOT             reduce using rule 97 (Literal -> INT .)
    LEFTSQRBRACKET  reduce using rule 97 (Literal -> INT .)
    RIGHTSQRBRACKET reduce using rule 97 (Literal -> INT .)
    RIGHTPARENT     reduce using rule 97 (Literal -> INT .)
    ADDITION        reduce using rule 97 (Literal -> INT .)
    SUBSTRACTION    reduce using rule 97 (Literal -> INT .)
    MULTIPLICATION  reduce using rule 97 (Literal -> INT .)
    DIVISION        reduce using rule 97 (Literal -> INT .)
    MODULO          reduce using rule 97 (Literal -> INT .)
    AND             reduce using rule 97 (Literal -> INT .)
    OR              reduce using rule 97 (Literal -> INT .)
    CONCAT          reduce using rule 97 (Literal -> INT .)
    LESS            reduce using rule 97 (Literal -> INT .)
    LESSEQUAL       reduce using rule 97 (Literal -> INT .)
    GREATER         reduce using rule 97 (Literal -> INT .)
    GREATEREQUAL    reduce using rule 97 (Literal -> INT .)
    EQUAL           reduce using rule 97 (Literal -> INT .)
    NOTEQUAL        reduce using rule 97 (Literal -> INT .)


state 76

    (32) StmtList -> empty .

    RIGHTBRACE      reduce using rule 32 (StmtList -> empty .)


state 77

    (98) Literal -> STRING .

    COMMA           reduce using rule 98 (Literal -> STRING .)
    SEMICOLON       reduce using rule 98 (Literal -> STRING .)
    DOT             reduce using rule 98 (Literal -> STRING .)
    LEFTSQRBRACKET  reduce using rule 98 (Literal -> STRING .)
    RIGHTSQRBRACKET reduce using rule 98 (Literal -> STRING .)
    RIGHTPARENT     reduce using rule 98 (Literal -> STRING .)
    ADDITION        reduce using rule 98 (Literal -> STRING .)
    SUBSTRACTION    reduce using rule 98 (Literal -> STRING .)
    MULTIPLICATION  reduce using rule 98 (Literal -> STRING .)
    DIVISION        reduce using rule 98 (Literal -> STRING .)
    MODULO          reduce using rule 98 (Literal -> STRING .)
    AND             reduce using rule 98 (Literal -> STRING .)
    OR              reduce using rule 98 (Literal -> STRING .)
    CONCAT          reduce using rule 98 (Literal -> STRING .)
    LESS            reduce using rule 98 (Literal -> STRING .)
    LESSEQUAL       reduce using rule 98 (Literal -> STRING .)
    GREATER         reduce using rule 98 (Literal -> STRING .)
    GREATEREQUAL    reduce using rule 98 (Literal -> STRING .)
    EQUAL           reduce using rule 98 (Literal -> STRING .)
    NOTEQUAL        reduce using rule 98 (Literal -> STRING .)


state 78

    (106) Number -> BINARY .

    COMMA           reduce using rule 106 (Number -> BINARY .)
    SEMICOLON       reduce using rule 106 (Number -> BINARY .)
    DOT             reduce using rule 106 (Number -> BINARY .)
    LEFTSQRBRACKET  reduce using rule 106 (Number -> BINARY .)
    RIGHTSQRBRACKET reduce using rule 106 (Number -> BINARY .)
    RIGHTPARENT     reduce using rule 106 (Number -> BINARY .)
    ADDITION        reduce using rule 106 (Number -> BINARY .)
    SUBSTRACTION    reduce using rule 106 (Number -> BINARY .)
    MULTIPLICATION  reduce using rule 106 (Number -> BINARY .)
    DIVISION        reduce using rule 106 (Number -> BINARY .)
    MODULO          reduce using rule 106 (Number -> BINARY .)
    AND             reduce using rule 106 (Number -> BINARY .)
    OR              reduce using rule 106 (Number -> BINARY .)
    CONCAT          reduce using rule 106 (Number -> BINARY .)
    LESS            reduce using rule 106 (Number -> BINARY .)
    LESSEQUAL       reduce using rule 106 (Number -> BINARY .)
    GREATER         reduce using rule 106 (Number -> BINARY .)
    GREATEREQUAL    reduce using rule 106 (Number -> BINARY .)
    EQUAL           reduce using rule 106 (Number -> BINARY .)
    NOTEQUAL        reduce using rule 106 (Number -> BINARY .)


state 79

    (70) Expr -> NewTypeExpr .

    COMMA           reduce using rule 70 (Expr -> NewTypeExpr .)
    SEMICOLON       reduce using rule 70 (Expr -> NewTypeExpr .)
    DOT             reduce using rule 70 (Expr -> NewTypeExpr .)
    LEFTSQRBRACKET  reduce using rule 70 (Expr -> NewTypeExpr .)
    RIGHTSQRBRACKET reduce using rule 70 (Expr -> NewTypeExpr .)
    RIGHTPARENT     reduce using rule 70 (Expr -> NewTypeExpr .)
    ADDITION        reduce using rule 70 (Expr -> NewTypeExpr .)
    SUBSTRACTION    reduce using rule 70 (Expr -> NewTypeExpr .)
    MULTIPLICATION  reduce using rule 70 (Expr -> NewTypeExpr .)
    DIVISION        reduce using rule 70 (Expr -> NewTypeExpr .)
    MODULO          reduce using rule 70 (Expr -> NewTypeExpr .)
    AND             reduce using rule 70 (Expr -> NewTypeExpr .)
    OR              reduce using rule 70 (Expr -> NewTypeExpr .)
    CONCAT          reduce using rule 70 (Expr -> NewTypeExpr .)
    LESS            reduce using rule 70 (Expr -> NewTypeExpr .)
    LESSEQUAL       reduce using rule 70 (Expr -> NewTypeExpr .)
    GREATER         reduce using rule 70 (Expr -> NewTypeExpr .)
    GREATEREQUAL    reduce using rule 70 (Expr -> NewTypeExpr .)
    EQUAL           reduce using rule 70 (Expr -> NewTypeExpr .)
    NOTEQUAL        reduce using rule 70 (Expr -> NewTypeExpr .)


state 80

    (50) Location -> Expr . DOT IDEN
    (51) Location -> Expr . LEFTSQRBRACKET Expr RIGHTSQRBRACKET
    (54) Method -> Expr . DOT IDEN
    (79) ExprLength -> Expr . DOT LENGTH
    (80) ExprBinaryExpr -> Expr . ADDITION Expr
    (81) ExprBinaryExpr -> Expr . SUBSTRACTION Expr
    (82) ExprBinaryExpr -> Expr . MULTIPLICATION Expr
    (83) ExprBinaryExpr -> Expr . DIVISION Expr
    (84) ExprBinaryExpr -> Expr . MODULO Expr
    (85) ExprBinaryExpr -> Expr . AND Expr
    (86) ExprBinaryExpr -> Expr . OR Expr
    (87) ExprBinaryExpr -> Expr . CONCAT Expr
    (88) ExprBinaryExpr -> Expr . LESS Expr
    (89) ExprBinaryExpr -> Expr . LESSEQUAL Expr
    (90) ExprBinaryExpr -> Expr . GREATER Expr
    (91) ExprBinaryExpr -> Expr . GREATEREQUAL Expr
    (92) ExprBinaryExpr -> Expr . EQUAL Expr
    (93) ExprBinaryExpr -> Expr . NOTEQUAL Expr

    DOT             shift and go to state 129
    LEFTSQRBRACKET  shift and go to state 121
    ADDITION        shift and go to state 119
    SUBSTRACTION    shift and go to state 127
    MULTIPLICATION  shift and go to state 126
    DIVISION        shift and go to state 115
    MODULO          shift and go to state 116
    AND             shift and go to state 114
    OR              shift and go to state 128
    CONCAT          shift and go to state 124
    LESS            shift and go to state 118
    LESSEQUAL       shift and go to state 122
    GREATER         shift and go to state 117
    GREATEREQUAL    shift and go to state 120
    EQUAL           shift and go to state 125
    NOTEQUAL        shift and go to state 123


state 81

    (104) Number -> HEXADEC .

    COMMA           reduce using rule 104 (Number -> HEXADEC .)
    SEMICOLON       reduce using rule 104 (Number -> HEXADEC .)
    DOT             reduce using rule 104 (Number -> HEXADEC .)
    LEFTSQRBRACKET  reduce using rule 104 (Number -> HEXADEC .)
    RIGHTSQRBRACKET reduce using rule 104 (Number -> HEXADEC .)
    RIGHTPARENT     reduce using rule 104 (Number -> HEXADEC .)
    ADDITION        reduce using rule 104 (Number -> HEXADEC .)
    SUBSTRACTION    reduce using rule 104 (Number -> HEXADEC .)
    MULTIPLICATION  reduce using rule 104 (Number -> HEXADEC .)
    DIVISION        reduce using rule 104 (Number -> HEXADEC .)
    MODULO          reduce using rule 104 (Number -> HEXADEC .)
    AND             reduce using rule 104 (Number -> HEXADEC .)
    OR              reduce using rule 104 (Number -> HEXADEC .)
    CONCAT          reduce using rule 104 (Number -> HEXADEC .)
    LESS            reduce using rule 104 (Number -> HEXADEC .)
    LESSEQUAL       reduce using rule 104 (Number -> HEXADEC .)
    GREATER         reduce using rule 104 (Number -> HEXADEC .)
    GREATEREQUAL    reduce using rule 104 (Number -> HEXADEC .)
    EQUAL           reduce using rule 104 (Number -> HEXADEC .)
    NOTEQUAL        reduce using rule 104 (Number -> HEXADEC .)


state 82

    (73) Expr -> UnaryExpr .

    COMMA           reduce using rule 73 (Expr -> UnaryExpr .)
    SEMICOLON       reduce using rule 73 (Expr -> UnaryExpr .)
    DOT             reduce using rule 73 (Expr -> UnaryExpr .)
    LEFTSQRBRACKET  reduce using rule 73 (Expr -> UnaryExpr .)
    RIGHTSQRBRACKET reduce using rule 73 (Expr -> UnaryExpr .)
    RIGHTPARENT     reduce using rule 73 (Expr -> UnaryExpr .)
    ADDITION        reduce using rule 73 (Expr -> UnaryExpr .)
    SUBSTRACTION    reduce using rule 73 (Expr -> UnaryExpr .)
    MULTIPLICATION  reduce using rule 73 (Expr -> UnaryExpr .)
    DIVISION        reduce using rule 73 (Expr -> UnaryExpr .)
    MODULO          reduce using rule 73 (Expr -> UnaryExpr .)
    AND             reduce using rule 73 (Expr -> UnaryExpr .)
    OR              reduce using rule 73 (Expr -> UnaryExpr .)
    CONCAT          reduce using rule 73 (Expr -> UnaryExpr .)
    LESS            reduce using rule 73 (Expr -> UnaryExpr .)
    LESSEQUAL       reduce using rule 73 (Expr -> UnaryExpr .)
    GREATER         reduce using rule 73 (Expr -> UnaryExpr .)
    GREATEREQUAL    reduce using rule 73 (Expr -> UnaryExpr .)
    EQUAL           reduce using rule 73 (Expr -> UnaryExpr .)
    NOTEQUAL        reduce using rule 73 (Expr -> UnaryExpr .)


state 83

    (44) Stmt -> WhileStmt .

    RETURN          reduce using rule 44 (Stmt -> WhileStmt .)
    IF              reduce using rule 44 (Stmt -> WhileStmt .)
    BREAK           reduce using rule 44 (Stmt -> WhileStmt .)
    CONTINUE        reduce using rule 44 (Stmt -> WhileStmt .)
    IDEN            reduce using rule 44 (Stmt -> WhileStmt .)
    WHILE           reduce using rule 44 (Stmt -> WhileStmt .)
    LEFTBRACE       reduce using rule 44 (Stmt -> WhileStmt .)
    THIS            reduce using rule 44 (Stmt -> WhileStmt .)
    NEW             reduce using rule 44 (Stmt -> WhileStmt .)
    INT             reduce using rule 44 (Stmt -> WhileStmt .)
    STRING          reduce using rule 44 (Stmt -> WhileStmt .)
    TRUE            reduce using rule 44 (Stmt -> WhileStmt .)
    FALSE           reduce using rule 44 (Stmt -> WhileStmt .)
    NULL            reduce using rule 44 (Stmt -> WhileStmt .)
    LEFTPARENT      reduce using rule 44 (Stmt -> WhileStmt .)
    NOT             reduce using rule 44 (Stmt -> WhileStmt .)
    CIENTIFIC       reduce using rule 44 (Stmt -> WhileStmt .)
    HEXADEC         reduce using rule 44 (Stmt -> WhileStmt .)
    NUMBER          reduce using rule 44 (Stmt -> WhileStmt .)
    BINARY          reduce using rule 44 (Stmt -> WhileStmt .)
    FLOAT           reduce using rule 44 (Stmt -> WhileStmt .)
    SUBSTRACTION    reduce using rule 44 (Stmt -> WhileStmt .)
    RIGHTBRACE      reduce using rule 44 (Stmt -> WhileStmt .)
    ELSE            reduce using rule 44 (Stmt -> WhileStmt .)


state 84

    (102) ParentExprParent -> LEFTPARENT . Expr RIGHTPARENT
    (66) Expr -> . Location
    (67) Expr -> . Call
    (68) Expr -> . THIS
    (69) Expr -> . NewId
    (70) Expr -> . NewTypeExpr
    (71) Expr -> . ExprLength
    (72) Expr -> . ExprBinaryExpr
    (73) Expr -> . UnaryExpr
    (74) Expr -> . Literal
    (75) Expr -> . Number
    (76) Expr -> . ParentExprParent
    (49) Location -> . IDEN
    (50) Location -> . Expr DOT IDEN
    (51) Location -> . Expr LEFTSQRBRACKET Expr RIGHTSQRBRACKET
    (52) Call -> . Method LEFTPARENT Actuals RIGHTPARENT
    (77) NewId -> . NEW IDEN LEFTPARENT RIGHTPARENT
    (78) NewTypeExpr -> . NEW Type LEFTSQRBRACKET Expr LEFTSQRBRACKET
    (79) ExprLength -> . Expr DOT LENGTH
    (80) ExprBinaryExpr -> . Expr ADDITION Expr
    (81) ExprBinaryExpr -> . Expr SUBSTRACTION Expr
    (82) ExprBinaryExpr -> . Expr MULTIPLICATION Expr
    (83) ExprBinaryExpr -> . Expr DIVISION Expr
    (84) ExprBinaryExpr -> . Expr MODULO Expr
    (85) ExprBinaryExpr -> . Expr AND Expr
    (86) ExprBinaryExpr -> . Expr OR Expr
    (87) ExprBinaryExpr -> . Expr CONCAT Expr
    (88) ExprBinaryExpr -> . Expr LESS Expr
    (89) ExprBinaryExpr -> . Expr LESSEQUAL Expr
    (90) ExprBinaryExpr -> . Expr GREATER Expr
    (91) ExprBinaryExpr -> . Expr GREATEREQUAL Expr
    (92) ExprBinaryExpr -> . Expr EQUAL Expr
    (93) ExprBinaryExpr -> . Expr NOTEQUAL Expr
    (94) UnaryExpr -> . UnaryMinus
    (95) UnaryExpr -> . NOT
    (97) Literal -> . INT
    (98) Literal -> . STRING
    (99) Literal -> . TRUE
    (100) Literal -> . FALSE
    (101) Literal -> . NULL
    (103) Number -> . CIENTIFIC
    (104) Number -> . HEXADEC
    (105) Number -> . NUMBER
    (106) Number -> . BINARY
    (107) Number -> . FLOAT
    (102) ParentExprParent -> . LEFTPARENT Expr RIGHTPARENT
    (53) Method -> . IDEN
    (54) Method -> . Expr DOT IDEN
    (96) UnaryMinus -> . SUBSTRACTION Expr

    THIS            shift and go to state 90
    IDEN            shift and go to state 57
    NEW             shift and go to state 64
    NOT             shift and go to state 96
    INT             shift and go to state 75
    STRING          shift and go to state 77
    TRUE            shift and go to state 69
    FALSE           shift and go to state 89
    NULL            shift and go to state 65
    CIENTIFIC       shift and go to state 70
    HEXADEC         shift and go to state 81
    NUMBER          shift and go to state 98
    BINARY          shift and go to state 78
    FLOAT           shift and go to state 91
    LEFTPARENT      shift and go to state 84
    SUBSTRACTION    shift and go to state 97

    ExprBinaryExpr                 shift and go to state 88
    Method                         shift and go to state 66
    ExprLength                     shift and go to state 68
    NewTypeExpr                    shift and go to state 79
    Expr                           shift and go to state 130
    UnaryExpr                      shift and go to state 82
    Number                         shift and go to state 74
    Literal                        shift and go to state 92
    NewId                          shift and go to state 73
    Location                       shift and go to state 102
    Call                           shift and go to state 101
    ParentExprParent               shift and go to state 59
    UnaryMinus                     shift and go to state 93

state 85

    (40) Stmt -> Assign . SEMICOLON

    SEMICOLON       shift and go to state 131


state 86

    (47) Stmt -> Block .

    RETURN          reduce using rule 47 (Stmt -> Block .)
    IF              reduce using rule 47 (Stmt -> Block .)
    BREAK           reduce using rule 47 (Stmt -> Block .)
    CONTINUE        reduce using rule 47 (Stmt -> Block .)
    IDEN            reduce using rule 47 (Stmt -> Block .)
    WHILE           reduce using rule 47 (Stmt -> Block .)
    LEFTBRACE       reduce using rule 47 (Stmt -> Block .)
    THIS            reduce using rule 47 (Stmt -> Block .)
    NEW             reduce using rule 47 (Stmt -> Block .)
    INT             reduce using rule 47 (Stmt -> Block .)
    STRING          reduce using rule 47 (Stmt -> Block .)
    TRUE            reduce using rule 47 (Stmt -> Block .)
    FALSE           reduce using rule 47 (Stmt -> Block .)
    NULL            reduce using rule 47 (Stmt -> Block .)
    LEFTPARENT      reduce using rule 47 (Stmt -> Block .)
    NOT             reduce using rule 47 (Stmt -> Block .)
    CIENTIFIC       reduce using rule 47 (Stmt -> Block .)
    HEXADEC         reduce using rule 47 (Stmt -> Block .)
    NUMBER          reduce using rule 47 (Stmt -> Block .)
    BINARY          reduce using rule 47 (Stmt -> Block .)
    FLOAT           reduce using rule 47 (Stmt -> Block .)
    SUBSTRACTION    reduce using rule 47 (Stmt -> Block .)
    RIGHTBRACE      reduce using rule 47 (Stmt -> Block .)
    ELSE            reduce using rule 47 (Stmt -> Block .)


state 87

    (62) IfStmt -> IF . LEFTPARENT Expr RIGHTPARENT Stmt ElseStmt

    LEFTPARENT      shift and go to state 132


state 88

    (72) Expr -> ExprBinaryExpr .

    COMMA           reduce using rule 72 (Expr -> ExprBinaryExpr .)
    SEMICOLON       reduce using rule 72 (Expr -> ExprBinaryExpr .)
    DOT             reduce using rule 72 (Expr -> ExprBinaryExpr .)
    LEFTSQRBRACKET  reduce using rule 72 (Expr -> ExprBinaryExpr .)
    RIGHTSQRBRACKET reduce using rule 72 (Expr -> ExprBinaryExpr .)
    RIGHTPARENT     reduce using rule 72 (Expr -> ExprBinaryExpr .)
    ADDITION        reduce using rule 72 (Expr -> ExprBinaryExpr .)
    SUBSTRACTION    reduce using rule 72 (Expr -> ExprBinaryExpr .)
    MULTIPLICATION  reduce using rule 72 (Expr -> ExprBinaryExpr .)
    DIVISION        reduce using rule 72 (Expr -> ExprBinaryExpr .)
    MODULO          reduce using rule 72 (Expr -> ExprBinaryExpr .)
    AND             reduce using rule 72 (Expr -> ExprBinaryExpr .)
    OR              reduce using rule 72 (Expr -> ExprBinaryExpr .)
    CONCAT          reduce using rule 72 (Expr -> ExprBinaryExpr .)
    LESS            reduce using rule 72 (Expr -> ExprBinaryExpr .)
    LESSEQUAL       reduce using rule 72 (Expr -> ExprBinaryExpr .)
    GREATER         reduce using rule 72 (Expr -> ExprBinaryExpr .)
    GREATEREQUAL    reduce using rule 72 (Expr -> ExprBinaryExpr .)
    EQUAL           reduce using rule 72 (Expr -> ExprBinaryExpr .)
    NOTEQUAL        reduce using rule 72 (Expr -> ExprBinaryExpr .)


state 89

    (100) Literal -> FALSE .

    COMMA           reduce using rule 100 (Literal -> FALSE .)
    SEMICOLON       reduce using rule 100 (Literal -> FALSE .)
    DOT             reduce using rule 100 (Literal -> FALSE .)
    LEFTSQRBRACKET  reduce using rule 100 (Literal -> FALSE .)
    RIGHTSQRBRACKET reduce using rule 100 (Literal -> FALSE .)
    RIGHTPARENT     reduce using rule 100 (Literal -> FALSE .)
    ADDITION        reduce using rule 100 (Literal -> FALSE .)
    SUBSTRACTION    reduce using rule 100 (Literal -> FALSE .)
    MULTIPLICATION  reduce using rule 100 (Literal -> FALSE .)
    DIVISION        reduce using rule 100 (Literal -> FALSE .)
    MODULO          reduce using rule 100 (Literal -> FALSE .)
    AND             reduce using rule 100 (Literal -> FALSE .)
    OR              reduce using rule 100 (Literal -> FALSE .)
    CONCAT          reduce using rule 100 (Literal -> FALSE .)
    LESS            reduce using rule 100 (Literal -> FALSE .)
    LESSEQUAL       reduce using rule 100 (Literal -> FALSE .)
    GREATER         reduce using rule 100 (Literal -> FALSE .)
    GREATEREQUAL    reduce using rule 100 (Literal -> FALSE .)
    EQUAL           reduce using rule 100 (Literal -> FALSE .)
    NOTEQUAL        reduce using rule 100 (Literal -> FALSE .)


state 90

    (68) Expr -> THIS .

    COMMA           reduce using rule 68 (Expr -> THIS .)
    SEMICOLON       reduce using rule 68 (Expr -> THIS .)
    DOT             reduce using rule 68 (Expr -> THIS .)
    LEFTSQRBRACKET  reduce using rule 68 (Expr -> THIS .)
    RIGHTSQRBRACKET reduce using rule 68 (Expr -> THIS .)
    RIGHTPARENT     reduce using rule 68 (Expr -> THIS .)
    ADDITION        reduce using rule 68 (Expr -> THIS .)
    SUBSTRACTION    reduce using rule 68 (Expr -> THIS .)
    MULTIPLICATION  reduce using rule 68 (Expr -> THIS .)
    DIVISION        reduce using rule 68 (Expr -> THIS .)
    MODULO          reduce using rule 68 (Expr -> THIS .)
    AND             reduce using rule 68 (Expr -> THIS .)
    OR              reduce using rule 68 (Expr -> THIS .)
    CONCAT          reduce using rule 68 (Expr -> THIS .)
    LESS            reduce using rule 68 (Expr -> THIS .)
    LESSEQUAL       reduce using rule 68 (Expr -> THIS .)
    GREATER         reduce using rule 68 (Expr -> THIS .)
    GREATEREQUAL    reduce using rule 68 (Expr -> THIS .)
    EQUAL           reduce using rule 68 (Expr -> THIS .)
    NOTEQUAL        reduce using rule 68 (Expr -> THIS .)


state 91

    (107) Number -> FLOAT .

    COMMA           reduce using rule 107 (Number -> FLOAT .)
    SEMICOLON       reduce using rule 107 (Number -> FLOAT .)
    DOT             reduce using rule 107 (Number -> FLOAT .)
    LEFTSQRBRACKET  reduce using rule 107 (Number -> FLOAT .)
    RIGHTSQRBRACKET reduce using rule 107 (Number -> FLOAT .)
    RIGHTPARENT     reduce using rule 107 (Number -> FLOAT .)
    ADDITION        reduce using rule 107 (Number -> FLOAT .)
    SUBSTRACTION    reduce using rule 107 (Number -> FLOAT .)
    MULTIPLICATION  reduce using rule 107 (Number -> FLOAT .)
    DIVISION        reduce using rule 107 (Number -> FLOAT .)
    MODULO          reduce using rule 107 (Number -> FLOAT .)
    AND             reduce using rule 107 (Number -> FLOAT .)
    OR              reduce using rule 107 (Number -> FLOAT .)
    CONCAT          reduce using rule 107 (Number -> FLOAT .)
    LESS            reduce using rule 107 (Number -> FLOAT .)
    LESSEQUAL       reduce using rule 107 (Number -> FLOAT .)
    GREATER         reduce using rule 107 (Number -> FLOAT .)
    GREATEREQUAL    reduce using rule 107 (Number -> FLOAT .)
    EQUAL           reduce using rule 107 (Number -> FLOAT .)
    NOTEQUAL        reduce using rule 107 (Number -> FLOAT .)


state 92

    (74) Expr -> Literal .

    COMMA           reduce using rule 74 (Expr -> Literal .)
    SEMICOLON       reduce using rule 74 (Expr -> Literal .)
    DOT             reduce using rule 74 (Expr -> Literal .)
    LEFTSQRBRACKET  reduce using rule 74 (Expr -> Literal .)
    RIGHTSQRBRACKET reduce using rule 74 (Expr -> Literal .)
    RIGHTPARENT     reduce using rule 74 (Expr -> Literal .)
    ADDITION        reduce using rule 74 (Expr -> Literal .)
    SUBSTRACTION    reduce using rule 74 (Expr -> Literal .)
    MULTIPLICATION  reduce using rule 74 (Expr -> Literal .)
    DIVISION        reduce using rule 74 (Expr -> Literal .)
    MODULO          reduce using rule 74 (Expr -> Literal .)
    AND             reduce using rule 74 (Expr -> Literal .)
    OR              reduce using rule 74 (Expr -> Literal .)
    CONCAT          reduce using rule 74 (Expr -> Literal .)
    LESS            reduce using rule 74 (Expr -> Literal .)
    LESSEQUAL       reduce using rule 74 (Expr -> Literal .)
    GREATER         reduce using rule 74 (Expr -> Literal .)
    GREATEREQUAL    reduce using rule 74 (Expr -> Literal .)
    EQUAL           reduce using rule 74 (Expr -> Literal .)
    NOTEQUAL        reduce using rule 74 (Expr -> Literal .)


state 93

    (94) UnaryExpr -> UnaryMinus .

    COMMA           reduce using rule 94 (UnaryExpr -> UnaryMinus .)
    SEMICOLON       reduce using rule 94 (UnaryExpr -> UnaryMinus .)
    DOT             reduce using rule 94 (UnaryExpr -> UnaryMinus .)
    LEFTSQRBRACKET  reduce using rule 94 (UnaryExpr -> UnaryMinus .)
    RIGHTSQRBRACKET reduce using rule 94 (UnaryExpr -> UnaryMinus .)
    RIGHTPARENT     reduce using rule 94 (UnaryExpr -> UnaryMinus .)
    ADDITION        reduce using rule 94 (UnaryExpr -> UnaryMinus .)
    SUBSTRACTION    reduce using rule 94 (UnaryExpr -> UnaryMinus .)
    MULTIPLICATION  reduce using rule 94 (UnaryExpr -> UnaryMinus .)
    DIVISION        reduce using rule 94 (UnaryExpr -> UnaryMinus .)
    MODULO          reduce using rule 94 (UnaryExpr -> UnaryMinus .)
    AND             reduce using rule 94 (UnaryExpr -> UnaryMinus .)
    OR              reduce using rule 94 (UnaryExpr -> UnaryMinus .)
    CONCAT          reduce using rule 94 (UnaryExpr -> UnaryMinus .)
    LESS            reduce using rule 94 (UnaryExpr -> UnaryMinus .)
    LESSEQUAL       reduce using rule 94 (UnaryExpr -> UnaryMinus .)
    GREATER         reduce using rule 94 (UnaryExpr -> UnaryMinus .)
    GREATEREQUAL    reduce using rule 94 (UnaryExpr -> UnaryMinus .)
    EQUAL           reduce using rule 94 (UnaryExpr -> UnaryMinus .)
    NOTEQUAL        reduce using rule 94 (UnaryExpr -> UnaryMinus .)


state 94

    (45) Stmt -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 133


state 95

    (46) Stmt -> CONTINUE . SEMICOLON

    SEMICOLON       shift and go to state 134


state 96

    (95) UnaryExpr -> NOT .

    COMMA           reduce using rule 95 (UnaryExpr -> NOT .)
    SEMICOLON       reduce using rule 95 (UnaryExpr -> NOT .)
    DOT             reduce using rule 95 (UnaryExpr -> NOT .)
    LEFTSQRBRACKET  reduce using rule 95 (UnaryExpr -> NOT .)
    RIGHTSQRBRACKET reduce using rule 95 (UnaryExpr -> NOT .)
    RIGHTPARENT     reduce using rule 95 (UnaryExpr -> NOT .)
    ADDITION        reduce using rule 95 (UnaryExpr -> NOT .)
    SUBSTRACTION    reduce using rule 95 (UnaryExpr -> NOT .)
    MULTIPLICATION  reduce using rule 95 (UnaryExpr -> NOT .)
    DIVISION        reduce using rule 95 (UnaryExpr -> NOT .)
    MODULO          reduce using rule 95 (UnaryExpr -> NOT .)
    AND             reduce using rule 95 (UnaryExpr -> NOT .)
    OR              reduce using rule 95 (UnaryExpr -> NOT .)
    CONCAT          reduce using rule 95 (UnaryExpr -> NOT .)
    LESS            reduce using rule 95 (UnaryExpr -> NOT .)
    LESSEQUAL       reduce using rule 95 (UnaryExpr -> NOT .)
    GREATER         reduce using rule 95 (UnaryExpr -> NOT .)
    GREATEREQUAL    reduce using rule 95 (UnaryExpr -> NOT .)
    EQUAL           reduce using rule 95 (UnaryExpr -> NOT .)
    NOTEQUAL        reduce using rule 95 (UnaryExpr -> NOT .)


state 97

    (96) UnaryMinus -> SUBSTRACTION . Expr
    (66) Expr -> . Location
    (67) Expr -> . Call
    (68) Expr -> . THIS
    (69) Expr -> . NewId
    (70) Expr -> . NewTypeExpr
    (71) Expr -> . ExprLength
    (72) Expr -> . ExprBinaryExpr
    (73) Expr -> . UnaryExpr
    (74) Expr -> . Literal
    (75) Expr -> . Number
    (76) Expr -> . ParentExprParent
    (49) Location -> . IDEN
    (50) Location -> . Expr DOT IDEN
    (51) Location -> . Expr LEFTSQRBRACKET Expr RIGHTSQRBRACKET
    (52) Call -> . Method LEFTPARENT Actuals RIGHTPARENT
    (77) NewId -> . NEW IDEN LEFTPARENT RIGHTPARENT
    (78) NewTypeExpr -> . NEW Type LEFTSQRBRACKET Expr LEFTSQRBRACKET
    (79) ExprLength -> . Expr DOT LENGTH
    (80) ExprBinaryExpr -> . Expr ADDITION Expr
    (81) ExprBinaryExpr -> . Expr SUBSTRACTION Expr
    (82) ExprBinaryExpr -> . Expr MULTIPLICATION Expr
    (83) ExprBinaryExpr -> . Expr DIVISION Expr
    (84) ExprBinaryExpr -> . Expr MODULO Expr
    (85) ExprBinaryExpr -> . Expr AND Expr
    (86) ExprBinaryExpr -> . Expr OR Expr
    (87) ExprBinaryExpr -> . Expr CONCAT Expr
    (88) ExprBinaryExpr -> . Expr LESS Expr
    (89) ExprBinaryExpr -> . Expr LESSEQUAL Expr
    (90) ExprBinaryExpr -> . Expr GREATER Expr
    (91) ExprBinaryExpr -> . Expr GREATEREQUAL Expr
    (92) ExprBinaryExpr -> . Expr EQUAL Expr
    (93) ExprBinaryExpr -> . Expr NOTEQUAL Expr
    (94) UnaryExpr -> . UnaryMinus
    (95) UnaryExpr -> . NOT
    (97) Literal -> . INT
    (98) Literal -> . STRING
    (99) Literal -> . TRUE
    (100) Literal -> . FALSE
    (101) Literal -> . NULL
    (103) Number -> . CIENTIFIC
    (104) Number -> . HEXADEC
    (105) Number -> . NUMBER
    (106) Number -> . BINARY
    (107) Number -> . FLOAT
    (102) ParentExprParent -> . LEFTPARENT Expr RIGHTPARENT
    (53) Method -> . IDEN
    (54) Method -> . Expr DOT IDEN
    (96) UnaryMinus -> . SUBSTRACTION Expr

    THIS            shift and go to state 90
    IDEN            shift and go to state 57
    NEW             shift and go to state 64
    NOT             shift and go to state 96
    INT             shift and go to state 75
    STRING          shift and go to state 77
    TRUE            shift and go to state 69
    FALSE           shift and go to state 89
    NULL            shift and go to state 65
    CIENTIFIC       shift and go to state 70
    HEXADEC         shift and go to state 81
    NUMBER          shift and go to state 98
    BINARY          shift and go to state 78
    FLOAT           shift and go to state 91
    LEFTPARENT      shift and go to state 84
    SUBSTRACTION    shift and go to state 97

    ExprBinaryExpr                 shift and go to state 88
    Method                         shift and go to state 66
    ExprLength                     shift and go to state 68
    NewTypeExpr                    shift and go to state 79
    Expr                           shift and go to state 135
    UnaryExpr                      shift and go to state 82
    Number                         shift and go to state 74
    Literal                        shift and go to state 92
    NewId                          shift and go to state 73
    Location                       shift and go to state 102
    Call                           shift and go to state 101
    ParentExprParent               shift and go to state 59
    UnaryMinus                     shift and go to state 93

state 98

    (105) Number -> NUMBER .

    COMMA           reduce using rule 105 (Number -> NUMBER .)
    SEMICOLON       reduce using rule 105 (Number -> NUMBER .)
    DOT             reduce using rule 105 (Number -> NUMBER .)
    LEFTSQRBRACKET  reduce using rule 105 (Number -> NUMBER .)
    RIGHTSQRBRACKET reduce using rule 105 (Number -> NUMBER .)
    RIGHTPARENT     reduce using rule 105 (Number -> NUMBER .)
    ADDITION        reduce using rule 105 (Number -> NUMBER .)
    SUBSTRACTION    reduce using rule 105 (Number -> NUMBER .)
    MULTIPLICATION  reduce using rule 105 (Number -> NUMBER .)
    DIVISION        reduce using rule 105 (Number -> NUMBER .)
    MODULO          reduce using rule 105 (Number -> NUMBER .)
    AND             reduce using rule 105 (Number -> NUMBER .)
    OR              reduce using rule 105 (Number -> NUMBER .)
    CONCAT          reduce using rule 105 (Number -> NUMBER .)
    LESS            reduce using rule 105 (Number -> NUMBER .)
    LESSEQUAL       reduce using rule 105 (Number -> NUMBER .)
    GREATER         reduce using rule 105 (Number -> NUMBER .)
    GREATEREQUAL    reduce using rule 105 (Number -> NUMBER .)
    EQUAL           reduce using rule 105 (Number -> NUMBER .)
    NOTEQUAL        reduce using rule 105 (Number -> NUMBER .)


state 99

    (33) VarDeclList -> Type IDEN . ExpDecl ExpDeclList SEMICOLON VarDeclList
    (38) ExpDecl -> . ASSIGNMENT Expr
    (39) ExpDecl -> . empty
    (108) empty -> .

    ASSIGNMENT      shift and go to state 136
    $end            reduce using rule 108 (empty -> .)
    LEFTBRACE       reduce using rule 108 (empty -> .)
    RIGHTBRACE      reduce using rule 108 (empty -> .)
    SEMICOLON       reduce using rule 108 (empty -> .)
    RIGHTPARENT     reduce using rule 108 (empty -> .)
    RETURN          reduce using rule 108 (empty -> .)
    IF              reduce using rule 108 (empty -> .)
    BREAK           reduce using rule 108 (empty -> .)
    CONTINUE        reduce using rule 108 (empty -> .)
    IDEN            reduce using rule 108 (empty -> .)
    WHILE           reduce using rule 108 (empty -> .)
    THIS            reduce using rule 108 (empty -> .)
    NEW             reduce using rule 108 (empty -> .)
    INT             reduce using rule 108 (empty -> .)
    STRING          reduce using rule 108 (empty -> .)
    TRUE            reduce using rule 108 (empty -> .)
    FALSE           reduce using rule 108 (empty -> .)
    NULL            reduce using rule 108 (empty -> .)
    LEFTPARENT      reduce using rule 108 (empty -> .)
    NOT             reduce using rule 108 (empty -> .)
    CIENTIFIC       reduce using rule 108 (empty -> .)
    HEXADEC         reduce using rule 108 (empty -> .)
    NUMBER          reduce using rule 108 (empty -> .)
    BINARY          reduce using rule 108 (empty -> .)
    FLOAT           reduce using rule 108 (empty -> .)
    SUBSTRACTION    reduce using rule 108 (empty -> .)
    COMMA           reduce using rule 108 (empty -> .)
    ELSE            reduce using rule 108 (empty -> .)

    ExpDecl                        shift and go to state 137
    empty                          shift and go to state 138

state 100

    (23) CommaTypeId -> COMMA Type IDEN .

    COMMA           reduce using rule 23 (CommaTypeId -> COMMA Type IDEN .)
    RIGHTPARENT     reduce using rule 23 (CommaTypeId -> COMMA Type IDEN .)


state 101

    (67) Expr -> Call .

    COMMA           reduce using rule 67 (Expr -> Call .)
    SEMICOLON       reduce using rule 67 (Expr -> Call .)
    DOT             reduce using rule 67 (Expr -> Call .)
    LEFTSQRBRACKET  reduce using rule 67 (Expr -> Call .)
    RIGHTSQRBRACKET reduce using rule 67 (Expr -> Call .)
    RIGHTPARENT     reduce using rule 67 (Expr -> Call .)
    ADDITION        reduce using rule 67 (Expr -> Call .)
    SUBSTRACTION    reduce using rule 67 (Expr -> Call .)
    MULTIPLICATION  reduce using rule 67 (Expr -> Call .)
    DIVISION        reduce using rule 67 (Expr -> Call .)
    MODULO          reduce using rule 67 (Expr -> Call .)
    AND             reduce using rule 67 (Expr -> Call .)
    OR              reduce using rule 67 (Expr -> Call .)
    CONCAT          reduce using rule 67 (Expr -> Call .)
    LESS            reduce using rule 67 (Expr -> Call .)
    LESSEQUAL       reduce using rule 67 (Expr -> Call .)
    GREATER         reduce using rule 67 (Expr -> Call .)
    GREATEREQUAL    reduce using rule 67 (Expr -> Call .)
    EQUAL           reduce using rule 67 (Expr -> Call .)
    NOTEQUAL        reduce using rule 67 (Expr -> Call .)


state 102

    (66) Expr -> Location .

    COMMA           reduce using rule 66 (Expr -> Location .)
    SEMICOLON       reduce using rule 66 (Expr -> Location .)
    DOT             reduce using rule 66 (Expr -> Location .)
    LEFTSQRBRACKET  reduce using rule 66 (Expr -> Location .)
    RIGHTSQRBRACKET reduce using rule 66 (Expr -> Location .)
    RIGHTPARENT     reduce using rule 66 (Expr -> Location .)
    ADDITION        reduce using rule 66 (Expr -> Location .)
    SUBSTRACTION    reduce using rule 66 (Expr -> Location .)
    MULTIPLICATION  reduce using rule 66 (Expr -> Location .)
    DIVISION        reduce using rule 66 (Expr -> Location .)
    MODULO          reduce using rule 66 (Expr -> Location .)
    AND             reduce using rule 66 (Expr -> Location .)
    OR              reduce using rule 66 (Expr -> Location .)
    CONCAT          reduce using rule 66 (Expr -> Location .)
    LESS            reduce using rule 66 (Expr -> Location .)
    LESSEQUAL       reduce using rule 66 (Expr -> Location .)
    GREATER         reduce using rule 66 (Expr -> Location .)
    GREATEREQUAL    reduce using rule 66 (Expr -> Location .)
    EQUAL           reduce using rule 66 (Expr -> Location .)
    NOTEQUAL        reduce using rule 66 (Expr -> Location .)


state 103

    (61) ReturnExpr -> empty .

    SEMICOLON       reduce using rule 61 (ReturnExpr -> empty .)


state 104

    (60) ReturnExpr -> Expr .
    (50) Location -> Expr . DOT IDEN
    (51) Location -> Expr . LEFTSQRBRACKET Expr RIGHTSQRBRACKET
    (79) ExprLength -> Expr . DOT LENGTH
    (80) ExprBinaryExpr -> Expr . ADDITION Expr
    (81) ExprBinaryExpr -> Expr . SUBSTRACTION Expr
    (82) ExprBinaryExpr -> Expr . MULTIPLICATION Expr
    (83) ExprBinaryExpr -> Expr . DIVISION Expr
    (84) ExprBinaryExpr -> Expr . MODULO Expr
    (85) ExprBinaryExpr -> Expr . AND Expr
    (86) ExprBinaryExpr -> Expr . OR Expr
    (87) ExprBinaryExpr -> Expr . CONCAT Expr
    (88) ExprBinaryExpr -> Expr . LESS Expr
    (89) ExprBinaryExpr -> Expr . LESSEQUAL Expr
    (90) ExprBinaryExpr -> Expr . GREATER Expr
    (91) ExprBinaryExpr -> Expr . GREATEREQUAL Expr
    (92) ExprBinaryExpr -> Expr . EQUAL Expr
    (93) ExprBinaryExpr -> Expr . NOTEQUAL Expr
    (54) Method -> Expr . DOT IDEN

    SEMICOLON       reduce using rule 60 (ReturnExpr -> Expr .)
    DOT             shift and go to state 139
    LEFTSQRBRACKET  shift and go to state 121
    ADDITION        shift and go to state 119
    SUBSTRACTION    shift and go to state 127
    MULTIPLICATION  shift and go to state 126
    DIVISION        shift and go to state 115
    MODULO          shift and go to state 116
    AND             shift and go to state 114
    OR              shift and go to state 128
    CONCAT          shift and go to state 124
    LESS            shift and go to state 118
    LESSEQUAL       shift and go to state 122
    GREATER         shift and go to state 117
    GREATEREQUAL    shift and go to state 120
    EQUAL           shift and go to state 125
    NOTEQUAL        shift and go to state 123


state 105

    (59) Return -> RETURN ReturnExpr . SEMICOLON

    SEMICOLON       shift and go to state 140


state 106

    (65) WhileStmt -> WHILE LEFTPARENT . Expr RIGHTPARENT Stmt
    (66) Expr -> . Location
    (67) Expr -> . Call
    (68) Expr -> . THIS
    (69) Expr -> . NewId
    (70) Expr -> . NewTypeExpr
    (71) Expr -> . ExprLength
    (72) Expr -> . ExprBinaryExpr
    (73) Expr -> . UnaryExpr
    (74) Expr -> . Literal
    (75) Expr -> . Number
    (76) Expr -> . ParentExprParent
    (49) Location -> . IDEN
    (50) Location -> . Expr DOT IDEN
    (51) Location -> . Expr LEFTSQRBRACKET Expr RIGHTSQRBRACKET
    (52) Call -> . Method LEFTPARENT Actuals RIGHTPARENT
    (77) NewId -> . NEW IDEN LEFTPARENT RIGHTPARENT
    (78) NewTypeExpr -> . NEW Type LEFTSQRBRACKET Expr LEFTSQRBRACKET
    (79) ExprLength -> . Expr DOT LENGTH
    (80) ExprBinaryExpr -> . Expr ADDITION Expr
    (81) ExprBinaryExpr -> . Expr SUBSTRACTION Expr
    (82) ExprBinaryExpr -> . Expr MULTIPLICATION Expr
    (83) ExprBinaryExpr -> . Expr DIVISION Expr
    (84) ExprBinaryExpr -> . Expr MODULO Expr
    (85) ExprBinaryExpr -> . Expr AND Expr
    (86) ExprBinaryExpr -> . Expr OR Expr
    (87) ExprBinaryExpr -> . Expr CONCAT Expr
    (88) ExprBinaryExpr -> . Expr LESS Expr
    (89) ExprBinaryExpr -> . Expr LESSEQUAL Expr
    (90) ExprBinaryExpr -> . Expr GREATER Expr
    (91) ExprBinaryExpr -> . Expr GREATEREQUAL Expr
    (92) ExprBinaryExpr -> . Expr EQUAL Expr
    (93) ExprBinaryExpr -> . Expr NOTEQUAL Expr
    (94) UnaryExpr -> . UnaryMinus
    (95) UnaryExpr -> . NOT
    (97) Literal -> . INT
    (98) Literal -> . STRING
    (99) Literal -> . TRUE
    (100) Literal -> . FALSE
    (101) Literal -> . NULL
    (103) Number -> . CIENTIFIC
    (104) Number -> . HEXADEC
    (105) Number -> . NUMBER
    (106) Number -> . BINARY
    (107) Number -> . FLOAT
    (102) ParentExprParent -> . LEFTPARENT Expr RIGHTPARENT
    (53) Method -> . IDEN
    (54) Method -> . Expr DOT IDEN
    (96) UnaryMinus -> . SUBSTRACTION Expr

    THIS            shift and go to state 90
    IDEN            shift and go to state 57
    NEW             shift and go to state 64
    NOT             shift and go to state 96
    INT             shift and go to state 75
    STRING          shift and go to state 77
    TRUE            shift and go to state 69
    FALSE           shift and go to state 89
    NULL            shift and go to state 65
    CIENTIFIC       shift and go to state 70
    HEXADEC         shift and go to state 81
    NUMBER          shift and go to state 98
    BINARY          shift and go to state 78
    FLOAT           shift and go to state 91
    LEFTPARENT      shift and go to state 84
    SUBSTRACTION    shift and go to state 97

    ExprBinaryExpr                 shift and go to state 88
    Method                         shift and go to state 66
    ExprLength                     shift and go to state 68
    NewTypeExpr                    shift and go to state 79
    Expr                           shift and go to state 141
    UnaryExpr                      shift and go to state 82
    Number                         shift and go to state 74
    Literal                        shift and go to state 92
    NewId                          shift and go to state 73
    Location                       shift and go to state 102
    Call                           shift and go to state 101
    ParentExprParent               shift and go to state 59
    UnaryMinus                     shift and go to state 93

state 107

    (41) Stmt -> Call SEMICOLON .

    RETURN          reduce using rule 41 (Stmt -> Call SEMICOLON .)
    IF              reduce using rule 41 (Stmt -> Call SEMICOLON .)
    BREAK           reduce using rule 41 (Stmt -> Call SEMICOLON .)
    CONTINUE        reduce using rule 41 (Stmt -> Call SEMICOLON .)
    IDEN            reduce using rule 41 (Stmt -> Call SEMICOLON .)
    WHILE           reduce using rule 41 (Stmt -> Call SEMICOLON .)
    LEFTBRACE       reduce using rule 41 (Stmt -> Call SEMICOLON .)
    THIS            reduce using rule 41 (Stmt -> Call SEMICOLON .)
    NEW             reduce using rule 41 (Stmt -> Call SEMICOLON .)
    INT             reduce using rule 41 (Stmt -> Call SEMICOLON .)
    STRING          reduce using rule 41 (Stmt -> Call SEMICOLON .)
    TRUE            reduce using rule 41 (Stmt -> Call SEMICOLON .)
    FALSE           reduce using rule 41 (Stmt -> Call SEMICOLON .)
    NULL            reduce using rule 41 (Stmt -> Call SEMICOLON .)
    LEFTPARENT      reduce using rule 41 (Stmt -> Call SEMICOLON .)
    NOT             reduce using rule 41 (Stmt -> Call SEMICOLON .)
    CIENTIFIC       reduce using rule 41 (Stmt -> Call SEMICOLON .)
    HEXADEC         reduce using rule 41 (Stmt -> Call SEMICOLON .)
    NUMBER          reduce using rule 41 (Stmt -> Call SEMICOLON .)
    BINARY          reduce using rule 41 (Stmt -> Call SEMICOLON .)
    FLOAT           reduce using rule 41 (Stmt -> Call SEMICOLON .)
    SUBSTRACTION    reduce using rule 41 (Stmt -> Call SEMICOLON .)
    RIGHTBRACE      reduce using rule 41 (Stmt -> Call SEMICOLON .)
    ELSE            reduce using rule 41 (Stmt -> Call SEMICOLON .)


state 108

    (48) Assign -> Location ASSIGNMENT . Expr
    (66) Expr -> . Location
    (67) Expr -> . Call
    (68) Expr -> . THIS
    (69) Expr -> . NewId
    (70) Expr -> . NewTypeExpr
    (71) Expr -> . ExprLength
    (72) Expr -> . ExprBinaryExpr
    (73) Expr -> . UnaryExpr
    (74) Expr -> . Literal
    (75) Expr -> . Number
    (76) Expr -> . ParentExprParent
    (49) Location -> . IDEN
    (50) Location -> . Expr DOT IDEN
    (51) Location -> . Expr LEFTSQRBRACKET Expr RIGHTSQRBRACKET
    (52) Call -> . Method LEFTPARENT Actuals RIGHTPARENT
    (77) NewId -> . NEW IDEN LEFTPARENT RIGHTPARENT
    (78) NewTypeExpr -> . NEW Type LEFTSQRBRACKET Expr LEFTSQRBRACKET
    (79) ExprLength -> . Expr DOT LENGTH
    (80) ExprBinaryExpr -> . Expr ADDITION Expr
    (81) ExprBinaryExpr -> . Expr SUBSTRACTION Expr
    (82) ExprBinaryExpr -> . Expr MULTIPLICATION Expr
    (83) ExprBinaryExpr -> . Expr DIVISION Expr
    (84) ExprBinaryExpr -> . Expr MODULO Expr
    (85) ExprBinaryExpr -> . Expr AND Expr
    (86) ExprBinaryExpr -> . Expr OR Expr
    (87) ExprBinaryExpr -> . Expr CONCAT Expr
    (88) ExprBinaryExpr -> . Expr LESS Expr
    (89) ExprBinaryExpr -> . Expr LESSEQUAL Expr
    (90) ExprBinaryExpr -> . Expr GREATER Expr
    (91) ExprBinaryExpr -> . Expr GREATEREQUAL Expr
    (92) ExprBinaryExpr -> . Expr EQUAL Expr
    (93) ExprBinaryExpr -> . Expr NOTEQUAL Expr
    (94) UnaryExpr -> . UnaryMinus
    (95) UnaryExpr -> . NOT
    (97) Literal -> . INT
    (98) Literal -> . STRING
    (99) Literal -> . TRUE
    (100) Literal -> . FALSE
    (101) Literal -> . NULL
    (103) Number -> . CIENTIFIC
    (104) Number -> . HEXADEC
    (105) Number -> . NUMBER
    (106) Number -> . BINARY
    (107) Number -> . FLOAT
    (102) ParentExprParent -> . LEFTPARENT Expr RIGHTPARENT
    (53) Method -> . IDEN
    (54) Method -> . Expr DOT IDEN
    (96) UnaryMinus -> . SUBSTRACTION Expr

    THIS            shift and go to state 90
    IDEN            shift and go to state 57
    NEW             shift and go to state 64
    NOT             shift and go to state 96
    INT             shift and go to state 75
    STRING          shift and go to state 77
    TRUE            shift and go to state 69
    FALSE           shift and go to state 89
    NULL            shift and go to state 65
    CIENTIFIC       shift and go to state 70
    HEXADEC         shift and go to state 81
    NUMBER          shift and go to state 98
    BINARY          shift and go to state 78
    FLOAT           shift and go to state 91
    LEFTPARENT      shift and go to state 84
    SUBSTRACTION    shift and go to state 97

    ExprBinaryExpr                 shift and go to state 88
    Method                         shift and go to state 66
    ExprLength                     shift and go to state 68
    NewTypeExpr                    shift and go to state 79
    Expr                           shift and go to state 142
    UnaryExpr                      shift and go to state 82
    Number                         shift and go to state 74
    Literal                        shift and go to state 92
    NewId                          shift and go to state 73
    Location                       shift and go to state 102
    Call                           shift and go to state 101
    ParentExprParent               shift and go to state 59
    UnaryMinus                     shift and go to state 93

state 109

    (30) Block -> LEFTBRACE VarDeclList StmtList RIGHTBRACE .

    INT             reduce using rule 30 (Block -> LEFTBRACE VarDeclList StmtList RIGHTBRACE .)
    BOOLEAN         reduce using rule 30 (Block -> LEFTBRACE VarDeclList StmtList RIGHTBRACE .)
    STRING          reduce using rule 30 (Block -> LEFTBRACE VarDeclList StmtList RIGHTBRACE .)
    IDEN            reduce using rule 30 (Block -> LEFTBRACE VarDeclList StmtList RIGHTBRACE .)
    VOID            reduce using rule 30 (Block -> LEFTBRACE VarDeclList StmtList RIGHTBRACE .)
    RIGHTBRACE      reduce using rule 30 (Block -> LEFTBRACE VarDeclList StmtList RIGHTBRACE .)
    RETURN          reduce using rule 30 (Block -> LEFTBRACE VarDeclList StmtList RIGHTBRACE .)
    IF              reduce using rule 30 (Block -> LEFTBRACE VarDeclList StmtList RIGHTBRACE .)
    BREAK           reduce using rule 30 (Block -> LEFTBRACE VarDeclList StmtList RIGHTBRACE .)
    CONTINUE        reduce using rule 30 (Block -> LEFTBRACE VarDeclList StmtList RIGHTBRACE .)
    WHILE           reduce using rule 30 (Block -> LEFTBRACE VarDeclList StmtList RIGHTBRACE .)
    LEFTBRACE       reduce using rule 30 (Block -> LEFTBRACE VarDeclList StmtList RIGHTBRACE .)
    THIS            reduce using rule 30 (Block -> LEFTBRACE VarDeclList StmtList RIGHTBRACE .)
    NEW             reduce using rule 30 (Block -> LEFTBRACE VarDeclList StmtList RIGHTBRACE .)
    TRUE            reduce using rule 30 (Block -> LEFTBRACE VarDeclList StmtList RIGHTBRACE .)
    FALSE           reduce using rule 30 (Block -> LEFTBRACE VarDeclList StmtList RIGHTBRACE .)
    NULL            reduce using rule 30 (Block -> LEFTBRACE VarDeclList StmtList RIGHTBRACE .)
    LEFTPARENT      reduce using rule 30 (Block -> LEFTBRACE VarDeclList StmtList RIGHTBRACE .)
    NOT             reduce using rule 30 (Block -> LEFTBRACE VarDeclList StmtList RIGHTBRACE .)
    CIENTIFIC       reduce using rule 30 (Block -> LEFTBRACE VarDeclList StmtList RIGHTBRACE .)
    HEXADEC         reduce using rule 30 (Block -> LEFTBRACE VarDeclList StmtList RIGHTBRACE .)
    NUMBER          reduce using rule 30 (Block -> LEFTBRACE VarDeclList StmtList RIGHTBRACE .)
    BINARY          reduce using rule 30 (Block -> LEFTBRACE VarDeclList StmtList RIGHTBRACE .)
    FLOAT           reduce using rule 30 (Block -> LEFTBRACE VarDeclList StmtList RIGHTBRACE .)
    SUBSTRACTION    reduce using rule 30 (Block -> LEFTBRACE VarDeclList StmtList RIGHTBRACE .)
    ELSE            reduce using rule 30 (Block -> LEFTBRACE VarDeclList StmtList RIGHTBRACE .)


state 110

    (77) NewId -> NEW IDEN . LEFTPARENT RIGHTPARENT
    (27) Type -> IDEN .

    LEFTPARENT      shift and go to state 143
    IDEN            reduce using rule 27 (Type -> IDEN .)
    LEFTSQRBRACKET  reduce using rule 27 (Type -> IDEN .)


state 111

    (78) NewTypeExpr -> NEW Type . LEFTSQRBRACKET Expr LEFTSQRBRACKET
    (29) Array -> Type . LEFTSQRBRACKET RIGHTSQRBRACKET

    LEFTSQRBRACKET  shift and go to state 144


state 112

    (52) Call -> Method LEFTPARENT . Actuals RIGHTPARENT
    (55) Actuals -> . Expr ExprCommaList
    (66) Expr -> . Location
    (67) Expr -> . Call
    (68) Expr -> . THIS
    (69) Expr -> . NewId
    (70) Expr -> . NewTypeExpr
    (71) Expr -> . ExprLength
    (72) Expr -> . ExprBinaryExpr
    (73) Expr -> . UnaryExpr
    (74) Expr -> . Literal
    (75) Expr -> . Number
    (76) Expr -> . ParentExprParent
    (49) Location -> . IDEN
    (50) Location -> . Expr DOT IDEN
    (51) Location -> . Expr LEFTSQRBRACKET Expr RIGHTSQRBRACKET
    (52) Call -> . Method LEFTPARENT Actuals RIGHTPARENT
    (77) NewId -> . NEW IDEN LEFTPARENT RIGHTPARENT
    (78) NewTypeExpr -> . NEW Type LEFTSQRBRACKET Expr LEFTSQRBRACKET
    (79) ExprLength -> . Expr DOT LENGTH
    (80) ExprBinaryExpr -> . Expr ADDITION Expr
    (81) ExprBinaryExpr -> . Expr SUBSTRACTION Expr
    (82) ExprBinaryExpr -> . Expr MULTIPLICATION Expr
    (83) ExprBinaryExpr -> . Expr DIVISION Expr
    (84) ExprBinaryExpr -> . Expr MODULO Expr
    (85) ExprBinaryExpr -> . Expr AND Expr
    (86) ExprBinaryExpr -> . Expr OR Expr
    (87) ExprBinaryExpr -> . Expr CONCAT Expr
    (88) ExprBinaryExpr -> . Expr LESS Expr
    (89) ExprBinaryExpr -> . Expr LESSEQUAL Expr
    (90) ExprBinaryExpr -> . Expr GREATER Expr
    (91) ExprBinaryExpr -> . Expr GREATEREQUAL Expr
    (92) ExprBinaryExpr -> . Expr EQUAL Expr
    (93) ExprBinaryExpr -> . Expr NOTEQUAL Expr
    (94) UnaryExpr -> . UnaryMinus
    (95) UnaryExpr -> . NOT
    (97) Literal -> . INT
    (98) Literal -> . STRING
    (99) Literal -> . TRUE
    (100) Literal -> . FALSE
    (101) Literal -> . NULL
    (103) Number -> . CIENTIFIC
    (104) Number -> . HEXADEC
    (105) Number -> . NUMBER
    (106) Number -> . BINARY
    (107) Number -> . FLOAT
    (102) ParentExprParent -> . LEFTPARENT Expr RIGHTPARENT
    (53) Method -> . IDEN
    (54) Method -> . Expr DOT IDEN
    (96) UnaryMinus -> . SUBSTRACTION Expr

    THIS            shift and go to state 90
    IDEN            shift and go to state 57
    NEW             shift and go to state 64
    NOT             shift and go to state 96
    INT             shift and go to state 75
    STRING          shift and go to state 77
    TRUE            shift and go to state 69
    FALSE           shift and go to state 89
    NULL            shift and go to state 65
    CIENTIFIC       shift and go to state 70
    HEXADEC         shift and go to state 81
    NUMBER          shift and go to state 98
    BINARY          shift and go to state 78
    FLOAT           shift and go to state 91
    LEFTPARENT      shift and go to state 84
    SUBSTRACTION    shift and go to state 97

    ExprBinaryExpr                 shift and go to state 88
    UnaryMinus                     shift and go to state 93
    ExprLength                     shift and go to state 68
    NewTypeExpr                    shift and go to state 79
    Expr                           shift and go to state 146
    UnaryExpr                      shift and go to state 82
    ParentExprParent               shift and go to state 59
    Number                         shift and go to state 74
    Actuals                        shift and go to state 145
    Call                           shift and go to state 101
    Location                       shift and go to state 102
    NewId                          shift and go to state 73
    Literal                        shift and go to state 92
    Method                         shift and go to state 66

state 113

    (31) StmtList -> Stmt StmtList .

    RIGHTBRACE      reduce using rule 31 (StmtList -> Stmt StmtList .)


state 114

    (85) ExprBinaryExpr -> Expr AND . Expr
    (66) Expr -> . Location
    (67) Expr -> . Call
    (68) Expr -> . THIS
    (69) Expr -> . NewId
    (70) Expr -> . NewTypeExpr
    (71) Expr -> . ExprLength
    (72) Expr -> . ExprBinaryExpr
    (73) Expr -> . UnaryExpr
    (74) Expr -> . Literal
    (75) Expr -> . Number
    (76) Expr -> . ParentExprParent
    (49) Location -> . IDEN
    (50) Location -> . Expr DOT IDEN
    (51) Location -> . Expr LEFTSQRBRACKET Expr RIGHTSQRBRACKET
    (52) Call -> . Method LEFTPARENT Actuals RIGHTPARENT
    (77) NewId -> . NEW IDEN LEFTPARENT RIGHTPARENT
    (78) NewTypeExpr -> . NEW Type LEFTSQRBRACKET Expr LEFTSQRBRACKET
    (79) ExprLength -> . Expr DOT LENGTH
    (80) ExprBinaryExpr -> . Expr ADDITION Expr
    (81) ExprBinaryExpr -> . Expr SUBSTRACTION Expr
    (82) ExprBinaryExpr -> . Expr MULTIPLICATION Expr
    (83) ExprBinaryExpr -> . Expr DIVISION Expr
    (84) ExprBinaryExpr -> . Expr MODULO Expr
    (85) ExprBinaryExpr -> . Expr AND Expr
    (86) ExprBinaryExpr -> . Expr OR Expr
    (87) ExprBinaryExpr -> . Expr CONCAT Expr
    (88) ExprBinaryExpr -> . Expr LESS Expr
    (89) ExprBinaryExpr -> . Expr LESSEQUAL Expr
    (90) ExprBinaryExpr -> . Expr GREATER Expr
    (91) ExprBinaryExpr -> . Expr GREATEREQUAL Expr
    (92) ExprBinaryExpr -> . Expr EQUAL Expr
    (93) ExprBinaryExpr -> . Expr NOTEQUAL Expr
    (94) UnaryExpr -> . UnaryMinus
    (95) UnaryExpr -> . NOT
    (97) Literal -> . INT
    (98) Literal -> . STRING
    (99) Literal -> . TRUE
    (100) Literal -> . FALSE
    (101) Literal -> . NULL
    (103) Number -> . CIENTIFIC
    (104) Number -> . HEXADEC
    (105) Number -> . NUMBER
    (106) Number -> . BINARY
    (107) Number -> . FLOAT
    (102) ParentExprParent -> . LEFTPARENT Expr RIGHTPARENT
    (53) Method -> . IDEN
    (54) Method -> . Expr DOT IDEN
    (96) UnaryMinus -> . SUBSTRACTION Expr

    THIS            shift and go to state 90
    IDEN            shift and go to state 57
    NEW             shift and go to state 64
    NOT             shift and go to state 96
    INT             shift and go to state 75
    STRING          shift and go to state 77
    TRUE            shift and go to state 69
    FALSE           shift and go to state 89
    NULL            shift and go to state 65
    CIENTIFIC       shift and go to state 70
    HEXADEC         shift and go to state 81
    NUMBER          shift and go to state 98
    BINARY          shift and go to state 78
    FLOAT           shift and go to state 91
    LEFTPARENT      shift and go to state 84
    SUBSTRACTION    shift and go to state 97

    ExprBinaryExpr                 shift and go to state 88
    Method                         shift and go to state 66
    ExprLength                     shift and go to state 68
    NewTypeExpr                    shift and go to state 79
    Expr                           shift and go to state 147
    UnaryExpr                      shift and go to state 82
    Number                         shift and go to state 74
    Literal                        shift and go to state 92
    NewId                          shift and go to state 73
    Location                       shift and go to state 102
    Call                           shift and go to state 101
    ParentExprParent               shift and go to state 59
    UnaryMinus                     shift and go to state 93

state 115

    (83) ExprBinaryExpr -> Expr DIVISION . Expr
    (66) Expr -> . Location
    (67) Expr -> . Call
    (68) Expr -> . THIS
    (69) Expr -> . NewId
    (70) Expr -> . NewTypeExpr
    (71) Expr -> . ExprLength
    (72) Expr -> . ExprBinaryExpr
    (73) Expr -> . UnaryExpr
    (74) Expr -> . Literal
    (75) Expr -> . Number
    (76) Expr -> . ParentExprParent
    (49) Location -> . IDEN
    (50) Location -> . Expr DOT IDEN
    (51) Location -> . Expr LEFTSQRBRACKET Expr RIGHTSQRBRACKET
    (52) Call -> . Method LEFTPARENT Actuals RIGHTPARENT
    (77) NewId -> . NEW IDEN LEFTPARENT RIGHTPARENT
    (78) NewTypeExpr -> . NEW Type LEFTSQRBRACKET Expr LEFTSQRBRACKET
    (79) ExprLength -> . Expr DOT LENGTH
    (80) ExprBinaryExpr -> . Expr ADDITION Expr
    (81) ExprBinaryExpr -> . Expr SUBSTRACTION Expr
    (82) ExprBinaryExpr -> . Expr MULTIPLICATION Expr
    (83) ExprBinaryExpr -> . Expr DIVISION Expr
    (84) ExprBinaryExpr -> . Expr MODULO Expr
    (85) ExprBinaryExpr -> . Expr AND Expr
    (86) ExprBinaryExpr -> . Expr OR Expr
    (87) ExprBinaryExpr -> . Expr CONCAT Expr
    (88) ExprBinaryExpr -> . Expr LESS Expr
    (89) ExprBinaryExpr -> . Expr LESSEQUAL Expr
    (90) ExprBinaryExpr -> . Expr GREATER Expr
    (91) ExprBinaryExpr -> . Expr GREATEREQUAL Expr
    (92) ExprBinaryExpr -> . Expr EQUAL Expr
    (93) ExprBinaryExpr -> . Expr NOTEQUAL Expr
    (94) UnaryExpr -> . UnaryMinus
    (95) UnaryExpr -> . NOT
    (97) Literal -> . INT
    (98) Literal -> . STRING
    (99) Literal -> . TRUE
    (100) Literal -> . FALSE
    (101) Literal -> . NULL
    (103) Number -> . CIENTIFIC
    (104) Number -> . HEXADEC
    (105) Number -> . NUMBER
    (106) Number -> . BINARY
    (107) Number -> . FLOAT
    (102) ParentExprParent -> . LEFTPARENT Expr RIGHTPARENT
    (53) Method -> . IDEN
    (54) Method -> . Expr DOT IDEN
    (96) UnaryMinus -> . SUBSTRACTION Expr

    THIS            shift and go to state 90
    IDEN            shift and go to state 57
    NEW             shift and go to state 64
    NOT             shift and go to state 96
    INT             shift and go to state 75
    STRING          shift and go to state 77
    TRUE            shift and go to state 69
    FALSE           shift and go to state 89
    NULL            shift and go to state 65
    CIENTIFIC       shift and go to state 70
    HEXADEC         shift and go to state 81
    NUMBER          shift and go to state 98
    BINARY          shift and go to state 78
    FLOAT           shift and go to state 91
    LEFTPARENT      shift and go to state 84
    SUBSTRACTION    shift and go to state 97

    ExprBinaryExpr                 shift and go to state 88
    Method                         shift and go to state 66
    ExprLength                     shift and go to state 68
    NewTypeExpr                    shift and go to state 79
    Expr                           shift and go to state 148
    UnaryExpr                      shift and go to state 82
    Number                         shift and go to state 74
    Literal                        shift and go to state 92
    NewId                          shift and go to state 73
    Location                       shift and go to state 102
    Call                           shift and go to state 101
    ParentExprParent               shift and go to state 59
    UnaryMinus                     shift and go to state 93

state 116

    (84) ExprBinaryExpr -> Expr MODULO . Expr
    (66) Expr -> . Location
    (67) Expr -> . Call
    (68) Expr -> . THIS
    (69) Expr -> . NewId
    (70) Expr -> . NewTypeExpr
    (71) Expr -> . ExprLength
    (72) Expr -> . ExprBinaryExpr
    (73) Expr -> . UnaryExpr
    (74) Expr -> . Literal
    (75) Expr -> . Number
    (76) Expr -> . ParentExprParent
    (49) Location -> . IDEN
    (50) Location -> . Expr DOT IDEN
    (51) Location -> . Expr LEFTSQRBRACKET Expr RIGHTSQRBRACKET
    (52) Call -> . Method LEFTPARENT Actuals RIGHTPARENT
    (77) NewId -> . NEW IDEN LEFTPARENT RIGHTPARENT
    (78) NewTypeExpr -> . NEW Type LEFTSQRBRACKET Expr LEFTSQRBRACKET
    (79) ExprLength -> . Expr DOT LENGTH
    (80) ExprBinaryExpr -> . Expr ADDITION Expr
    (81) ExprBinaryExpr -> . Expr SUBSTRACTION Expr
    (82) ExprBinaryExpr -> . Expr MULTIPLICATION Expr
    (83) ExprBinaryExpr -> . Expr DIVISION Expr
    (84) ExprBinaryExpr -> . Expr MODULO Expr
    (85) ExprBinaryExpr -> . Expr AND Expr
    (86) ExprBinaryExpr -> . Expr OR Expr
    (87) ExprBinaryExpr -> . Expr CONCAT Expr
    (88) ExprBinaryExpr -> . Expr LESS Expr
    (89) ExprBinaryExpr -> . Expr LESSEQUAL Expr
    (90) ExprBinaryExpr -> . Expr GREATER Expr
    (91) ExprBinaryExpr -> . Expr GREATEREQUAL Expr
    (92) ExprBinaryExpr -> . Expr EQUAL Expr
    (93) ExprBinaryExpr -> . Expr NOTEQUAL Expr
    (94) UnaryExpr -> . UnaryMinus
    (95) UnaryExpr -> . NOT
    (97) Literal -> . INT
    (98) Literal -> . STRING
    (99) Literal -> . TRUE
    (100) Literal -> . FALSE
    (101) Literal -> . NULL
    (103) Number -> . CIENTIFIC
    (104) Number -> . HEXADEC
    (105) Number -> . NUMBER
    (106) Number -> . BINARY
    (107) Number -> . FLOAT
    (102) ParentExprParent -> . LEFTPARENT Expr RIGHTPARENT
    (53) Method -> . IDEN
    (54) Method -> . Expr DOT IDEN
    (96) UnaryMinus -> . SUBSTRACTION Expr

    THIS            shift and go to state 90
    IDEN            shift and go to state 57
    NEW             shift and go to state 64
    NOT             shift and go to state 96
    INT             shift and go to state 75
    STRING          shift and go to state 77
    TRUE            shift and go to state 69
    FALSE           shift and go to state 89
    NULL            shift and go to state 65
    CIENTIFIC       shift and go to state 70
    HEXADEC         shift and go to state 81
    NUMBER          shift and go to state 98
    BINARY          shift and go to state 78
    FLOAT           shift and go to state 91
    LEFTPARENT      shift and go to state 84
    SUBSTRACTION    shift and go to state 97

    ExprBinaryExpr                 shift and go to state 88
    Method                         shift and go to state 66
    ExprLength                     shift and go to state 68
    NewTypeExpr                    shift and go to state 79
    Expr                           shift and go to state 149
    UnaryExpr                      shift and go to state 82
    Number                         shift and go to state 74
    Literal                        shift and go to state 92
    NewId                          shift and go to state 73
    Location                       shift and go to state 102
    Call                           shift and go to state 101
    ParentExprParent               shift and go to state 59
    UnaryMinus                     shift and go to state 93

state 117

    (90) ExprBinaryExpr -> Expr GREATER . Expr
    (66) Expr -> . Location
    (67) Expr -> . Call
    (68) Expr -> . THIS
    (69) Expr -> . NewId
    (70) Expr -> . NewTypeExpr
    (71) Expr -> . ExprLength
    (72) Expr -> . ExprBinaryExpr
    (73) Expr -> . UnaryExpr
    (74) Expr -> . Literal
    (75) Expr -> . Number
    (76) Expr -> . ParentExprParent
    (49) Location -> . IDEN
    (50) Location -> . Expr DOT IDEN
    (51) Location -> . Expr LEFTSQRBRACKET Expr RIGHTSQRBRACKET
    (52) Call -> . Method LEFTPARENT Actuals RIGHTPARENT
    (77) NewId -> . NEW IDEN LEFTPARENT RIGHTPARENT
    (78) NewTypeExpr -> . NEW Type LEFTSQRBRACKET Expr LEFTSQRBRACKET
    (79) ExprLength -> . Expr DOT LENGTH
    (80) ExprBinaryExpr -> . Expr ADDITION Expr
    (81) ExprBinaryExpr -> . Expr SUBSTRACTION Expr
    (82) ExprBinaryExpr -> . Expr MULTIPLICATION Expr
    (83) ExprBinaryExpr -> . Expr DIVISION Expr
    (84) ExprBinaryExpr -> . Expr MODULO Expr
    (85) ExprBinaryExpr -> . Expr AND Expr
    (86) ExprBinaryExpr -> . Expr OR Expr
    (87) ExprBinaryExpr -> . Expr CONCAT Expr
    (88) ExprBinaryExpr -> . Expr LESS Expr
    (89) ExprBinaryExpr -> . Expr LESSEQUAL Expr
    (90) ExprBinaryExpr -> . Expr GREATER Expr
    (91) ExprBinaryExpr -> . Expr GREATEREQUAL Expr
    (92) ExprBinaryExpr -> . Expr EQUAL Expr
    (93) ExprBinaryExpr -> . Expr NOTEQUAL Expr
    (94) UnaryExpr -> . UnaryMinus
    (95) UnaryExpr -> . NOT
    (97) Literal -> . INT
    (98) Literal -> . STRING
    (99) Literal -> . TRUE
    (100) Literal -> . FALSE
    (101) Literal -> . NULL
    (103) Number -> . CIENTIFIC
    (104) Number -> . HEXADEC
    (105) Number -> . NUMBER
    (106) Number -> . BINARY
    (107) Number -> . FLOAT
    (102) ParentExprParent -> . LEFTPARENT Expr RIGHTPARENT
    (53) Method -> . IDEN
    (54) Method -> . Expr DOT IDEN
    (96) UnaryMinus -> . SUBSTRACTION Expr

    THIS            shift and go to state 90
    IDEN            shift and go to state 57
    NEW             shift and go to state 64
    NOT             shift and go to state 96
    INT             shift and go to state 75
    STRING          shift and go to state 77
    TRUE            shift and go to state 69
    FALSE           shift and go to state 89
    NULL            shift and go to state 65
    CIENTIFIC       shift and go to state 70
    HEXADEC         shift and go to state 81
    NUMBER          shift and go to state 98
    BINARY          shift and go to state 78
    FLOAT           shift and go to state 91
    LEFTPARENT      shift and go to state 84
    SUBSTRACTION    shift and go to state 97

    ExprBinaryExpr                 shift and go to state 88
    Method                         shift and go to state 66
    ExprLength                     shift and go to state 68
    NewTypeExpr                    shift and go to state 79
    Expr                           shift and go to state 150
    UnaryExpr                      shift and go to state 82
    Number                         shift and go to state 74
    Literal                        shift and go to state 92
    NewId                          shift and go to state 73
    Location                       shift and go to state 102
    Call                           shift and go to state 101
    ParentExprParent               shift and go to state 59
    UnaryMinus                     shift and go to state 93

state 118

    (88) ExprBinaryExpr -> Expr LESS . Expr
    (66) Expr -> . Location
    (67) Expr -> . Call
    (68) Expr -> . THIS
    (69) Expr -> . NewId
    (70) Expr -> . NewTypeExpr
    (71) Expr -> . ExprLength
    (72) Expr -> . ExprBinaryExpr
    (73) Expr -> . UnaryExpr
    (74) Expr -> . Literal
    (75) Expr -> . Number
    (76) Expr -> . ParentExprParent
    (49) Location -> . IDEN
    (50) Location -> . Expr DOT IDEN
    (51) Location -> . Expr LEFTSQRBRACKET Expr RIGHTSQRBRACKET
    (52) Call -> . Method LEFTPARENT Actuals RIGHTPARENT
    (77) NewId -> . NEW IDEN LEFTPARENT RIGHTPARENT
    (78) NewTypeExpr -> . NEW Type LEFTSQRBRACKET Expr LEFTSQRBRACKET
    (79) ExprLength -> . Expr DOT LENGTH
    (80) ExprBinaryExpr -> . Expr ADDITION Expr
    (81) ExprBinaryExpr -> . Expr SUBSTRACTION Expr
    (82) ExprBinaryExpr -> . Expr MULTIPLICATION Expr
    (83) ExprBinaryExpr -> . Expr DIVISION Expr
    (84) ExprBinaryExpr -> . Expr MODULO Expr
    (85) ExprBinaryExpr -> . Expr AND Expr
    (86) ExprBinaryExpr -> . Expr OR Expr
    (87) ExprBinaryExpr -> . Expr CONCAT Expr
    (88) ExprBinaryExpr -> . Expr LESS Expr
    (89) ExprBinaryExpr -> . Expr LESSEQUAL Expr
    (90) ExprBinaryExpr -> . Expr GREATER Expr
    (91) ExprBinaryExpr -> . Expr GREATEREQUAL Expr
    (92) ExprBinaryExpr -> . Expr EQUAL Expr
    (93) ExprBinaryExpr -> . Expr NOTEQUAL Expr
    (94) UnaryExpr -> . UnaryMinus
    (95) UnaryExpr -> . NOT
    (97) Literal -> . INT
    (98) Literal -> . STRING
    (99) Literal -> . TRUE
    (100) Literal -> . FALSE
    (101) Literal -> . NULL
    (103) Number -> . CIENTIFIC
    (104) Number -> . HEXADEC
    (105) Number -> . NUMBER
    (106) Number -> . BINARY
    (107) Number -> . FLOAT
    (102) ParentExprParent -> . LEFTPARENT Expr RIGHTPARENT
    (53) Method -> . IDEN
    (54) Method -> . Expr DOT IDEN
    (96) UnaryMinus -> . SUBSTRACTION Expr

    THIS            shift and go to state 90
    IDEN            shift and go to state 57
    NEW             shift and go to state 64
    NOT             shift and go to state 96
    INT             shift and go to state 75
    STRING          shift and go to state 77
    TRUE            shift and go to state 69
    FALSE           shift and go to state 89
    NULL            shift and go to state 65
    CIENTIFIC       shift and go to state 70
    HEXADEC         shift and go to state 81
    NUMBER          shift and go to state 98
    BINARY          shift and go to state 78
    FLOAT           shift and go to state 91
    LEFTPARENT      shift and go to state 84
    SUBSTRACTION    shift and go to state 97

    ExprBinaryExpr                 shift and go to state 88
    Method                         shift and go to state 66
    ExprLength                     shift and go to state 68
    NewTypeExpr                    shift and go to state 79
    Expr                           shift and go to state 151
    UnaryExpr                      shift and go to state 82
    Number                         shift and go to state 74
    Literal                        shift and go to state 92
    NewId                          shift and go to state 73
    Location                       shift and go to state 102
    Call                           shift and go to state 101
    ParentExprParent               shift and go to state 59
    UnaryMinus                     shift and go to state 93

state 119

    (80) ExprBinaryExpr -> Expr ADDITION . Expr
    (66) Expr -> . Location
    (67) Expr -> . Call
    (68) Expr -> . THIS
    (69) Expr -> . NewId
    (70) Expr -> . NewTypeExpr
    (71) Expr -> . ExprLength
    (72) Expr -> . ExprBinaryExpr
    (73) Expr -> . UnaryExpr
    (74) Expr -> . Literal
    (75) Expr -> . Number
    (76) Expr -> . ParentExprParent
    (49) Location -> . IDEN
    (50) Location -> . Expr DOT IDEN
    (51) Location -> . Expr LEFTSQRBRACKET Expr RIGHTSQRBRACKET
    (52) Call -> . Method LEFTPARENT Actuals RIGHTPARENT
    (77) NewId -> . NEW IDEN LEFTPARENT RIGHTPARENT
    (78) NewTypeExpr -> . NEW Type LEFTSQRBRACKET Expr LEFTSQRBRACKET
    (79) ExprLength -> . Expr DOT LENGTH
    (80) ExprBinaryExpr -> . Expr ADDITION Expr
    (81) ExprBinaryExpr -> . Expr SUBSTRACTION Expr
    (82) ExprBinaryExpr -> . Expr MULTIPLICATION Expr
    (83) ExprBinaryExpr -> . Expr DIVISION Expr
    (84) ExprBinaryExpr -> . Expr MODULO Expr
    (85) ExprBinaryExpr -> . Expr AND Expr
    (86) ExprBinaryExpr -> . Expr OR Expr
    (87) ExprBinaryExpr -> . Expr CONCAT Expr
    (88) ExprBinaryExpr -> . Expr LESS Expr
    (89) ExprBinaryExpr -> . Expr LESSEQUAL Expr
    (90) ExprBinaryExpr -> . Expr GREATER Expr
    (91) ExprBinaryExpr -> . Expr GREATEREQUAL Expr
    (92) ExprBinaryExpr -> . Expr EQUAL Expr
    (93) ExprBinaryExpr -> . Expr NOTEQUAL Expr
    (94) UnaryExpr -> . UnaryMinus
    (95) UnaryExpr -> . NOT
    (97) Literal -> . INT
    (98) Literal -> . STRING
    (99) Literal -> . TRUE
    (100) Literal -> . FALSE
    (101) Literal -> . NULL
    (103) Number -> . CIENTIFIC
    (104) Number -> . HEXADEC
    (105) Number -> . NUMBER
    (106) Number -> . BINARY
    (107) Number -> . FLOAT
    (102) ParentExprParent -> . LEFTPARENT Expr RIGHTPARENT
    (53) Method -> . IDEN
    (54) Method -> . Expr DOT IDEN
    (96) UnaryMinus -> . SUBSTRACTION Expr

    THIS            shift and go to state 90
    IDEN            shift and go to state 57
    NEW             shift and go to state 64
    NOT             shift and go to state 96
    INT             shift and go to state 75
    STRING          shift and go to state 77
    TRUE            shift and go to state 69
    FALSE           shift and go to state 89
    NULL            shift and go to state 65
    CIENTIFIC       shift and go to state 70
    HEXADEC         shift and go to state 81
    NUMBER          shift and go to state 98
    BINARY          shift and go to state 78
    FLOAT           shift and go to state 91
    LEFTPARENT      shift and go to state 84
    SUBSTRACTION    shift and go to state 97

    ExprBinaryExpr                 shift and go to state 88
    Method                         shift and go to state 66
    ExprLength                     shift and go to state 68
    NewTypeExpr                    shift and go to state 79
    Expr                           shift and go to state 152
    UnaryExpr                      shift and go to state 82
    Number                         shift and go to state 74
    Literal                        shift and go to state 92
    NewId                          shift and go to state 73
    Location                       shift and go to state 102
    Call                           shift and go to state 101
    ParentExprParent               shift and go to state 59
    UnaryMinus                     shift and go to state 93

state 120

    (91) ExprBinaryExpr -> Expr GREATEREQUAL . Expr
    (66) Expr -> . Location
    (67) Expr -> . Call
    (68) Expr -> . THIS
    (69) Expr -> . NewId
    (70) Expr -> . NewTypeExpr
    (71) Expr -> . ExprLength
    (72) Expr -> . ExprBinaryExpr
    (73) Expr -> . UnaryExpr
    (74) Expr -> . Literal
    (75) Expr -> . Number
    (76) Expr -> . ParentExprParent
    (49) Location -> . IDEN
    (50) Location -> . Expr DOT IDEN
    (51) Location -> . Expr LEFTSQRBRACKET Expr RIGHTSQRBRACKET
    (52) Call -> . Method LEFTPARENT Actuals RIGHTPARENT
    (77) NewId -> . NEW IDEN LEFTPARENT RIGHTPARENT
    (78) NewTypeExpr -> . NEW Type LEFTSQRBRACKET Expr LEFTSQRBRACKET
    (79) ExprLength -> . Expr DOT LENGTH
    (80) ExprBinaryExpr -> . Expr ADDITION Expr
    (81) ExprBinaryExpr -> . Expr SUBSTRACTION Expr
    (82) ExprBinaryExpr -> . Expr MULTIPLICATION Expr
    (83) ExprBinaryExpr -> . Expr DIVISION Expr
    (84) ExprBinaryExpr -> . Expr MODULO Expr
    (85) ExprBinaryExpr -> . Expr AND Expr
    (86) ExprBinaryExpr -> . Expr OR Expr
    (87) ExprBinaryExpr -> . Expr CONCAT Expr
    (88) ExprBinaryExpr -> . Expr LESS Expr
    (89) ExprBinaryExpr -> . Expr LESSEQUAL Expr
    (90) ExprBinaryExpr -> . Expr GREATER Expr
    (91) ExprBinaryExpr -> . Expr GREATEREQUAL Expr
    (92) ExprBinaryExpr -> . Expr EQUAL Expr
    (93) ExprBinaryExpr -> . Expr NOTEQUAL Expr
    (94) UnaryExpr -> . UnaryMinus
    (95) UnaryExpr -> . NOT
    (97) Literal -> . INT
    (98) Literal -> . STRING
    (99) Literal -> . TRUE
    (100) Literal -> . FALSE
    (101) Literal -> . NULL
    (103) Number -> . CIENTIFIC
    (104) Number -> . HEXADEC
    (105) Number -> . NUMBER
    (106) Number -> . BINARY
    (107) Number -> . FLOAT
    (102) ParentExprParent -> . LEFTPARENT Expr RIGHTPARENT
    (53) Method -> . IDEN
    (54) Method -> . Expr DOT IDEN
    (96) UnaryMinus -> . SUBSTRACTION Expr

    THIS            shift and go to state 90
    IDEN            shift and go to state 57
    NEW             shift and go to state 64
    NOT             shift and go to state 96
    INT             shift and go to state 75
    STRING          shift and go to state 77
    TRUE            shift and go to state 69
    FALSE           shift and go to state 89
    NULL            shift and go to state 65
    CIENTIFIC       shift and go to state 70
    HEXADEC         shift and go to state 81
    NUMBER          shift and go to state 98
    BINARY          shift and go to state 78
    FLOAT           shift and go to state 91
    LEFTPARENT      shift and go to state 84
    SUBSTRACTION    shift and go to state 97

    ExprBinaryExpr                 shift and go to state 88
    Method                         shift and go to state 66
    ExprLength                     shift and go to state 68
    NewTypeExpr                    shift and go to state 79
    Expr                           shift and go to state 153
    UnaryExpr                      shift and go to state 82
    Number                         shift and go to state 74
    Literal                        shift and go to state 92
    NewId                          shift and go to state 73
    Location                       shift and go to state 102
    Call                           shift and go to state 101
    ParentExprParent               shift and go to state 59
    UnaryMinus                     shift and go to state 93

state 121

    (51) Location -> Expr LEFTSQRBRACKET . Expr RIGHTSQRBRACKET
    (66) Expr -> . Location
    (67) Expr -> . Call
    (68) Expr -> . THIS
    (69) Expr -> . NewId
    (70) Expr -> . NewTypeExpr
    (71) Expr -> . ExprLength
    (72) Expr -> . ExprBinaryExpr
    (73) Expr -> . UnaryExpr
    (74) Expr -> . Literal
    (75) Expr -> . Number
    (76) Expr -> . ParentExprParent
    (49) Location -> . IDEN
    (50) Location -> . Expr DOT IDEN
    (51) Location -> . Expr LEFTSQRBRACKET Expr RIGHTSQRBRACKET
    (52) Call -> . Method LEFTPARENT Actuals RIGHTPARENT
    (77) NewId -> . NEW IDEN LEFTPARENT RIGHTPARENT
    (78) NewTypeExpr -> . NEW Type LEFTSQRBRACKET Expr LEFTSQRBRACKET
    (79) ExprLength -> . Expr DOT LENGTH
    (80) ExprBinaryExpr -> . Expr ADDITION Expr
    (81) ExprBinaryExpr -> . Expr SUBSTRACTION Expr
    (82) ExprBinaryExpr -> . Expr MULTIPLICATION Expr
    (83) ExprBinaryExpr -> . Expr DIVISION Expr
    (84) ExprBinaryExpr -> . Expr MODULO Expr
    (85) ExprBinaryExpr -> . Expr AND Expr
    (86) ExprBinaryExpr -> . Expr OR Expr
    (87) ExprBinaryExpr -> . Expr CONCAT Expr
    (88) ExprBinaryExpr -> . Expr LESS Expr
    (89) ExprBinaryExpr -> . Expr LESSEQUAL Expr
    (90) ExprBinaryExpr -> . Expr GREATER Expr
    (91) ExprBinaryExpr -> . Expr GREATEREQUAL Expr
    (92) ExprBinaryExpr -> . Expr EQUAL Expr
    (93) ExprBinaryExpr -> . Expr NOTEQUAL Expr
    (94) UnaryExpr -> . UnaryMinus
    (95) UnaryExpr -> . NOT
    (97) Literal -> . INT
    (98) Literal -> . STRING
    (99) Literal -> . TRUE
    (100) Literal -> . FALSE
    (101) Literal -> . NULL
    (103) Number -> . CIENTIFIC
    (104) Number -> . HEXADEC
    (105) Number -> . NUMBER
    (106) Number -> . BINARY
    (107) Number -> . FLOAT
    (102) ParentExprParent -> . LEFTPARENT Expr RIGHTPARENT
    (53) Method -> . IDEN
    (54) Method -> . Expr DOT IDEN
    (96) UnaryMinus -> . SUBSTRACTION Expr

    THIS            shift and go to state 90
    IDEN            shift and go to state 57
    NEW             shift and go to state 64
    NOT             shift and go to state 96
    INT             shift and go to state 75
    STRING          shift and go to state 77
    TRUE            shift and go to state 69
    FALSE           shift and go to state 89
    NULL            shift and go to state 65
    CIENTIFIC       shift and go to state 70
    HEXADEC         shift and go to state 81
    NUMBER          shift and go to state 98
    BINARY          shift and go to state 78
    FLOAT           shift and go to state 91
    LEFTPARENT      shift and go to state 84
    SUBSTRACTION    shift and go to state 97

    ExprBinaryExpr                 shift and go to state 88
    Method                         shift and go to state 66
    ExprLength                     shift and go to state 68
    NewTypeExpr                    shift and go to state 79
    Expr                           shift and go to state 154
    UnaryExpr                      shift and go to state 82
    Number                         shift and go to state 74
    Literal                        shift and go to state 92
    NewId                          shift and go to state 73
    Location                       shift and go to state 102
    Call                           shift and go to state 101
    ParentExprParent               shift and go to state 59
    UnaryMinus                     shift and go to state 93

state 122

    (89) ExprBinaryExpr -> Expr LESSEQUAL . Expr
    (66) Expr -> . Location
    (67) Expr -> . Call
    (68) Expr -> . THIS
    (69) Expr -> . NewId
    (70) Expr -> . NewTypeExpr
    (71) Expr -> . ExprLength
    (72) Expr -> . ExprBinaryExpr
    (73) Expr -> . UnaryExpr
    (74) Expr -> . Literal
    (75) Expr -> . Number
    (76) Expr -> . ParentExprParent
    (49) Location -> . IDEN
    (50) Location -> . Expr DOT IDEN
    (51) Location -> . Expr LEFTSQRBRACKET Expr RIGHTSQRBRACKET
    (52) Call -> . Method LEFTPARENT Actuals RIGHTPARENT
    (77) NewId -> . NEW IDEN LEFTPARENT RIGHTPARENT
    (78) NewTypeExpr -> . NEW Type LEFTSQRBRACKET Expr LEFTSQRBRACKET
    (79) ExprLength -> . Expr DOT LENGTH
    (80) ExprBinaryExpr -> . Expr ADDITION Expr
    (81) ExprBinaryExpr -> . Expr SUBSTRACTION Expr
    (82) ExprBinaryExpr -> . Expr MULTIPLICATION Expr
    (83) ExprBinaryExpr -> . Expr DIVISION Expr
    (84) ExprBinaryExpr -> . Expr MODULO Expr
    (85) ExprBinaryExpr -> . Expr AND Expr
    (86) ExprBinaryExpr -> . Expr OR Expr
    (87) ExprBinaryExpr -> . Expr CONCAT Expr
    (88) ExprBinaryExpr -> . Expr LESS Expr
    (89) ExprBinaryExpr -> . Expr LESSEQUAL Expr
    (90) ExprBinaryExpr -> . Expr GREATER Expr
    (91) ExprBinaryExpr -> . Expr GREATEREQUAL Expr
    (92) ExprBinaryExpr -> . Expr EQUAL Expr
    (93) ExprBinaryExpr -> . Expr NOTEQUAL Expr
    (94) UnaryExpr -> . UnaryMinus
    (95) UnaryExpr -> . NOT
    (97) Literal -> . INT
    (98) Literal -> . STRING
    (99) Literal -> . TRUE
    (100) Literal -> . FALSE
    (101) Literal -> . NULL
    (103) Number -> . CIENTIFIC
    (104) Number -> . HEXADEC
    (105) Number -> . NUMBER
    (106) Number -> . BINARY
    (107) Number -> . FLOAT
    (102) ParentExprParent -> . LEFTPARENT Expr RIGHTPARENT
    (53) Method -> . IDEN
    (54) Method -> . Expr DOT IDEN
    (96) UnaryMinus -> . SUBSTRACTION Expr

    THIS            shift and go to state 90
    IDEN            shift and go to state 57
    NEW             shift and go to state 64
    NOT             shift and go to state 96
    INT             shift and go to state 75
    STRING          shift and go to state 77
    TRUE            shift and go to state 69
    FALSE           shift and go to state 89
    NULL            shift and go to state 65
    CIENTIFIC       shift and go to state 70
    HEXADEC         shift and go to state 81
    NUMBER          shift and go to state 98
    BINARY          shift and go to state 78
    FLOAT           shift and go to state 91
    LEFTPARENT      shift and go to state 84
    SUBSTRACTION    shift and go to state 97

    ExprBinaryExpr                 shift and go to state 88
    Method                         shift and go to state 66
    ExprLength                     shift and go to state 68
    NewTypeExpr                    shift and go to state 79
    Expr                           shift and go to state 155
    UnaryExpr                      shift and go to state 82
    Number                         shift and go to state 74
    Literal                        shift and go to state 92
    NewId                          shift and go to state 73
    Location                       shift and go to state 102
    Call                           shift and go to state 101
    ParentExprParent               shift and go to state 59
    UnaryMinus                     shift and go to state 93

state 123

    (93) ExprBinaryExpr -> Expr NOTEQUAL . Expr
    (66) Expr -> . Location
    (67) Expr -> . Call
    (68) Expr -> . THIS
    (69) Expr -> . NewId
    (70) Expr -> . NewTypeExpr
    (71) Expr -> . ExprLength
    (72) Expr -> . ExprBinaryExpr
    (73) Expr -> . UnaryExpr
    (74) Expr -> . Literal
    (75) Expr -> . Number
    (76) Expr -> . ParentExprParent
    (49) Location -> . IDEN
    (50) Location -> . Expr DOT IDEN
    (51) Location -> . Expr LEFTSQRBRACKET Expr RIGHTSQRBRACKET
    (52) Call -> . Method LEFTPARENT Actuals RIGHTPARENT
    (77) NewId -> . NEW IDEN LEFTPARENT RIGHTPARENT
    (78) NewTypeExpr -> . NEW Type LEFTSQRBRACKET Expr LEFTSQRBRACKET
    (79) ExprLength -> . Expr DOT LENGTH
    (80) ExprBinaryExpr -> . Expr ADDITION Expr
    (81) ExprBinaryExpr -> . Expr SUBSTRACTION Expr
    (82) ExprBinaryExpr -> . Expr MULTIPLICATION Expr
    (83) ExprBinaryExpr -> . Expr DIVISION Expr
    (84) ExprBinaryExpr -> . Expr MODULO Expr
    (85) ExprBinaryExpr -> . Expr AND Expr
    (86) ExprBinaryExpr -> . Expr OR Expr
    (87) ExprBinaryExpr -> . Expr CONCAT Expr
    (88) ExprBinaryExpr -> . Expr LESS Expr
    (89) ExprBinaryExpr -> . Expr LESSEQUAL Expr
    (90) ExprBinaryExpr -> . Expr GREATER Expr
    (91) ExprBinaryExpr -> . Expr GREATEREQUAL Expr
    (92) ExprBinaryExpr -> . Expr EQUAL Expr
    (93) ExprBinaryExpr -> . Expr NOTEQUAL Expr
    (94) UnaryExpr -> . UnaryMinus
    (95) UnaryExpr -> . NOT
    (97) Literal -> . INT
    (98) Literal -> . STRING
    (99) Literal -> . TRUE
    (100) Literal -> . FALSE
    (101) Literal -> . NULL
    (103) Number -> . CIENTIFIC
    (104) Number -> . HEXADEC
    (105) Number -> . NUMBER
    (106) Number -> . BINARY
    (107) Number -> . FLOAT
    (102) ParentExprParent -> . LEFTPARENT Expr RIGHTPARENT
    (53) Method -> . IDEN
    (54) Method -> . Expr DOT IDEN
    (96) UnaryMinus -> . SUBSTRACTION Expr

    THIS            shift and go to state 90
    IDEN            shift and go to state 57
    NEW             shift and go to state 64
    NOT             shift and go to state 96
    INT             shift and go to state 75
    STRING          shift and go to state 77
    TRUE            shift and go to state 69
    FALSE           shift and go to state 89
    NULL            shift and go to state 65
    CIENTIFIC       shift and go to state 70
    HEXADEC         shift and go to state 81
    NUMBER          shift and go to state 98
    BINARY          shift and go to state 78
    FLOAT           shift and go to state 91
    LEFTPARENT      shift and go to state 84
    SUBSTRACTION    shift and go to state 97

    ExprBinaryExpr                 shift and go to state 88
    Method                         shift and go to state 66
    ExprLength                     shift and go to state 68
    NewTypeExpr                    shift and go to state 79
    Expr                           shift and go to state 156
    UnaryExpr                      shift and go to state 82
    Number                         shift and go to state 74
    Literal                        shift and go to state 92
    NewId                          shift and go to state 73
    Location                       shift and go to state 102
    Call                           shift and go to state 101
    ParentExprParent               shift and go to state 59
    UnaryMinus                     shift and go to state 93

state 124

    (87) ExprBinaryExpr -> Expr CONCAT . Expr
    (66) Expr -> . Location
    (67) Expr -> . Call
    (68) Expr -> . THIS
    (69) Expr -> . NewId
    (70) Expr -> . NewTypeExpr
    (71) Expr -> . ExprLength
    (72) Expr -> . ExprBinaryExpr
    (73) Expr -> . UnaryExpr
    (74) Expr -> . Literal
    (75) Expr -> . Number
    (76) Expr -> . ParentExprParent
    (49) Location -> . IDEN
    (50) Location -> . Expr DOT IDEN
    (51) Location -> . Expr LEFTSQRBRACKET Expr RIGHTSQRBRACKET
    (52) Call -> . Method LEFTPARENT Actuals RIGHTPARENT
    (77) NewId -> . NEW IDEN LEFTPARENT RIGHTPARENT
    (78) NewTypeExpr -> . NEW Type LEFTSQRBRACKET Expr LEFTSQRBRACKET
    (79) ExprLength -> . Expr DOT LENGTH
    (80) ExprBinaryExpr -> . Expr ADDITION Expr
    (81) ExprBinaryExpr -> . Expr SUBSTRACTION Expr
    (82) ExprBinaryExpr -> . Expr MULTIPLICATION Expr
    (83) ExprBinaryExpr -> . Expr DIVISION Expr
    (84) ExprBinaryExpr -> . Expr MODULO Expr
    (85) ExprBinaryExpr -> . Expr AND Expr
    (86) ExprBinaryExpr -> . Expr OR Expr
    (87) ExprBinaryExpr -> . Expr CONCAT Expr
    (88) ExprBinaryExpr -> . Expr LESS Expr
    (89) ExprBinaryExpr -> . Expr LESSEQUAL Expr
    (90) ExprBinaryExpr -> . Expr GREATER Expr
    (91) ExprBinaryExpr -> . Expr GREATEREQUAL Expr
    (92) ExprBinaryExpr -> . Expr EQUAL Expr
    (93) ExprBinaryExpr -> . Expr NOTEQUAL Expr
    (94) UnaryExpr -> . UnaryMinus
    (95) UnaryExpr -> . NOT
    (97) Literal -> . INT
    (98) Literal -> . STRING
    (99) Literal -> . TRUE
    (100) Literal -> . FALSE
    (101) Literal -> . NULL
    (103) Number -> . CIENTIFIC
    (104) Number -> . HEXADEC
    (105) Number -> . NUMBER
    (106) Number -> . BINARY
    (107) Number -> . FLOAT
    (102) ParentExprParent -> . LEFTPARENT Expr RIGHTPARENT
    (53) Method -> . IDEN
    (54) Method -> . Expr DOT IDEN
    (96) UnaryMinus -> . SUBSTRACTION Expr

    THIS            shift and go to state 90
    IDEN            shift and go to state 57
    NEW             shift and go to state 64
    NOT             shift and go to state 96
    INT             shift and go to state 75
    STRING          shift and go to state 77
    TRUE            shift and go to state 69
    FALSE           shift and go to state 89
    NULL            shift and go to state 65
    CIENTIFIC       shift and go to state 70
    HEXADEC         shift and go to state 81
    NUMBER          shift and go to state 98
    BINARY          shift and go to state 78
    FLOAT           shift and go to state 91
    LEFTPARENT      shift and go to state 84
    SUBSTRACTION    shift and go to state 97

    ExprBinaryExpr                 shift and go to state 88
    Method                         shift and go to state 66
    ExprLength                     shift and go to state 68
    NewTypeExpr                    shift and go to state 79
    Expr                           shift and go to state 157
    UnaryExpr                      shift and go to state 82
    Number                         shift and go to state 74
    Literal                        shift and go to state 92
    NewId                          shift and go to state 73
    Location                       shift and go to state 102
    Call                           shift and go to state 101
    ParentExprParent               shift and go to state 59
    UnaryMinus                     shift and go to state 93

state 125

    (92) ExprBinaryExpr -> Expr EQUAL . Expr
    (66) Expr -> . Location
    (67) Expr -> . Call
    (68) Expr -> . THIS
    (69) Expr -> . NewId
    (70) Expr -> . NewTypeExpr
    (71) Expr -> . ExprLength
    (72) Expr -> . ExprBinaryExpr
    (73) Expr -> . UnaryExpr
    (74) Expr -> . Literal
    (75) Expr -> . Number
    (76) Expr -> . ParentExprParent
    (49) Location -> . IDEN
    (50) Location -> . Expr DOT IDEN
    (51) Location -> . Expr LEFTSQRBRACKET Expr RIGHTSQRBRACKET
    (52) Call -> . Method LEFTPARENT Actuals RIGHTPARENT
    (77) NewId -> . NEW IDEN LEFTPARENT RIGHTPARENT
    (78) NewTypeExpr -> . NEW Type LEFTSQRBRACKET Expr LEFTSQRBRACKET
    (79) ExprLength -> . Expr DOT LENGTH
    (80) ExprBinaryExpr -> . Expr ADDITION Expr
    (81) ExprBinaryExpr -> . Expr SUBSTRACTION Expr
    (82) ExprBinaryExpr -> . Expr MULTIPLICATION Expr
    (83) ExprBinaryExpr -> . Expr DIVISION Expr
    (84) ExprBinaryExpr -> . Expr MODULO Expr
    (85) ExprBinaryExpr -> . Expr AND Expr
    (86) ExprBinaryExpr -> . Expr OR Expr
    (87) ExprBinaryExpr -> . Expr CONCAT Expr
    (88) ExprBinaryExpr -> . Expr LESS Expr
    (89) ExprBinaryExpr -> . Expr LESSEQUAL Expr
    (90) ExprBinaryExpr -> . Expr GREATER Expr
    (91) ExprBinaryExpr -> . Expr GREATEREQUAL Expr
    (92) ExprBinaryExpr -> . Expr EQUAL Expr
    (93) ExprBinaryExpr -> . Expr NOTEQUAL Expr
    (94) UnaryExpr -> . UnaryMinus
    (95) UnaryExpr -> . NOT
    (97) Literal -> . INT
    (98) Literal -> . STRING
    (99) Literal -> . TRUE
    (100) Literal -> . FALSE
    (101) Literal -> . NULL
    (103) Number -> . CIENTIFIC
    (104) Number -> . HEXADEC
    (105) Number -> . NUMBER
    (106) Number -> . BINARY
    (107) Number -> . FLOAT
    (102) ParentExprParent -> . LEFTPARENT Expr RIGHTPARENT
    (53) Method -> . IDEN
    (54) Method -> . Expr DOT IDEN
    (96) UnaryMinus -> . SUBSTRACTION Expr

    THIS            shift and go to state 90
    IDEN            shift and go to state 57
    NEW             shift and go to state 64
    NOT             shift and go to state 96
    INT             shift and go to state 75
    STRING          shift and go to state 77
    TRUE            shift and go to state 69
    FALSE           shift and go to state 89
    NULL            shift and go to state 65
    CIENTIFIC       shift and go to state 70
    HEXADEC         shift and go to state 81
    NUMBER          shift and go to state 98
    BINARY          shift and go to state 78
    FLOAT           shift and go to state 91
    LEFTPARENT      shift and go to state 84
    SUBSTRACTION    shift and go to state 97

    ExprBinaryExpr                 shift and go to state 88
    Method                         shift and go to state 66
    ExprLength                     shift and go to state 68
    NewTypeExpr                    shift and go to state 79
    Expr                           shift and go to state 158
    UnaryExpr                      shift and go to state 82
    Number                         shift and go to state 74
    Literal                        shift and go to state 92
    NewId                          shift and go to state 73
    Location                       shift and go to state 102
    Call                           shift and go to state 101
    ParentExprParent               shift and go to state 59
    UnaryMinus                     shift and go to state 93

state 126

    (82) ExprBinaryExpr -> Expr MULTIPLICATION . Expr
    (66) Expr -> . Location
    (67) Expr -> . Call
    (68) Expr -> . THIS
    (69) Expr -> . NewId
    (70) Expr -> . NewTypeExpr
    (71) Expr -> . ExprLength
    (72) Expr -> . ExprBinaryExpr
    (73) Expr -> . UnaryExpr
    (74) Expr -> . Literal
    (75) Expr -> . Number
    (76) Expr -> . ParentExprParent
    (49) Location -> . IDEN
    (50) Location -> . Expr DOT IDEN
    (51) Location -> . Expr LEFTSQRBRACKET Expr RIGHTSQRBRACKET
    (52) Call -> . Method LEFTPARENT Actuals RIGHTPARENT
    (77) NewId -> . NEW IDEN LEFTPARENT RIGHTPARENT
    (78) NewTypeExpr -> . NEW Type LEFTSQRBRACKET Expr LEFTSQRBRACKET
    (79) ExprLength -> . Expr DOT LENGTH
    (80) ExprBinaryExpr -> . Expr ADDITION Expr
    (81) ExprBinaryExpr -> . Expr SUBSTRACTION Expr
    (82) ExprBinaryExpr -> . Expr MULTIPLICATION Expr
    (83) ExprBinaryExpr -> . Expr DIVISION Expr
    (84) ExprBinaryExpr -> . Expr MODULO Expr
    (85) ExprBinaryExpr -> . Expr AND Expr
    (86) ExprBinaryExpr -> . Expr OR Expr
    (87) ExprBinaryExpr -> . Expr CONCAT Expr
    (88) ExprBinaryExpr -> . Expr LESS Expr
    (89) ExprBinaryExpr -> . Expr LESSEQUAL Expr
    (90) ExprBinaryExpr -> . Expr GREATER Expr
    (91) ExprBinaryExpr -> . Expr GREATEREQUAL Expr
    (92) ExprBinaryExpr -> . Expr EQUAL Expr
    (93) ExprBinaryExpr -> . Expr NOTEQUAL Expr
    (94) UnaryExpr -> . UnaryMinus
    (95) UnaryExpr -> . NOT
    (97) Literal -> . INT
    (98) Literal -> . STRING
    (99) Literal -> . TRUE
    (100) Literal -> . FALSE
    (101) Literal -> . NULL
    (103) Number -> . CIENTIFIC
    (104) Number -> . HEXADEC
    (105) Number -> . NUMBER
    (106) Number -> . BINARY
    (107) Number -> . FLOAT
    (102) ParentExprParent -> . LEFTPARENT Expr RIGHTPARENT
    (53) Method -> . IDEN
    (54) Method -> . Expr DOT IDEN
    (96) UnaryMinus -> . SUBSTRACTION Expr

    THIS            shift and go to state 90
    IDEN            shift and go to state 57
    NEW             shift and go to state 64
    NOT             shift and go to state 96
    INT             shift and go to state 75
    STRING          shift and go to state 77
    TRUE            shift and go to state 69
    FALSE           shift and go to state 89
    NULL            shift and go to state 65
    CIENTIFIC       shift and go to state 70
    HEXADEC         shift and go to state 81
    NUMBER          shift and go to state 98
    BINARY          shift and go to state 78
    FLOAT           shift and go to state 91
    LEFTPARENT      shift and go to state 84
    SUBSTRACTION    shift and go to state 97

    ExprBinaryExpr                 shift and go to state 88
    Method                         shift and go to state 66
    ExprLength                     shift and go to state 68
    NewTypeExpr                    shift and go to state 79
    Expr                           shift and go to state 159
    UnaryExpr                      shift and go to state 82
    Number                         shift and go to state 74
    Literal                        shift and go to state 92
    NewId                          shift and go to state 73
    Location                       shift and go to state 102
    Call                           shift and go to state 101
    ParentExprParent               shift and go to state 59
    UnaryMinus                     shift and go to state 93

state 127

    (81) ExprBinaryExpr -> Expr SUBSTRACTION . Expr
    (66) Expr -> . Location
    (67) Expr -> . Call
    (68) Expr -> . THIS
    (69) Expr -> . NewId
    (70) Expr -> . NewTypeExpr
    (71) Expr -> . ExprLength
    (72) Expr -> . ExprBinaryExpr
    (73) Expr -> . UnaryExpr
    (74) Expr -> . Literal
    (75) Expr -> . Number
    (76) Expr -> . ParentExprParent
    (49) Location -> . IDEN
    (50) Location -> . Expr DOT IDEN
    (51) Location -> . Expr LEFTSQRBRACKET Expr RIGHTSQRBRACKET
    (52) Call -> . Method LEFTPARENT Actuals RIGHTPARENT
    (77) NewId -> . NEW IDEN LEFTPARENT RIGHTPARENT
    (78) NewTypeExpr -> . NEW Type LEFTSQRBRACKET Expr LEFTSQRBRACKET
    (79) ExprLength -> . Expr DOT LENGTH
    (80) ExprBinaryExpr -> . Expr ADDITION Expr
    (81) ExprBinaryExpr -> . Expr SUBSTRACTION Expr
    (82) ExprBinaryExpr -> . Expr MULTIPLICATION Expr
    (83) ExprBinaryExpr -> . Expr DIVISION Expr
    (84) ExprBinaryExpr -> . Expr MODULO Expr
    (85) ExprBinaryExpr -> . Expr AND Expr
    (86) ExprBinaryExpr -> . Expr OR Expr
    (87) ExprBinaryExpr -> . Expr CONCAT Expr
    (88) ExprBinaryExpr -> . Expr LESS Expr
    (89) ExprBinaryExpr -> . Expr LESSEQUAL Expr
    (90) ExprBinaryExpr -> . Expr GREATER Expr
    (91) ExprBinaryExpr -> . Expr GREATEREQUAL Expr
    (92) ExprBinaryExpr -> . Expr EQUAL Expr
    (93) ExprBinaryExpr -> . Expr NOTEQUAL Expr
    (94) UnaryExpr -> . UnaryMinus
    (95) UnaryExpr -> . NOT
    (97) Literal -> . INT
    (98) Literal -> . STRING
    (99) Literal -> . TRUE
    (100) Literal -> . FALSE
    (101) Literal -> . NULL
    (103) Number -> . CIENTIFIC
    (104) Number -> . HEXADEC
    (105) Number -> . NUMBER
    (106) Number -> . BINARY
    (107) Number -> . FLOAT
    (102) ParentExprParent -> . LEFTPARENT Expr RIGHTPARENT
    (53) Method -> . IDEN
    (54) Method -> . Expr DOT IDEN
    (96) UnaryMinus -> . SUBSTRACTION Expr

    THIS            shift and go to state 90
    IDEN            shift and go to state 57
    NEW             shift and go to state 64
    NOT             shift and go to state 96
    INT             shift and go to state 75
    STRING          shift and go to state 77
    TRUE            shift and go to state 69
    FALSE           shift and go to state 89
    NULL            shift and go to state 65
    CIENTIFIC       shift and go to state 70
    HEXADEC         shift and go to state 81
    NUMBER          shift and go to state 98
    BINARY          shift and go to state 78
    FLOAT           shift and go to state 91
    LEFTPARENT      shift and go to state 84
    SUBSTRACTION    shift and go to state 97

    ExprBinaryExpr                 shift and go to state 88
    Method                         shift and go to state 66
    ExprLength                     shift and go to state 68
    NewTypeExpr                    shift and go to state 79
    Expr                           shift and go to state 160
    UnaryExpr                      shift and go to state 82
    Number                         shift and go to state 74
    Literal                        shift and go to state 92
    NewId                          shift and go to state 73
    Location                       shift and go to state 102
    Call                           shift and go to state 101
    ParentExprParent               shift and go to state 59
    UnaryMinus                     shift and go to state 93

state 128

    (86) ExprBinaryExpr -> Expr OR . Expr
    (66) Expr -> . Location
    (67) Expr -> . Call
    (68) Expr -> . THIS
    (69) Expr -> . NewId
    (70) Expr -> . NewTypeExpr
    (71) Expr -> . ExprLength
    (72) Expr -> . ExprBinaryExpr
    (73) Expr -> . UnaryExpr
    (74) Expr -> . Literal
    (75) Expr -> . Number
    (76) Expr -> . ParentExprParent
    (49) Location -> . IDEN
    (50) Location -> . Expr DOT IDEN
    (51) Location -> . Expr LEFTSQRBRACKET Expr RIGHTSQRBRACKET
    (52) Call -> . Method LEFTPARENT Actuals RIGHTPARENT
    (77) NewId -> . NEW IDEN LEFTPARENT RIGHTPARENT
    (78) NewTypeExpr -> . NEW Type LEFTSQRBRACKET Expr LEFTSQRBRACKET
    (79) ExprLength -> . Expr DOT LENGTH
    (80) ExprBinaryExpr -> . Expr ADDITION Expr
    (81) ExprBinaryExpr -> . Expr SUBSTRACTION Expr
    (82) ExprBinaryExpr -> . Expr MULTIPLICATION Expr
    (83) ExprBinaryExpr -> . Expr DIVISION Expr
    (84) ExprBinaryExpr -> . Expr MODULO Expr
    (85) ExprBinaryExpr -> . Expr AND Expr
    (86) ExprBinaryExpr -> . Expr OR Expr
    (87) ExprBinaryExpr -> . Expr CONCAT Expr
    (88) ExprBinaryExpr -> . Expr LESS Expr
    (89) ExprBinaryExpr -> . Expr LESSEQUAL Expr
    (90) ExprBinaryExpr -> . Expr GREATER Expr
    (91) ExprBinaryExpr -> . Expr GREATEREQUAL Expr
    (92) ExprBinaryExpr -> . Expr EQUAL Expr
    (93) ExprBinaryExpr -> . Expr NOTEQUAL Expr
    (94) UnaryExpr -> . UnaryMinus
    (95) UnaryExpr -> . NOT
    (97) Literal -> . INT
    (98) Literal -> . STRING
    (99) Literal -> . TRUE
    (100) Literal -> . FALSE
    (101) Literal -> . NULL
    (103) Number -> . CIENTIFIC
    (104) Number -> . HEXADEC
    (105) Number -> . NUMBER
    (106) Number -> . BINARY
    (107) Number -> . FLOAT
    (102) ParentExprParent -> . LEFTPARENT Expr RIGHTPARENT
    (53) Method -> . IDEN
    (54) Method -> . Expr DOT IDEN
    (96) UnaryMinus -> . SUBSTRACTION Expr

    THIS            shift and go to state 90
    IDEN            shift and go to state 57
    NEW             shift and go to state 64
    NOT             shift and go to state 96
    INT             shift and go to state 75
    STRING          shift and go to state 77
    TRUE            shift and go to state 69
    FALSE           shift and go to state 89
    NULL            shift and go to state 65
    CIENTIFIC       shift and go to state 70
    HEXADEC         shift and go to state 81
    NUMBER          shift and go to state 98
    BINARY          shift and go to state 78
    FLOAT           shift and go to state 91
    LEFTPARENT      shift and go to state 84
    SUBSTRACTION    shift and go to state 97

    ExprBinaryExpr                 shift and go to state 88
    Method                         shift and go to state 66
    ExprLength                     shift and go to state 68
    NewTypeExpr                    shift and go to state 79
    Expr                           shift and go to state 161
    UnaryExpr                      shift and go to state 82
    Number                         shift and go to state 74
    Literal                        shift and go to state 92
    NewId                          shift and go to state 73
    Location                       shift and go to state 102
    Call                           shift and go to state 101
    ParentExprParent               shift and go to state 59
    UnaryMinus                     shift and go to state 93

state 129

    (50) Location -> Expr DOT . IDEN
    (54) Method -> Expr DOT . IDEN
    (79) ExprLength -> Expr DOT . LENGTH

    IDEN            shift and go to state 162
    LENGTH          shift and go to state 163


state 130

    (102) ParentExprParent -> LEFTPARENT Expr . RIGHTPARENT
    (50) Location -> Expr . DOT IDEN
    (51) Location -> Expr . LEFTSQRBRACKET Expr RIGHTSQRBRACKET
    (79) ExprLength -> Expr . DOT LENGTH
    (80) ExprBinaryExpr -> Expr . ADDITION Expr
    (81) ExprBinaryExpr -> Expr . SUBSTRACTION Expr
    (82) ExprBinaryExpr -> Expr . MULTIPLICATION Expr
    (83) ExprBinaryExpr -> Expr . DIVISION Expr
    (84) ExprBinaryExpr -> Expr . MODULO Expr
    (85) ExprBinaryExpr -> Expr . AND Expr
    (86) ExprBinaryExpr -> Expr . OR Expr
    (87) ExprBinaryExpr -> Expr . CONCAT Expr
    (88) ExprBinaryExpr -> Expr . LESS Expr
    (89) ExprBinaryExpr -> Expr . LESSEQUAL Expr
    (90) ExprBinaryExpr -> Expr . GREATER Expr
    (91) ExprBinaryExpr -> Expr . GREATEREQUAL Expr
    (92) ExprBinaryExpr -> Expr . EQUAL Expr
    (93) ExprBinaryExpr -> Expr . NOTEQUAL Expr
    (54) Method -> Expr . DOT IDEN

    RIGHTPARENT     shift and go to state 164
    DOT             shift and go to state 139
    LEFTSQRBRACKET  shift and go to state 121
    ADDITION        shift and go to state 119
    SUBSTRACTION    shift and go to state 127
    MULTIPLICATION  shift and go to state 126
    DIVISION        shift and go to state 115
    MODULO          shift and go to state 116
    AND             shift and go to state 114
    OR              shift and go to state 128
    CONCAT          shift and go to state 124
    LESS            shift and go to state 118
    LESSEQUAL       shift and go to state 122
    GREATER         shift and go to state 117
    GREATEREQUAL    shift and go to state 120
    EQUAL           shift and go to state 125
    NOTEQUAL        shift and go to state 123


state 131

    (40) Stmt -> Assign SEMICOLON .

    RETURN          reduce using rule 40 (Stmt -> Assign SEMICOLON .)
    IF              reduce using rule 40 (Stmt -> Assign SEMICOLON .)
    BREAK           reduce using rule 40 (Stmt -> Assign SEMICOLON .)
    CONTINUE        reduce using rule 40 (Stmt -> Assign SEMICOLON .)
    IDEN            reduce using rule 40 (Stmt -> Assign SEMICOLON .)
    WHILE           reduce using rule 40 (Stmt -> Assign SEMICOLON .)
    LEFTBRACE       reduce using rule 40 (Stmt -> Assign SEMICOLON .)
    THIS            reduce using rule 40 (Stmt -> Assign SEMICOLON .)
    NEW             reduce using rule 40 (Stmt -> Assign SEMICOLON .)
    INT             reduce using rule 40 (Stmt -> Assign SEMICOLON .)
    STRING          reduce using rule 40 (Stmt -> Assign SEMICOLON .)
    TRUE            reduce using rule 40 (Stmt -> Assign SEMICOLON .)
    FALSE           reduce using rule 40 (Stmt -> Assign SEMICOLON .)
    NULL            reduce using rule 40 (Stmt -> Assign SEMICOLON .)
    LEFTPARENT      reduce using rule 40 (Stmt -> Assign SEMICOLON .)
    NOT             reduce using rule 40 (Stmt -> Assign SEMICOLON .)
    CIENTIFIC       reduce using rule 40 (Stmt -> Assign SEMICOLON .)
    HEXADEC         reduce using rule 40 (Stmt -> Assign SEMICOLON .)
    NUMBER          reduce using rule 40 (Stmt -> Assign SEMICOLON .)
    BINARY          reduce using rule 40 (Stmt -> Assign SEMICOLON .)
    FLOAT           reduce using rule 40 (Stmt -> Assign SEMICOLON .)
    SUBSTRACTION    reduce using rule 40 (Stmt -> Assign SEMICOLON .)
    RIGHTBRACE      reduce using rule 40 (Stmt -> Assign SEMICOLON .)
    ELSE            reduce using rule 40 (Stmt -> Assign SEMICOLON .)


state 132

    (62) IfStmt -> IF LEFTPARENT . Expr RIGHTPARENT Stmt ElseStmt
    (66) Expr -> . Location
    (67) Expr -> . Call
    (68) Expr -> . THIS
    (69) Expr -> . NewId
    (70) Expr -> . NewTypeExpr
    (71) Expr -> . ExprLength
    (72) Expr -> . ExprBinaryExpr
    (73) Expr -> . UnaryExpr
    (74) Expr -> . Literal
    (75) Expr -> . Number
    (76) Expr -> . ParentExprParent
    (49) Location -> . IDEN
    (50) Location -> . Expr DOT IDEN
    (51) Location -> . Expr LEFTSQRBRACKET Expr RIGHTSQRBRACKET
    (52) Call -> . Method LEFTPARENT Actuals RIGHTPARENT
    (77) NewId -> . NEW IDEN LEFTPARENT RIGHTPARENT
    (78) NewTypeExpr -> . NEW Type LEFTSQRBRACKET Expr LEFTSQRBRACKET
    (79) ExprLength -> . Expr DOT LENGTH
    (80) ExprBinaryExpr -> . Expr ADDITION Expr
    (81) ExprBinaryExpr -> . Expr SUBSTRACTION Expr
    (82) ExprBinaryExpr -> . Expr MULTIPLICATION Expr
    (83) ExprBinaryExpr -> . Expr DIVISION Expr
    (84) ExprBinaryExpr -> . Expr MODULO Expr
    (85) ExprBinaryExpr -> . Expr AND Expr
    (86) ExprBinaryExpr -> . Expr OR Expr
    (87) ExprBinaryExpr -> . Expr CONCAT Expr
    (88) ExprBinaryExpr -> . Expr LESS Expr
    (89) ExprBinaryExpr -> . Expr LESSEQUAL Expr
    (90) ExprBinaryExpr -> . Expr GREATER Expr
    (91) ExprBinaryExpr -> . Expr GREATEREQUAL Expr
    (92) ExprBinaryExpr -> . Expr EQUAL Expr
    (93) ExprBinaryExpr -> . Expr NOTEQUAL Expr
    (94) UnaryExpr -> . UnaryMinus
    (95) UnaryExpr -> . NOT
    (97) Literal -> . INT
    (98) Literal -> . STRING
    (99) Literal -> . TRUE
    (100) Literal -> . FALSE
    (101) Literal -> . NULL
    (103) Number -> . CIENTIFIC
    (104) Number -> . HEXADEC
    (105) Number -> . NUMBER
    (106) Number -> . BINARY
    (107) Number -> . FLOAT
    (102) ParentExprParent -> . LEFTPARENT Expr RIGHTPARENT
    (53) Method -> . IDEN
    (54) Method -> . Expr DOT IDEN
    (96) UnaryMinus -> . SUBSTRACTION Expr

    THIS            shift and go to state 90
    IDEN            shift and go to state 57
    NEW             shift and go to state 64
    NOT             shift and go to state 96
    INT             shift and go to state 75
    STRING          shift and go to state 77
    TRUE            shift and go to state 69
    FALSE           shift and go to state 89
    NULL            shift and go to state 65
    CIENTIFIC       shift and go to state 70
    HEXADEC         shift and go to state 81
    NUMBER          shift and go to state 98
    BINARY          shift and go to state 78
    FLOAT           shift and go to state 91
    LEFTPARENT      shift and go to state 84
    SUBSTRACTION    shift and go to state 97

    ExprBinaryExpr                 shift and go to state 88
    Method                         shift and go to state 66
    ExprLength                     shift and go to state 68
    NewTypeExpr                    shift and go to state 79
    Expr                           shift and go to state 165
    UnaryExpr                      shift and go to state 82
    Number                         shift and go to state 74
    Literal                        shift and go to state 92
    NewId                          shift and go to state 73
    Location                       shift and go to state 102
    ParentExprParent               shift and go to state 59
    Call                           shift and go to state 101
    UnaryMinus                     shift and go to state 93

state 133

    (45) Stmt -> BREAK SEMICOLON .

    RETURN          reduce using rule 45 (Stmt -> BREAK SEMICOLON .)
    IF              reduce using rule 45 (Stmt -> BREAK SEMICOLON .)
    BREAK           reduce using rule 45 (Stmt -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 45 (Stmt -> BREAK SEMICOLON .)
    IDEN            reduce using rule 45 (Stmt -> BREAK SEMICOLON .)
    WHILE           reduce using rule 45 (Stmt -> BREAK SEMICOLON .)
    LEFTBRACE       reduce using rule 45 (Stmt -> BREAK SEMICOLON .)
    THIS            reduce using rule 45 (Stmt -> BREAK SEMICOLON .)
    NEW             reduce using rule 45 (Stmt -> BREAK SEMICOLON .)
    INT             reduce using rule 45 (Stmt -> BREAK SEMICOLON .)
    STRING          reduce using rule 45 (Stmt -> BREAK SEMICOLON .)
    TRUE            reduce using rule 45 (Stmt -> BREAK SEMICOLON .)
    FALSE           reduce using rule 45 (Stmt -> BREAK SEMICOLON .)
    NULL            reduce using rule 45 (Stmt -> BREAK SEMICOLON .)
    LEFTPARENT      reduce using rule 45 (Stmt -> BREAK SEMICOLON .)
    NOT             reduce using rule 45 (Stmt -> BREAK SEMICOLON .)
    CIENTIFIC       reduce using rule 45 (Stmt -> BREAK SEMICOLON .)
    HEXADEC         reduce using rule 45 (Stmt -> BREAK SEMICOLON .)
    NUMBER          reduce using rule 45 (Stmt -> BREAK SEMICOLON .)
    BINARY          reduce using rule 45 (Stmt -> BREAK SEMICOLON .)
    FLOAT           reduce using rule 45 (Stmt -> BREAK SEMICOLON .)
    SUBSTRACTION    reduce using rule 45 (Stmt -> BREAK SEMICOLON .)
    RIGHTBRACE      reduce using rule 45 (Stmt -> BREAK SEMICOLON .)
    ELSE            reduce using rule 45 (Stmt -> BREAK SEMICOLON .)


state 134

    (46) Stmt -> CONTINUE SEMICOLON .

    RETURN          reduce using rule 46 (Stmt -> CONTINUE SEMICOLON .)
    IF              reduce using rule 46 (Stmt -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 46 (Stmt -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 46 (Stmt -> CONTINUE SEMICOLON .)
    IDEN            reduce using rule 46 (Stmt -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 46 (Stmt -> CONTINUE SEMICOLON .)
    LEFTBRACE       reduce using rule 46 (Stmt -> CONTINUE SEMICOLON .)
    THIS            reduce using rule 46 (Stmt -> CONTINUE SEMICOLON .)
    NEW             reduce using rule 46 (Stmt -> CONTINUE SEMICOLON .)
    INT             reduce using rule 46 (Stmt -> CONTINUE SEMICOLON .)
    STRING          reduce using rule 46 (Stmt -> CONTINUE SEMICOLON .)
    TRUE            reduce using rule 46 (Stmt -> CONTINUE SEMICOLON .)
    FALSE           reduce using rule 46 (Stmt -> CONTINUE SEMICOLON .)
    NULL            reduce using rule 46 (Stmt -> CONTINUE SEMICOLON .)
    LEFTPARENT      reduce using rule 46 (Stmt -> CONTINUE SEMICOLON .)
    NOT             reduce using rule 46 (Stmt -> CONTINUE SEMICOLON .)
    CIENTIFIC       reduce using rule 46 (Stmt -> CONTINUE SEMICOLON .)
    HEXADEC         reduce using rule 46 (Stmt -> CONTINUE SEMICOLON .)
    NUMBER          reduce using rule 46 (Stmt -> CONTINUE SEMICOLON .)
    BINARY          reduce using rule 46 (Stmt -> CONTINUE SEMICOLON .)
    FLOAT           reduce using rule 46 (Stmt -> CONTINUE SEMICOLON .)
    SUBSTRACTION    reduce using rule 46 (Stmt -> CONTINUE SEMICOLON .)
    RIGHTBRACE      reduce using rule 46 (Stmt -> CONTINUE SEMICOLON .)
    ELSE            reduce using rule 46 (Stmt -> CONTINUE SEMICOLON .)


state 135

    (96) UnaryMinus -> SUBSTRACTION Expr .
    (50) Location -> Expr . DOT IDEN
    (51) Location -> Expr . LEFTSQRBRACKET Expr RIGHTSQRBRACKET
    (79) ExprLength -> Expr . DOT LENGTH
    (80) ExprBinaryExpr -> Expr . ADDITION Expr
    (81) ExprBinaryExpr -> Expr . SUBSTRACTION Expr
    (82) ExprBinaryExpr -> Expr . MULTIPLICATION Expr
    (83) ExprBinaryExpr -> Expr . DIVISION Expr
    (84) ExprBinaryExpr -> Expr . MODULO Expr
    (85) ExprBinaryExpr -> Expr . AND Expr
    (86) ExprBinaryExpr -> Expr . OR Expr
    (87) ExprBinaryExpr -> Expr . CONCAT Expr
    (88) ExprBinaryExpr -> Expr . LESS Expr
    (89) ExprBinaryExpr -> Expr . LESSEQUAL Expr
    (90) ExprBinaryExpr -> Expr . GREATER Expr
    (91) ExprBinaryExpr -> Expr . GREATEREQUAL Expr
    (92) ExprBinaryExpr -> Expr . EQUAL Expr
    (93) ExprBinaryExpr -> Expr . NOTEQUAL Expr
    (54) Method -> Expr . DOT IDEN

    COMMA           reduce using rule 96 (UnaryMinus -> SUBSTRACTION Expr .)
    SEMICOLON       reduce using rule 96 (UnaryMinus -> SUBSTRACTION Expr .)
    LEFTSQRBRACKET  reduce using rule 96 (UnaryMinus -> SUBSTRACTION Expr .)
    RIGHTSQRBRACKET reduce using rule 96 (UnaryMinus -> SUBSTRACTION Expr .)
    RIGHTPARENT     reduce using rule 96 (UnaryMinus -> SUBSTRACTION Expr .)
    ADDITION        reduce using rule 96 (UnaryMinus -> SUBSTRACTION Expr .)
    SUBSTRACTION    reduce using rule 96 (UnaryMinus -> SUBSTRACTION Expr .)
    MULTIPLICATION  reduce using rule 96 (UnaryMinus -> SUBSTRACTION Expr .)
    DIVISION        reduce using rule 96 (UnaryMinus -> SUBSTRACTION Expr .)
    MODULO          reduce using rule 96 (UnaryMinus -> SUBSTRACTION Expr .)
    AND             reduce using rule 96 (UnaryMinus -> SUBSTRACTION Expr .)
    OR              reduce using rule 96 (UnaryMinus -> SUBSTRACTION Expr .)
    CONCAT          reduce using rule 96 (UnaryMinus -> SUBSTRACTION Expr .)
    LESS            reduce using rule 96 (UnaryMinus -> SUBSTRACTION Expr .)
    LESSEQUAL       reduce using rule 96 (UnaryMinus -> SUBSTRACTION Expr .)
    GREATER         reduce using rule 96 (UnaryMinus -> SUBSTRACTION Expr .)
    GREATEREQUAL    reduce using rule 96 (UnaryMinus -> SUBSTRACTION Expr .)
    EQUAL           reduce using rule 96 (UnaryMinus -> SUBSTRACTION Expr .)
    NOTEQUAL        reduce using rule 96 (UnaryMinus -> SUBSTRACTION Expr .)
    DOT             shift and go to state 139

  ! DOT             [ reduce using rule 96 (UnaryMinus -> SUBSTRACTION Expr .) ]
  ! LEFTSQRBRACKET  [ shift and go to state 121 ]
  ! ADDITION        [ shift and go to state 119 ]
  ! SUBSTRACTION    [ shift and go to state 127 ]
  ! MULTIPLICATION  [ shift and go to state 126 ]
  ! DIVISION        [ shift and go to state 115 ]
  ! MODULO          [ shift and go to state 116 ]
  ! AND             [ shift and go to state 114 ]
  ! OR              [ shift and go to state 128 ]
  ! CONCAT          [ shift and go to state 124 ]
  ! LESS            [ shift and go to state 118 ]
  ! LESSEQUAL       [ shift and go to state 122 ]
  ! GREATER         [ shift and go to state 117 ]
  ! GREATEREQUAL    [ shift and go to state 120 ]
  ! EQUAL           [ shift and go to state 125 ]
  ! NOTEQUAL        [ shift and go to state 123 ]


state 136

    (38) ExpDecl -> ASSIGNMENT . Expr
    (66) Expr -> . Location
    (67) Expr -> . Call
    (68) Expr -> . THIS
    (69) Expr -> . NewId
    (70) Expr -> . NewTypeExpr
    (71) Expr -> . ExprLength
    (72) Expr -> . ExprBinaryExpr
    (73) Expr -> . UnaryExpr
    (74) Expr -> . Literal
    (75) Expr -> . Number
    (76) Expr -> . ParentExprParent
    (49) Location -> . IDEN
    (50) Location -> . Expr DOT IDEN
    (51) Location -> . Expr LEFTSQRBRACKET Expr RIGHTSQRBRACKET
    (52) Call -> . Method LEFTPARENT Actuals RIGHTPARENT
    (77) NewId -> . NEW IDEN LEFTPARENT RIGHTPARENT
    (78) NewTypeExpr -> . NEW Type LEFTSQRBRACKET Expr LEFTSQRBRACKET
    (79) ExprLength -> . Expr DOT LENGTH
    (80) ExprBinaryExpr -> . Expr ADDITION Expr
    (81) ExprBinaryExpr -> . Expr SUBSTRACTION Expr
    (82) ExprBinaryExpr -> . Expr MULTIPLICATION Expr
    (83) ExprBinaryExpr -> . Expr DIVISION Expr
    (84) ExprBinaryExpr -> . Expr MODULO Expr
    (85) ExprBinaryExpr -> . Expr AND Expr
    (86) ExprBinaryExpr -> . Expr OR Expr
    (87) ExprBinaryExpr -> . Expr CONCAT Expr
    (88) ExprBinaryExpr -> . Expr LESS Expr
    (89) ExprBinaryExpr -> . Expr LESSEQUAL Expr
    (90) ExprBinaryExpr -> . Expr GREATER Expr
    (91) ExprBinaryExpr -> . Expr GREATEREQUAL Expr
    (92) ExprBinaryExpr -> . Expr EQUAL Expr
    (93) ExprBinaryExpr -> . Expr NOTEQUAL Expr
    (94) UnaryExpr -> . UnaryMinus
    (95) UnaryExpr -> . NOT
    (97) Literal -> . INT
    (98) Literal -> . STRING
    (99) Literal -> . TRUE
    (100) Literal -> . FALSE
    (101) Literal -> . NULL
    (103) Number -> . CIENTIFIC
    (104) Number -> . HEXADEC
    (105) Number -> . NUMBER
    (106) Number -> . BINARY
    (107) Number -> . FLOAT
    (102) ParentExprParent -> . LEFTPARENT Expr RIGHTPARENT
    (53) Method -> . IDEN
    (54) Method -> . Expr DOT IDEN
    (96) UnaryMinus -> . SUBSTRACTION Expr

    THIS            shift and go to state 90
    IDEN            shift and go to state 57
    NEW             shift and go to state 64
    NOT             shift and go to state 96
    INT             shift and go to state 75
    STRING          shift and go to state 77
    TRUE            shift and go to state 69
    FALSE           shift and go to state 89
    NULL            shift and go to state 65
    CIENTIFIC       shift and go to state 70
    HEXADEC         shift and go to state 81
    NUMBER          shift and go to state 98
    BINARY          shift and go to state 78
    FLOAT           shift and go to state 91
    LEFTPARENT      shift and go to state 84
    SUBSTRACTION    shift and go to state 97

    ExprBinaryExpr                 shift and go to state 88
    Method                         shift and go to state 66
    ExprLength                     shift and go to state 68
    NewTypeExpr                    shift and go to state 79
    Expr                           shift and go to state 166
    UnaryExpr                      shift and go to state 82
    Number                         shift and go to state 74
    Literal                        shift and go to state 92
    NewId                          shift and go to state 73
    Location                       shift and go to state 102
    Call                           shift and go to state 101
    ParentExprParent               shift and go to state 59
    UnaryMinus                     shift and go to state 93

state 137

    (33) VarDeclList -> Type IDEN ExpDecl . ExpDeclList SEMICOLON VarDeclList
    (35) ExpDeclList -> . CommaExpDecl ExpDeclList
    (36) ExpDeclList -> . empty
    (37) CommaExpDecl -> . COMMA IDEN ExpDecl
    (108) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 168
    $end            reduce using rule 108 (empty -> .)
    LEFTBRACE       reduce using rule 108 (empty -> .)
    RIGHTBRACE      reduce using rule 108 (empty -> .)
    SEMICOLON       reduce using rule 108 (empty -> .)
    RIGHTPARENT     reduce using rule 108 (empty -> .)
    RETURN          reduce using rule 108 (empty -> .)
    IF              reduce using rule 108 (empty -> .)
    BREAK           reduce using rule 108 (empty -> .)
    CONTINUE        reduce using rule 108 (empty -> .)
    IDEN            reduce using rule 108 (empty -> .)
    WHILE           reduce using rule 108 (empty -> .)
    THIS            reduce using rule 108 (empty -> .)
    NEW             reduce using rule 108 (empty -> .)
    INT             reduce using rule 108 (empty -> .)
    STRING          reduce using rule 108 (empty -> .)
    TRUE            reduce using rule 108 (empty -> .)
    FALSE           reduce using rule 108 (empty -> .)
    NULL            reduce using rule 108 (empty -> .)
    LEFTPARENT      reduce using rule 108 (empty -> .)
    NOT             reduce using rule 108 (empty -> .)
    CIENTIFIC       reduce using rule 108 (empty -> .)
    HEXADEC         reduce using rule 108 (empty -> .)
    NUMBER          reduce using rule 108 (empty -> .)
    BINARY          reduce using rule 108 (empty -> .)
    FLOAT           reduce using rule 108 (empty -> .)
    SUBSTRACTION    reduce using rule 108 (empty -> .)
    ELSE            reduce using rule 108 (empty -> .)

  ! COMMA           [ reduce using rule 108 (empty -> .) ]

    ExpDeclList                    shift and go to state 167
    CommaExpDecl                   shift and go to state 169
    empty                          shift and go to state 170

state 138

    (39) ExpDecl -> empty .

    COMMA           reduce using rule 39 (ExpDecl -> empty .)
    SEMICOLON       reduce using rule 39 (ExpDecl -> empty .)


state 139

    (50) Location -> Expr DOT . IDEN
    (79) ExprLength -> Expr DOT . LENGTH
    (54) Method -> Expr DOT . IDEN

    IDEN            shift and go to state 162
    LENGTH          shift and go to state 163


state 140

    (59) Return -> RETURN ReturnExpr SEMICOLON .

    RETURN          reduce using rule 59 (Return -> RETURN ReturnExpr SEMICOLON .)
    IF              reduce using rule 59 (Return -> RETURN ReturnExpr SEMICOLON .)
    BREAK           reduce using rule 59 (Return -> RETURN ReturnExpr SEMICOLON .)
    CONTINUE        reduce using rule 59 (Return -> RETURN ReturnExpr SEMICOLON .)
    IDEN            reduce using rule 59 (Return -> RETURN ReturnExpr SEMICOLON .)
    WHILE           reduce using rule 59 (Return -> RETURN ReturnExpr SEMICOLON .)
    LEFTBRACE       reduce using rule 59 (Return -> RETURN ReturnExpr SEMICOLON .)
    THIS            reduce using rule 59 (Return -> RETURN ReturnExpr SEMICOLON .)
    NEW             reduce using rule 59 (Return -> RETURN ReturnExpr SEMICOLON .)
    INT             reduce using rule 59 (Return -> RETURN ReturnExpr SEMICOLON .)
    STRING          reduce using rule 59 (Return -> RETURN ReturnExpr SEMICOLON .)
    TRUE            reduce using rule 59 (Return -> RETURN ReturnExpr SEMICOLON .)
    FALSE           reduce using rule 59 (Return -> RETURN ReturnExpr SEMICOLON .)
    NULL            reduce using rule 59 (Return -> RETURN ReturnExpr SEMICOLON .)
    LEFTPARENT      reduce using rule 59 (Return -> RETURN ReturnExpr SEMICOLON .)
    NOT             reduce using rule 59 (Return -> RETURN ReturnExpr SEMICOLON .)
    CIENTIFIC       reduce using rule 59 (Return -> RETURN ReturnExpr SEMICOLON .)
    HEXADEC         reduce using rule 59 (Return -> RETURN ReturnExpr SEMICOLON .)
    NUMBER          reduce using rule 59 (Return -> RETURN ReturnExpr SEMICOLON .)
    BINARY          reduce using rule 59 (Return -> RETURN ReturnExpr SEMICOLON .)
    FLOAT           reduce using rule 59 (Return -> RETURN ReturnExpr SEMICOLON .)
    SUBSTRACTION    reduce using rule 59 (Return -> RETURN ReturnExpr SEMICOLON .)
    RIGHTBRACE      reduce using rule 59 (Return -> RETURN ReturnExpr SEMICOLON .)
    ELSE            reduce using rule 59 (Return -> RETURN ReturnExpr SEMICOLON .)


state 141

    (65) WhileStmt -> WHILE LEFTPARENT Expr . RIGHTPARENT Stmt
    (50) Location -> Expr . DOT IDEN
    (51) Location -> Expr . LEFTSQRBRACKET Expr RIGHTSQRBRACKET
    (79) ExprLength -> Expr . DOT LENGTH
    (80) ExprBinaryExpr -> Expr . ADDITION Expr
    (81) ExprBinaryExpr -> Expr . SUBSTRACTION Expr
    (82) ExprBinaryExpr -> Expr . MULTIPLICATION Expr
    (83) ExprBinaryExpr -> Expr . DIVISION Expr
    (84) ExprBinaryExpr -> Expr . MODULO Expr
    (85) ExprBinaryExpr -> Expr . AND Expr
    (86) ExprBinaryExpr -> Expr . OR Expr
    (87) ExprBinaryExpr -> Expr . CONCAT Expr
    (88) ExprBinaryExpr -> Expr . LESS Expr
    (89) ExprBinaryExpr -> Expr . LESSEQUAL Expr
    (90) ExprBinaryExpr -> Expr . GREATER Expr
    (91) ExprBinaryExpr -> Expr . GREATEREQUAL Expr
    (92) ExprBinaryExpr -> Expr . EQUAL Expr
    (93) ExprBinaryExpr -> Expr . NOTEQUAL Expr
    (54) Method -> Expr . DOT IDEN

    RIGHTPARENT     shift and go to state 171
    DOT             shift and go to state 139
    LEFTSQRBRACKET  shift and go to state 121
    ADDITION        shift and go to state 119
    SUBSTRACTION    shift and go to state 127
    MULTIPLICATION  shift and go to state 126
    DIVISION        shift and go to state 115
    MODULO          shift and go to state 116
    AND             shift and go to state 114
    OR              shift and go to state 128
    CONCAT          shift and go to state 124
    LESS            shift and go to state 118
    LESSEQUAL       shift and go to state 122
    GREATER         shift and go to state 117
    GREATEREQUAL    shift and go to state 120
    EQUAL           shift and go to state 125
    NOTEQUAL        shift and go to state 123


state 142

    (48) Assign -> Location ASSIGNMENT Expr .
    (50) Location -> Expr . DOT IDEN
    (51) Location -> Expr . LEFTSQRBRACKET Expr RIGHTSQRBRACKET
    (79) ExprLength -> Expr . DOT LENGTH
    (80) ExprBinaryExpr -> Expr . ADDITION Expr
    (81) ExprBinaryExpr -> Expr . SUBSTRACTION Expr
    (82) ExprBinaryExpr -> Expr . MULTIPLICATION Expr
    (83) ExprBinaryExpr -> Expr . DIVISION Expr
    (84) ExprBinaryExpr -> Expr . MODULO Expr
    (85) ExprBinaryExpr -> Expr . AND Expr
    (86) ExprBinaryExpr -> Expr . OR Expr
    (87) ExprBinaryExpr -> Expr . CONCAT Expr
    (88) ExprBinaryExpr -> Expr . LESS Expr
    (89) ExprBinaryExpr -> Expr . LESSEQUAL Expr
    (90) ExprBinaryExpr -> Expr . GREATER Expr
    (91) ExprBinaryExpr -> Expr . GREATEREQUAL Expr
    (92) ExprBinaryExpr -> Expr . EQUAL Expr
    (93) ExprBinaryExpr -> Expr . NOTEQUAL Expr
    (54) Method -> Expr . DOT IDEN

    SEMICOLON       reduce using rule 48 (Assign -> Location ASSIGNMENT Expr .)
    DOT             shift and go to state 139
    LEFTSQRBRACKET  shift and go to state 121
    ADDITION        shift and go to state 119
    SUBSTRACTION    shift and go to state 127
    MULTIPLICATION  shift and go to state 126
    DIVISION        shift and go to state 115
    MODULO          shift and go to state 116
    AND             shift and go to state 114
    OR              shift and go to state 128
    CONCAT          shift and go to state 124
    LESS            shift and go to state 118
    LESSEQUAL       shift and go to state 122
    GREATER         shift and go to state 117
    GREATEREQUAL    shift and go to state 120
    EQUAL           shift and go to state 125
    NOTEQUAL        shift and go to state 123


state 143

    (77) NewId -> NEW IDEN LEFTPARENT . RIGHTPARENT

    RIGHTPARENT     shift and go to state 172


state 144

    (78) NewTypeExpr -> NEW Type LEFTSQRBRACKET . Expr LEFTSQRBRACKET
    (29) Array -> Type LEFTSQRBRACKET . RIGHTSQRBRACKET
    (66) Expr -> . Location
    (67) Expr -> . Call
    (68) Expr -> . THIS
    (69) Expr -> . NewId
    (70) Expr -> . NewTypeExpr
    (71) Expr -> . ExprLength
    (72) Expr -> . ExprBinaryExpr
    (73) Expr -> . UnaryExpr
    (74) Expr -> . Literal
    (75) Expr -> . Number
    (76) Expr -> . ParentExprParent
    (49) Location -> . IDEN
    (50) Location -> . Expr DOT IDEN
    (51) Location -> . Expr LEFTSQRBRACKET Expr RIGHTSQRBRACKET
    (52) Call -> . Method LEFTPARENT Actuals RIGHTPARENT
    (77) NewId -> . NEW IDEN LEFTPARENT RIGHTPARENT
    (78) NewTypeExpr -> . NEW Type LEFTSQRBRACKET Expr LEFTSQRBRACKET
    (79) ExprLength -> . Expr DOT LENGTH
    (80) ExprBinaryExpr -> . Expr ADDITION Expr
    (81) ExprBinaryExpr -> . Expr SUBSTRACTION Expr
    (82) ExprBinaryExpr -> . Expr MULTIPLICATION Expr
    (83) ExprBinaryExpr -> . Expr DIVISION Expr
    (84) ExprBinaryExpr -> . Expr MODULO Expr
    (85) ExprBinaryExpr -> . Expr AND Expr
    (86) ExprBinaryExpr -> . Expr OR Expr
    (87) ExprBinaryExpr -> . Expr CONCAT Expr
    (88) ExprBinaryExpr -> . Expr LESS Expr
    (89) ExprBinaryExpr -> . Expr LESSEQUAL Expr
    (90) ExprBinaryExpr -> . Expr GREATER Expr
    (91) ExprBinaryExpr -> . Expr GREATEREQUAL Expr
    (92) ExprBinaryExpr -> . Expr EQUAL Expr
    (93) ExprBinaryExpr -> . Expr NOTEQUAL Expr
    (94) UnaryExpr -> . UnaryMinus
    (95) UnaryExpr -> . NOT
    (97) Literal -> . INT
    (98) Literal -> . STRING
    (99) Literal -> . TRUE
    (100) Literal -> . FALSE
    (101) Literal -> . NULL
    (103) Number -> . CIENTIFIC
    (104) Number -> . HEXADEC
    (105) Number -> . NUMBER
    (106) Number -> . BINARY
    (107) Number -> . FLOAT
    (102) ParentExprParent -> . LEFTPARENT Expr RIGHTPARENT
    (53) Method -> . IDEN
    (54) Method -> . Expr DOT IDEN
    (96) UnaryMinus -> . SUBSTRACTION Expr

    RIGHTSQRBRACKET shift and go to state 36
    THIS            shift and go to state 90
    IDEN            shift and go to state 57
    NEW             shift and go to state 64
    NOT             shift and go to state 96
    INT             shift and go to state 75
    STRING          shift and go to state 77
    TRUE            shift and go to state 69
    FALSE           shift and go to state 89
    NULL            shift and go to state 65
    CIENTIFIC       shift and go to state 70
    HEXADEC         shift and go to state 81
    NUMBER          shift and go to state 98
    BINARY          shift and go to state 78
    FLOAT           shift and go to state 91
    LEFTPARENT      shift and go to state 84
    SUBSTRACTION    shift and go to state 97

    ExprBinaryExpr                 shift and go to state 88
    Method                         shift and go to state 66
    ExprLength                     shift and go to state 68
    NewTypeExpr                    shift and go to state 79
    Expr                           shift and go to state 173
    UnaryExpr                      shift and go to state 82
    Number                         shift and go to state 74
    Literal                        shift and go to state 92
    Call                           shift and go to state 101
    Location                       shift and go to state 102
    NewId                          shift and go to state 73
    ParentExprParent               shift and go to state 59
    UnaryMinus                     shift and go to state 93

state 145

    (52) Call -> Method LEFTPARENT Actuals . RIGHTPARENT

    RIGHTPARENT     shift and go to state 174


state 146

    (55) Actuals -> Expr . ExprCommaList
    (50) Location -> Expr . DOT IDEN
    (51) Location -> Expr . LEFTSQRBRACKET Expr RIGHTSQRBRACKET
    (79) ExprLength -> Expr . DOT LENGTH
    (80) ExprBinaryExpr -> Expr . ADDITION Expr
    (81) ExprBinaryExpr -> Expr . SUBSTRACTION Expr
    (82) ExprBinaryExpr -> Expr . MULTIPLICATION Expr
    (83) ExprBinaryExpr -> Expr . DIVISION Expr
    (84) ExprBinaryExpr -> Expr . MODULO Expr
    (85) ExprBinaryExpr -> Expr . AND Expr
    (86) ExprBinaryExpr -> Expr . OR Expr
    (87) ExprBinaryExpr -> Expr . CONCAT Expr
    (88) ExprBinaryExpr -> Expr . LESS Expr
    (89) ExprBinaryExpr -> Expr . LESSEQUAL Expr
    (90) ExprBinaryExpr -> Expr . GREATER Expr
    (91) ExprBinaryExpr -> Expr . GREATEREQUAL Expr
    (92) ExprBinaryExpr -> Expr . EQUAL Expr
    (93) ExprBinaryExpr -> Expr . NOTEQUAL Expr
    (54) Method -> Expr . DOT IDEN
    (56) ExprCommaList -> . ExprComma ExprCommaList
    (57) ExprCommaList -> . empty
    (58) ExprComma -> . COMMA Expr
    (108) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    DOT             shift and go to state 139
    LEFTSQRBRACKET  shift and go to state 121
    ADDITION        shift and go to state 119
    MULTIPLICATION  shift and go to state 126
    DIVISION        shift and go to state 115
    MODULO          shift and go to state 116
    AND             shift and go to state 114
    OR              shift and go to state 128
    CONCAT          shift and go to state 124
    LESS            shift and go to state 118
    LESSEQUAL       shift and go to state 122
    GREATER         shift and go to state 117
    GREATEREQUAL    shift and go to state 120
    EQUAL           shift and go to state 125
    NOTEQUAL        shift and go to state 123
    COMMA           shift and go to state 175
    $end            reduce using rule 108 (empty -> .)
    LEFTBRACE       reduce using rule 108 (empty -> .)
    RIGHTBRACE      reduce using rule 108 (empty -> .)
    SEMICOLON       reduce using rule 108 (empty -> .)
    RIGHTPARENT     reduce using rule 108 (empty -> .)
    RETURN          reduce using rule 108 (empty -> .)
    IF              reduce using rule 108 (empty -> .)
    BREAK           reduce using rule 108 (empty -> .)
    CONTINUE        reduce using rule 108 (empty -> .)
    IDEN            reduce using rule 108 (empty -> .)
    WHILE           reduce using rule 108 (empty -> .)
    THIS            reduce using rule 108 (empty -> .)
    NEW             reduce using rule 108 (empty -> .)
    INT             reduce using rule 108 (empty -> .)
    STRING          reduce using rule 108 (empty -> .)
    TRUE            reduce using rule 108 (empty -> .)
    FALSE           reduce using rule 108 (empty -> .)
    NULL            reduce using rule 108 (empty -> .)
    LEFTPARENT      reduce using rule 108 (empty -> .)
    NOT             reduce using rule 108 (empty -> .)
    CIENTIFIC       reduce using rule 108 (empty -> .)
    HEXADEC         reduce using rule 108 (empty -> .)
    NUMBER          reduce using rule 108 (empty -> .)
    BINARY          reduce using rule 108 (empty -> .)
    FLOAT           reduce using rule 108 (empty -> .)
    SUBSTRACTION    reduce using rule 108 (empty -> .)
    ELSE            reduce using rule 108 (empty -> .)

  ! SUBSTRACTION    [ shift and go to state 127 ]
  ! COMMA           [ reduce using rule 108 (empty -> .) ]

    ExprComma                      shift and go to state 178
    ExprCommaList                  shift and go to state 177
    empty                          shift and go to state 176

state 147

    (85) ExprBinaryExpr -> Expr AND Expr .
    (50) Location -> Expr . DOT IDEN
    (51) Location -> Expr . LEFTSQRBRACKET Expr RIGHTSQRBRACKET
    (79) ExprLength -> Expr . DOT LENGTH
    (80) ExprBinaryExpr -> Expr . ADDITION Expr
    (81) ExprBinaryExpr -> Expr . SUBSTRACTION Expr
    (82) ExprBinaryExpr -> Expr . MULTIPLICATION Expr
    (83) ExprBinaryExpr -> Expr . DIVISION Expr
    (84) ExprBinaryExpr -> Expr . MODULO Expr
    (85) ExprBinaryExpr -> Expr . AND Expr
    (86) ExprBinaryExpr -> Expr . OR Expr
    (87) ExprBinaryExpr -> Expr . CONCAT Expr
    (88) ExprBinaryExpr -> Expr . LESS Expr
    (89) ExprBinaryExpr -> Expr . LESSEQUAL Expr
    (90) ExprBinaryExpr -> Expr . GREATER Expr
    (91) ExprBinaryExpr -> Expr . GREATEREQUAL Expr
    (92) ExprBinaryExpr -> Expr . EQUAL Expr
    (93) ExprBinaryExpr -> Expr . NOTEQUAL Expr
    (54) Method -> Expr . DOT IDEN

    COMMA           reduce using rule 85 (ExprBinaryExpr -> Expr AND Expr .)
    SEMICOLON       reduce using rule 85 (ExprBinaryExpr -> Expr AND Expr .)
    LEFTSQRBRACKET  reduce using rule 85 (ExprBinaryExpr -> Expr AND Expr .)
    RIGHTSQRBRACKET reduce using rule 85 (ExprBinaryExpr -> Expr AND Expr .)
    RIGHTPARENT     reduce using rule 85 (ExprBinaryExpr -> Expr AND Expr .)
    AND             reduce using rule 85 (ExprBinaryExpr -> Expr AND Expr .)
    OR              reduce using rule 85 (ExprBinaryExpr -> Expr AND Expr .)
    DOT             shift and go to state 139
    ADDITION        shift and go to state 119
    SUBSTRACTION    shift and go to state 127
    MULTIPLICATION  shift and go to state 126
    DIVISION        shift and go to state 115
    MODULO          shift and go to state 116
    CONCAT          shift and go to state 124
    LESS            shift and go to state 118
    LESSEQUAL       shift and go to state 122
    GREATER         shift and go to state 117
    GREATEREQUAL    shift and go to state 120
    EQUAL           shift and go to state 125
    NOTEQUAL        shift and go to state 123

  ! DOT             [ reduce using rule 85 (ExprBinaryExpr -> Expr AND Expr .) ]
  ! ADDITION        [ reduce using rule 85 (ExprBinaryExpr -> Expr AND Expr .) ]
  ! SUBSTRACTION    [ reduce using rule 85 (ExprBinaryExpr -> Expr AND Expr .) ]
  ! MULTIPLICATION  [ reduce using rule 85 (ExprBinaryExpr -> Expr AND Expr .) ]
  ! DIVISION        [ reduce using rule 85 (ExprBinaryExpr -> Expr AND Expr .) ]
  ! MODULO          [ reduce using rule 85 (ExprBinaryExpr -> Expr AND Expr .) ]
  ! CONCAT          [ reduce using rule 85 (ExprBinaryExpr -> Expr AND Expr .) ]
  ! LESS            [ reduce using rule 85 (ExprBinaryExpr -> Expr AND Expr .) ]
  ! LESSEQUAL       [ reduce using rule 85 (ExprBinaryExpr -> Expr AND Expr .) ]
  ! GREATER         [ reduce using rule 85 (ExprBinaryExpr -> Expr AND Expr .) ]
  ! GREATEREQUAL    [ reduce using rule 85 (ExprBinaryExpr -> Expr AND Expr .) ]
  ! EQUAL           [ reduce using rule 85 (ExprBinaryExpr -> Expr AND Expr .) ]
  ! NOTEQUAL        [ reduce using rule 85 (ExprBinaryExpr -> Expr AND Expr .) ]
  ! LEFTSQRBRACKET  [ shift and go to state 121 ]
  ! AND             [ shift and go to state 114 ]
  ! OR              [ shift and go to state 128 ]


state 148

    (83) ExprBinaryExpr -> Expr DIVISION Expr .
    (50) Location -> Expr . DOT IDEN
    (51) Location -> Expr . LEFTSQRBRACKET Expr RIGHTSQRBRACKET
    (79) ExprLength -> Expr . DOT LENGTH
    (80) ExprBinaryExpr -> Expr . ADDITION Expr
    (81) ExprBinaryExpr -> Expr . SUBSTRACTION Expr
    (82) ExprBinaryExpr -> Expr . MULTIPLICATION Expr
    (83) ExprBinaryExpr -> Expr . DIVISION Expr
    (84) ExprBinaryExpr -> Expr . MODULO Expr
    (85) ExprBinaryExpr -> Expr . AND Expr
    (86) ExprBinaryExpr -> Expr . OR Expr
    (87) ExprBinaryExpr -> Expr . CONCAT Expr
    (88) ExprBinaryExpr -> Expr . LESS Expr
    (89) ExprBinaryExpr -> Expr . LESSEQUAL Expr
    (90) ExprBinaryExpr -> Expr . GREATER Expr
    (91) ExprBinaryExpr -> Expr . GREATEREQUAL Expr
    (92) ExprBinaryExpr -> Expr . EQUAL Expr
    (93) ExprBinaryExpr -> Expr . NOTEQUAL Expr
    (54) Method -> Expr . DOT IDEN

    COMMA           reduce using rule 83 (ExprBinaryExpr -> Expr DIVISION Expr .)
    SEMICOLON       reduce using rule 83 (ExprBinaryExpr -> Expr DIVISION Expr .)
    LEFTSQRBRACKET  reduce using rule 83 (ExprBinaryExpr -> Expr DIVISION Expr .)
    RIGHTSQRBRACKET reduce using rule 83 (ExprBinaryExpr -> Expr DIVISION Expr .)
    RIGHTPARENT     reduce using rule 83 (ExprBinaryExpr -> Expr DIVISION Expr .)
    ADDITION        reduce using rule 83 (ExprBinaryExpr -> Expr DIVISION Expr .)
    SUBSTRACTION    reduce using rule 83 (ExprBinaryExpr -> Expr DIVISION Expr .)
    MULTIPLICATION  reduce using rule 83 (ExprBinaryExpr -> Expr DIVISION Expr .)
    DIVISION        reduce using rule 83 (ExprBinaryExpr -> Expr DIVISION Expr .)
    MODULO          reduce using rule 83 (ExprBinaryExpr -> Expr DIVISION Expr .)
    AND             reduce using rule 83 (ExprBinaryExpr -> Expr DIVISION Expr .)
    OR              reduce using rule 83 (ExprBinaryExpr -> Expr DIVISION Expr .)
    CONCAT          reduce using rule 83 (ExprBinaryExpr -> Expr DIVISION Expr .)
    LESS            reduce using rule 83 (ExprBinaryExpr -> Expr DIVISION Expr .)
    LESSEQUAL       reduce using rule 83 (ExprBinaryExpr -> Expr DIVISION Expr .)
    GREATER         reduce using rule 83 (ExprBinaryExpr -> Expr DIVISION Expr .)
    GREATEREQUAL    reduce using rule 83 (ExprBinaryExpr -> Expr DIVISION Expr .)
    EQUAL           reduce using rule 83 (ExprBinaryExpr -> Expr DIVISION Expr .)
    NOTEQUAL        reduce using rule 83 (ExprBinaryExpr -> Expr DIVISION Expr .)
    DOT             shift and go to state 139

  ! DOT             [ reduce using rule 83 (ExprBinaryExpr -> Expr DIVISION Expr .) ]
  ! LEFTSQRBRACKET  [ shift and go to state 121 ]
  ! ADDITION        [ shift and go to state 119 ]
  ! SUBSTRACTION    [ shift and go to state 127 ]
  ! MULTIPLICATION  [ shift and go to state 126 ]
  ! DIVISION        [ shift and go to state 115 ]
  ! MODULO          [ shift and go to state 116 ]
  ! AND             [ shift and go to state 114 ]
  ! OR              [ shift and go to state 128 ]
  ! CONCAT          [ shift and go to state 124 ]
  ! LESS            [ shift and go to state 118 ]
  ! LESSEQUAL       [ shift and go to state 122 ]
  ! GREATER         [ shift and go to state 117 ]
  ! GREATEREQUAL    [ shift and go to state 120 ]
  ! EQUAL           [ shift and go to state 125 ]
  ! NOTEQUAL        [ shift and go to state 123 ]


state 149

    (84) ExprBinaryExpr -> Expr MODULO Expr .
    (50) Location -> Expr . DOT IDEN
    (51) Location -> Expr . LEFTSQRBRACKET Expr RIGHTSQRBRACKET
    (79) ExprLength -> Expr . DOT LENGTH
    (80) ExprBinaryExpr -> Expr . ADDITION Expr
    (81) ExprBinaryExpr -> Expr . SUBSTRACTION Expr
    (82) ExprBinaryExpr -> Expr . MULTIPLICATION Expr
    (83) ExprBinaryExpr -> Expr . DIVISION Expr
    (84) ExprBinaryExpr -> Expr . MODULO Expr
    (85) ExprBinaryExpr -> Expr . AND Expr
    (86) ExprBinaryExpr -> Expr . OR Expr
    (87) ExprBinaryExpr -> Expr . CONCAT Expr
    (88) ExprBinaryExpr -> Expr . LESS Expr
    (89) ExprBinaryExpr -> Expr . LESSEQUAL Expr
    (90) ExprBinaryExpr -> Expr . GREATER Expr
    (91) ExprBinaryExpr -> Expr . GREATEREQUAL Expr
    (92) ExprBinaryExpr -> Expr . EQUAL Expr
    (93) ExprBinaryExpr -> Expr . NOTEQUAL Expr
    (54) Method -> Expr . DOT IDEN

    COMMA           reduce using rule 84 (ExprBinaryExpr -> Expr MODULO Expr .)
    SEMICOLON       reduce using rule 84 (ExprBinaryExpr -> Expr MODULO Expr .)
    LEFTSQRBRACKET  reduce using rule 84 (ExprBinaryExpr -> Expr MODULO Expr .)
    RIGHTSQRBRACKET reduce using rule 84 (ExprBinaryExpr -> Expr MODULO Expr .)
    RIGHTPARENT     reduce using rule 84 (ExprBinaryExpr -> Expr MODULO Expr .)
    ADDITION        reduce using rule 84 (ExprBinaryExpr -> Expr MODULO Expr .)
    SUBSTRACTION    reduce using rule 84 (ExprBinaryExpr -> Expr MODULO Expr .)
    MULTIPLICATION  reduce using rule 84 (ExprBinaryExpr -> Expr MODULO Expr .)
    DIVISION        reduce using rule 84 (ExprBinaryExpr -> Expr MODULO Expr .)
    MODULO          reduce using rule 84 (ExprBinaryExpr -> Expr MODULO Expr .)
    AND             reduce using rule 84 (ExprBinaryExpr -> Expr MODULO Expr .)
    OR              reduce using rule 84 (ExprBinaryExpr -> Expr MODULO Expr .)
    CONCAT          reduce using rule 84 (ExprBinaryExpr -> Expr MODULO Expr .)
    LESS            reduce using rule 84 (ExprBinaryExpr -> Expr MODULO Expr .)
    LESSEQUAL       reduce using rule 84 (ExprBinaryExpr -> Expr MODULO Expr .)
    GREATER         reduce using rule 84 (ExprBinaryExpr -> Expr MODULO Expr .)
    GREATEREQUAL    reduce using rule 84 (ExprBinaryExpr -> Expr MODULO Expr .)
    EQUAL           reduce using rule 84 (ExprBinaryExpr -> Expr MODULO Expr .)
    NOTEQUAL        reduce using rule 84 (ExprBinaryExpr -> Expr MODULO Expr .)
    DOT             shift and go to state 139

  ! DOT             [ reduce using rule 84 (ExprBinaryExpr -> Expr MODULO Expr .) ]
  ! LEFTSQRBRACKET  [ shift and go to state 121 ]
  ! ADDITION        [ shift and go to state 119 ]
  ! SUBSTRACTION    [ shift and go to state 127 ]
  ! MULTIPLICATION  [ shift and go to state 126 ]
  ! DIVISION        [ shift and go to state 115 ]
  ! MODULO          [ shift and go to state 116 ]
  ! AND             [ shift and go to state 114 ]
  ! OR              [ shift and go to state 128 ]
  ! CONCAT          [ shift and go to state 124 ]
  ! LESS            [ shift and go to state 118 ]
  ! LESSEQUAL       [ shift and go to state 122 ]
  ! GREATER         [ shift and go to state 117 ]
  ! GREATEREQUAL    [ shift and go to state 120 ]
  ! EQUAL           [ shift and go to state 125 ]
  ! NOTEQUAL        [ shift and go to state 123 ]


state 150

    (90) ExprBinaryExpr -> Expr GREATER Expr .
    (50) Location -> Expr . DOT IDEN
    (51) Location -> Expr . LEFTSQRBRACKET Expr RIGHTSQRBRACKET
    (79) ExprLength -> Expr . DOT LENGTH
    (80) ExprBinaryExpr -> Expr . ADDITION Expr
    (81) ExprBinaryExpr -> Expr . SUBSTRACTION Expr
    (82) ExprBinaryExpr -> Expr . MULTIPLICATION Expr
    (83) ExprBinaryExpr -> Expr . DIVISION Expr
    (84) ExprBinaryExpr -> Expr . MODULO Expr
    (85) ExprBinaryExpr -> Expr . AND Expr
    (86) ExprBinaryExpr -> Expr . OR Expr
    (87) ExprBinaryExpr -> Expr . CONCAT Expr
    (88) ExprBinaryExpr -> Expr . LESS Expr
    (89) ExprBinaryExpr -> Expr . LESSEQUAL Expr
    (90) ExprBinaryExpr -> Expr . GREATER Expr
    (91) ExprBinaryExpr -> Expr . GREATEREQUAL Expr
    (92) ExprBinaryExpr -> Expr . EQUAL Expr
    (93) ExprBinaryExpr -> Expr . NOTEQUAL Expr
    (54) Method -> Expr . DOT IDEN

    COMMA           reduce using rule 90 (ExprBinaryExpr -> Expr GREATER Expr .)
    SEMICOLON       reduce using rule 90 (ExprBinaryExpr -> Expr GREATER Expr .)
    LEFTSQRBRACKET  reduce using rule 90 (ExprBinaryExpr -> Expr GREATER Expr .)
    RIGHTSQRBRACKET reduce using rule 90 (ExprBinaryExpr -> Expr GREATER Expr .)
    RIGHTPARENT     reduce using rule 90 (ExprBinaryExpr -> Expr GREATER Expr .)
    AND             reduce using rule 90 (ExprBinaryExpr -> Expr GREATER Expr .)
    OR              reduce using rule 90 (ExprBinaryExpr -> Expr GREATER Expr .)
    LESS            reduce using rule 90 (ExprBinaryExpr -> Expr GREATER Expr .)
    LESSEQUAL       reduce using rule 90 (ExprBinaryExpr -> Expr GREATER Expr .)
    GREATER         reduce using rule 90 (ExprBinaryExpr -> Expr GREATER Expr .)
    GREATEREQUAL    reduce using rule 90 (ExprBinaryExpr -> Expr GREATER Expr .)
    EQUAL           reduce using rule 90 (ExprBinaryExpr -> Expr GREATER Expr .)
    NOTEQUAL        reduce using rule 90 (ExprBinaryExpr -> Expr GREATER Expr .)
    DOT             shift and go to state 139
    ADDITION        shift and go to state 119
    SUBSTRACTION    shift and go to state 127
    MULTIPLICATION  shift and go to state 126
    DIVISION        shift and go to state 115
    MODULO          shift and go to state 116
    CONCAT          shift and go to state 124

  ! DOT             [ reduce using rule 90 (ExprBinaryExpr -> Expr GREATER Expr .) ]
  ! ADDITION        [ reduce using rule 90 (ExprBinaryExpr -> Expr GREATER Expr .) ]
  ! SUBSTRACTION    [ reduce using rule 90 (ExprBinaryExpr -> Expr GREATER Expr .) ]
  ! MULTIPLICATION  [ reduce using rule 90 (ExprBinaryExpr -> Expr GREATER Expr .) ]
  ! DIVISION        [ reduce using rule 90 (ExprBinaryExpr -> Expr GREATER Expr .) ]
  ! MODULO          [ reduce using rule 90 (ExprBinaryExpr -> Expr GREATER Expr .) ]
  ! CONCAT          [ reduce using rule 90 (ExprBinaryExpr -> Expr GREATER Expr .) ]
  ! LEFTSQRBRACKET  [ shift and go to state 121 ]
  ! AND             [ shift and go to state 114 ]
  ! OR              [ shift and go to state 128 ]
  ! LESS            [ shift and go to state 118 ]
  ! LESSEQUAL       [ shift and go to state 122 ]
  ! GREATER         [ shift and go to state 117 ]
  ! GREATEREQUAL    [ shift and go to state 120 ]
  ! EQUAL           [ shift and go to state 125 ]
  ! NOTEQUAL        [ shift and go to state 123 ]


state 151

    (88) ExprBinaryExpr -> Expr LESS Expr .
    (50) Location -> Expr . DOT IDEN
    (51) Location -> Expr . LEFTSQRBRACKET Expr RIGHTSQRBRACKET
    (79) ExprLength -> Expr . DOT LENGTH
    (80) ExprBinaryExpr -> Expr . ADDITION Expr
    (81) ExprBinaryExpr -> Expr . SUBSTRACTION Expr
    (82) ExprBinaryExpr -> Expr . MULTIPLICATION Expr
    (83) ExprBinaryExpr -> Expr . DIVISION Expr
    (84) ExprBinaryExpr -> Expr . MODULO Expr
    (85) ExprBinaryExpr -> Expr . AND Expr
    (86) ExprBinaryExpr -> Expr . OR Expr
    (87) ExprBinaryExpr -> Expr . CONCAT Expr
    (88) ExprBinaryExpr -> Expr . LESS Expr
    (89) ExprBinaryExpr -> Expr . LESSEQUAL Expr
    (90) ExprBinaryExpr -> Expr . GREATER Expr
    (91) ExprBinaryExpr -> Expr . GREATEREQUAL Expr
    (92) ExprBinaryExpr -> Expr . EQUAL Expr
    (93) ExprBinaryExpr -> Expr . NOTEQUAL Expr
    (54) Method -> Expr . DOT IDEN

    COMMA           reduce using rule 88 (ExprBinaryExpr -> Expr LESS Expr .)
    SEMICOLON       reduce using rule 88 (ExprBinaryExpr -> Expr LESS Expr .)
    LEFTSQRBRACKET  reduce using rule 88 (ExprBinaryExpr -> Expr LESS Expr .)
    RIGHTSQRBRACKET reduce using rule 88 (ExprBinaryExpr -> Expr LESS Expr .)
    RIGHTPARENT     reduce using rule 88 (ExprBinaryExpr -> Expr LESS Expr .)
    AND             reduce using rule 88 (ExprBinaryExpr -> Expr LESS Expr .)
    OR              reduce using rule 88 (ExprBinaryExpr -> Expr LESS Expr .)
    LESS            reduce using rule 88 (ExprBinaryExpr -> Expr LESS Expr .)
    LESSEQUAL       reduce using rule 88 (ExprBinaryExpr -> Expr LESS Expr .)
    GREATER         reduce using rule 88 (ExprBinaryExpr -> Expr LESS Expr .)
    GREATEREQUAL    reduce using rule 88 (ExprBinaryExpr -> Expr LESS Expr .)
    EQUAL           reduce using rule 88 (ExprBinaryExpr -> Expr LESS Expr .)
    NOTEQUAL        reduce using rule 88 (ExprBinaryExpr -> Expr LESS Expr .)
    DOT             shift and go to state 139
    ADDITION        shift and go to state 119
    SUBSTRACTION    shift and go to state 127
    MULTIPLICATION  shift and go to state 126
    DIVISION        shift and go to state 115
    MODULO          shift and go to state 116
    CONCAT          shift and go to state 124

  ! DOT             [ reduce using rule 88 (ExprBinaryExpr -> Expr LESS Expr .) ]
  ! ADDITION        [ reduce using rule 88 (ExprBinaryExpr -> Expr LESS Expr .) ]
  ! SUBSTRACTION    [ reduce using rule 88 (ExprBinaryExpr -> Expr LESS Expr .) ]
  ! MULTIPLICATION  [ reduce using rule 88 (ExprBinaryExpr -> Expr LESS Expr .) ]
  ! DIVISION        [ reduce using rule 88 (ExprBinaryExpr -> Expr LESS Expr .) ]
  ! MODULO          [ reduce using rule 88 (ExprBinaryExpr -> Expr LESS Expr .) ]
  ! CONCAT          [ reduce using rule 88 (ExprBinaryExpr -> Expr LESS Expr .) ]
  ! LEFTSQRBRACKET  [ shift and go to state 121 ]
  ! AND             [ shift and go to state 114 ]
  ! OR              [ shift and go to state 128 ]
  ! LESS            [ shift and go to state 118 ]
  ! LESSEQUAL       [ shift and go to state 122 ]
  ! GREATER         [ shift and go to state 117 ]
  ! GREATEREQUAL    [ shift and go to state 120 ]
  ! EQUAL           [ shift and go to state 125 ]
  ! NOTEQUAL        [ shift and go to state 123 ]


state 152

    (80) ExprBinaryExpr -> Expr ADDITION Expr .
    (50) Location -> Expr . DOT IDEN
    (51) Location -> Expr . LEFTSQRBRACKET Expr RIGHTSQRBRACKET
    (79) ExprLength -> Expr . DOT LENGTH
    (80) ExprBinaryExpr -> Expr . ADDITION Expr
    (81) ExprBinaryExpr -> Expr . SUBSTRACTION Expr
    (82) ExprBinaryExpr -> Expr . MULTIPLICATION Expr
    (83) ExprBinaryExpr -> Expr . DIVISION Expr
    (84) ExprBinaryExpr -> Expr . MODULO Expr
    (85) ExprBinaryExpr -> Expr . AND Expr
    (86) ExprBinaryExpr -> Expr . OR Expr
    (87) ExprBinaryExpr -> Expr . CONCAT Expr
    (88) ExprBinaryExpr -> Expr . LESS Expr
    (89) ExprBinaryExpr -> Expr . LESSEQUAL Expr
    (90) ExprBinaryExpr -> Expr . GREATER Expr
    (91) ExprBinaryExpr -> Expr . GREATEREQUAL Expr
    (92) ExprBinaryExpr -> Expr . EQUAL Expr
    (93) ExprBinaryExpr -> Expr . NOTEQUAL Expr
    (54) Method -> Expr . DOT IDEN

    COMMA           reduce using rule 80 (ExprBinaryExpr -> Expr ADDITION Expr .)
    SEMICOLON       reduce using rule 80 (ExprBinaryExpr -> Expr ADDITION Expr .)
    LEFTSQRBRACKET  reduce using rule 80 (ExprBinaryExpr -> Expr ADDITION Expr .)
    RIGHTSQRBRACKET reduce using rule 80 (ExprBinaryExpr -> Expr ADDITION Expr .)
    RIGHTPARENT     reduce using rule 80 (ExprBinaryExpr -> Expr ADDITION Expr .)
    ADDITION        reduce using rule 80 (ExprBinaryExpr -> Expr ADDITION Expr .)
    SUBSTRACTION    reduce using rule 80 (ExprBinaryExpr -> Expr ADDITION Expr .)
    AND             reduce using rule 80 (ExprBinaryExpr -> Expr ADDITION Expr .)
    OR              reduce using rule 80 (ExprBinaryExpr -> Expr ADDITION Expr .)
    CONCAT          reduce using rule 80 (ExprBinaryExpr -> Expr ADDITION Expr .)
    LESS            reduce using rule 80 (ExprBinaryExpr -> Expr ADDITION Expr .)
    LESSEQUAL       reduce using rule 80 (ExprBinaryExpr -> Expr ADDITION Expr .)
    GREATER         reduce using rule 80 (ExprBinaryExpr -> Expr ADDITION Expr .)
    GREATEREQUAL    reduce using rule 80 (ExprBinaryExpr -> Expr ADDITION Expr .)
    EQUAL           reduce using rule 80 (ExprBinaryExpr -> Expr ADDITION Expr .)
    NOTEQUAL        reduce using rule 80 (ExprBinaryExpr -> Expr ADDITION Expr .)
    DOT             shift and go to state 139
    MULTIPLICATION  shift and go to state 126
    DIVISION        shift and go to state 115
    MODULO          shift and go to state 116

  ! DOT             [ reduce using rule 80 (ExprBinaryExpr -> Expr ADDITION Expr .) ]
  ! MULTIPLICATION  [ reduce using rule 80 (ExprBinaryExpr -> Expr ADDITION Expr .) ]
  ! DIVISION        [ reduce using rule 80 (ExprBinaryExpr -> Expr ADDITION Expr .) ]
  ! MODULO          [ reduce using rule 80 (ExprBinaryExpr -> Expr ADDITION Expr .) ]
  ! LEFTSQRBRACKET  [ shift and go to state 121 ]
  ! ADDITION        [ shift and go to state 119 ]
  ! SUBSTRACTION    [ shift and go to state 127 ]
  ! AND             [ shift and go to state 114 ]
  ! OR              [ shift and go to state 128 ]
  ! CONCAT          [ shift and go to state 124 ]
  ! LESS            [ shift and go to state 118 ]
  ! LESSEQUAL       [ shift and go to state 122 ]
  ! GREATER         [ shift and go to state 117 ]
  ! GREATEREQUAL    [ shift and go to state 120 ]
  ! EQUAL           [ shift and go to state 125 ]
  ! NOTEQUAL        [ shift and go to state 123 ]


state 153

    (91) ExprBinaryExpr -> Expr GREATEREQUAL Expr .
    (50) Location -> Expr . DOT IDEN
    (51) Location -> Expr . LEFTSQRBRACKET Expr RIGHTSQRBRACKET
    (79) ExprLength -> Expr . DOT LENGTH
    (80) ExprBinaryExpr -> Expr . ADDITION Expr
    (81) ExprBinaryExpr -> Expr . SUBSTRACTION Expr
    (82) ExprBinaryExpr -> Expr . MULTIPLICATION Expr
    (83) ExprBinaryExpr -> Expr . DIVISION Expr
    (84) ExprBinaryExpr -> Expr . MODULO Expr
    (85) ExprBinaryExpr -> Expr . AND Expr
    (86) ExprBinaryExpr -> Expr . OR Expr
    (87) ExprBinaryExpr -> Expr . CONCAT Expr
    (88) ExprBinaryExpr -> Expr . LESS Expr
    (89) ExprBinaryExpr -> Expr . LESSEQUAL Expr
    (90) ExprBinaryExpr -> Expr . GREATER Expr
    (91) ExprBinaryExpr -> Expr . GREATEREQUAL Expr
    (92) ExprBinaryExpr -> Expr . EQUAL Expr
    (93) ExprBinaryExpr -> Expr . NOTEQUAL Expr
    (54) Method -> Expr . DOT IDEN

    COMMA           reduce using rule 91 (ExprBinaryExpr -> Expr GREATEREQUAL Expr .)
    SEMICOLON       reduce using rule 91 (ExprBinaryExpr -> Expr GREATEREQUAL Expr .)
    LEFTSQRBRACKET  reduce using rule 91 (ExprBinaryExpr -> Expr GREATEREQUAL Expr .)
    RIGHTSQRBRACKET reduce using rule 91 (ExprBinaryExpr -> Expr GREATEREQUAL Expr .)
    RIGHTPARENT     reduce using rule 91 (ExprBinaryExpr -> Expr GREATEREQUAL Expr .)
    AND             reduce using rule 91 (ExprBinaryExpr -> Expr GREATEREQUAL Expr .)
    OR              reduce using rule 91 (ExprBinaryExpr -> Expr GREATEREQUAL Expr .)
    LESS            reduce using rule 91 (ExprBinaryExpr -> Expr GREATEREQUAL Expr .)
    LESSEQUAL       reduce using rule 91 (ExprBinaryExpr -> Expr GREATEREQUAL Expr .)
    GREATER         reduce using rule 91 (ExprBinaryExpr -> Expr GREATEREQUAL Expr .)
    GREATEREQUAL    reduce using rule 91 (ExprBinaryExpr -> Expr GREATEREQUAL Expr .)
    EQUAL           reduce using rule 91 (ExprBinaryExpr -> Expr GREATEREQUAL Expr .)
    NOTEQUAL        reduce using rule 91 (ExprBinaryExpr -> Expr GREATEREQUAL Expr .)
    DOT             shift and go to state 139
    ADDITION        shift and go to state 119
    SUBSTRACTION    shift and go to state 127
    MULTIPLICATION  shift and go to state 126
    DIVISION        shift and go to state 115
    MODULO          shift and go to state 116
    CONCAT          shift and go to state 124

  ! DOT             [ reduce using rule 91 (ExprBinaryExpr -> Expr GREATEREQUAL Expr .) ]
  ! ADDITION        [ reduce using rule 91 (ExprBinaryExpr -> Expr GREATEREQUAL Expr .) ]
  ! SUBSTRACTION    [ reduce using rule 91 (ExprBinaryExpr -> Expr GREATEREQUAL Expr .) ]
  ! MULTIPLICATION  [ reduce using rule 91 (ExprBinaryExpr -> Expr GREATEREQUAL Expr .) ]
  ! DIVISION        [ reduce using rule 91 (ExprBinaryExpr -> Expr GREATEREQUAL Expr .) ]
  ! MODULO          [ reduce using rule 91 (ExprBinaryExpr -> Expr GREATEREQUAL Expr .) ]
  ! CONCAT          [ reduce using rule 91 (ExprBinaryExpr -> Expr GREATEREQUAL Expr .) ]
  ! LEFTSQRBRACKET  [ shift and go to state 121 ]
  ! AND             [ shift and go to state 114 ]
  ! OR              [ shift and go to state 128 ]
  ! LESS            [ shift and go to state 118 ]
  ! LESSEQUAL       [ shift and go to state 122 ]
  ! GREATER         [ shift and go to state 117 ]
  ! GREATEREQUAL    [ shift and go to state 120 ]
  ! EQUAL           [ shift and go to state 125 ]
  ! NOTEQUAL        [ shift and go to state 123 ]


state 154

    (51) Location -> Expr LEFTSQRBRACKET Expr . RIGHTSQRBRACKET
    (50) Location -> Expr . DOT IDEN
    (51) Location -> Expr . LEFTSQRBRACKET Expr RIGHTSQRBRACKET
    (79) ExprLength -> Expr . DOT LENGTH
    (80) ExprBinaryExpr -> Expr . ADDITION Expr
    (81) ExprBinaryExpr -> Expr . SUBSTRACTION Expr
    (82) ExprBinaryExpr -> Expr . MULTIPLICATION Expr
    (83) ExprBinaryExpr -> Expr . DIVISION Expr
    (84) ExprBinaryExpr -> Expr . MODULO Expr
    (85) ExprBinaryExpr -> Expr . AND Expr
    (86) ExprBinaryExpr -> Expr . OR Expr
    (87) ExprBinaryExpr -> Expr . CONCAT Expr
    (88) ExprBinaryExpr -> Expr . LESS Expr
    (89) ExprBinaryExpr -> Expr . LESSEQUAL Expr
    (90) ExprBinaryExpr -> Expr . GREATER Expr
    (91) ExprBinaryExpr -> Expr . GREATEREQUAL Expr
    (92) ExprBinaryExpr -> Expr . EQUAL Expr
    (93) ExprBinaryExpr -> Expr . NOTEQUAL Expr
    (54) Method -> Expr . DOT IDEN

    RIGHTSQRBRACKET shift and go to state 179
    DOT             shift and go to state 139
    LEFTSQRBRACKET  shift and go to state 121
    ADDITION        shift and go to state 119
    SUBSTRACTION    shift and go to state 127
    MULTIPLICATION  shift and go to state 126
    DIVISION        shift and go to state 115
    MODULO          shift and go to state 116
    AND             shift and go to state 114
    OR              shift and go to state 128
    CONCAT          shift and go to state 124
    LESS            shift and go to state 118
    LESSEQUAL       shift and go to state 122
    GREATER         shift and go to state 117
    GREATEREQUAL    shift and go to state 120
    EQUAL           shift and go to state 125
    NOTEQUAL        shift and go to state 123


state 155

    (89) ExprBinaryExpr -> Expr LESSEQUAL Expr .
    (50) Location -> Expr . DOT IDEN
    (51) Location -> Expr . LEFTSQRBRACKET Expr RIGHTSQRBRACKET
    (79) ExprLength -> Expr . DOT LENGTH
    (80) ExprBinaryExpr -> Expr . ADDITION Expr
    (81) ExprBinaryExpr -> Expr . SUBSTRACTION Expr
    (82) ExprBinaryExpr -> Expr . MULTIPLICATION Expr
    (83) ExprBinaryExpr -> Expr . DIVISION Expr
    (84) ExprBinaryExpr -> Expr . MODULO Expr
    (85) ExprBinaryExpr -> Expr . AND Expr
    (86) ExprBinaryExpr -> Expr . OR Expr
    (87) ExprBinaryExpr -> Expr . CONCAT Expr
    (88) ExprBinaryExpr -> Expr . LESS Expr
    (89) ExprBinaryExpr -> Expr . LESSEQUAL Expr
    (90) ExprBinaryExpr -> Expr . GREATER Expr
    (91) ExprBinaryExpr -> Expr . GREATEREQUAL Expr
    (92) ExprBinaryExpr -> Expr . EQUAL Expr
    (93) ExprBinaryExpr -> Expr . NOTEQUAL Expr
    (54) Method -> Expr . DOT IDEN

    COMMA           reduce using rule 89 (ExprBinaryExpr -> Expr LESSEQUAL Expr .)
    SEMICOLON       reduce using rule 89 (ExprBinaryExpr -> Expr LESSEQUAL Expr .)
    LEFTSQRBRACKET  reduce using rule 89 (ExprBinaryExpr -> Expr LESSEQUAL Expr .)
    RIGHTSQRBRACKET reduce using rule 89 (ExprBinaryExpr -> Expr LESSEQUAL Expr .)
    RIGHTPARENT     reduce using rule 89 (ExprBinaryExpr -> Expr LESSEQUAL Expr .)
    AND             reduce using rule 89 (ExprBinaryExpr -> Expr LESSEQUAL Expr .)
    OR              reduce using rule 89 (ExprBinaryExpr -> Expr LESSEQUAL Expr .)
    LESS            reduce using rule 89 (ExprBinaryExpr -> Expr LESSEQUAL Expr .)
    LESSEQUAL       reduce using rule 89 (ExprBinaryExpr -> Expr LESSEQUAL Expr .)
    GREATER         reduce using rule 89 (ExprBinaryExpr -> Expr LESSEQUAL Expr .)
    GREATEREQUAL    reduce using rule 89 (ExprBinaryExpr -> Expr LESSEQUAL Expr .)
    EQUAL           reduce using rule 89 (ExprBinaryExpr -> Expr LESSEQUAL Expr .)
    NOTEQUAL        reduce using rule 89 (ExprBinaryExpr -> Expr LESSEQUAL Expr .)
    DOT             shift and go to state 139
    ADDITION        shift and go to state 119
    SUBSTRACTION    shift and go to state 127
    MULTIPLICATION  shift and go to state 126
    DIVISION        shift and go to state 115
    MODULO          shift and go to state 116
    CONCAT          shift and go to state 124

  ! DOT             [ reduce using rule 89 (ExprBinaryExpr -> Expr LESSEQUAL Expr .) ]
  ! ADDITION        [ reduce using rule 89 (ExprBinaryExpr -> Expr LESSEQUAL Expr .) ]
  ! SUBSTRACTION    [ reduce using rule 89 (ExprBinaryExpr -> Expr LESSEQUAL Expr .) ]
  ! MULTIPLICATION  [ reduce using rule 89 (ExprBinaryExpr -> Expr LESSEQUAL Expr .) ]
  ! DIVISION        [ reduce using rule 89 (ExprBinaryExpr -> Expr LESSEQUAL Expr .) ]
  ! MODULO          [ reduce using rule 89 (ExprBinaryExpr -> Expr LESSEQUAL Expr .) ]
  ! CONCAT          [ reduce using rule 89 (ExprBinaryExpr -> Expr LESSEQUAL Expr .) ]
  ! LEFTSQRBRACKET  [ shift and go to state 121 ]
  ! AND             [ shift and go to state 114 ]
  ! OR              [ shift and go to state 128 ]
  ! LESS            [ shift and go to state 118 ]
  ! LESSEQUAL       [ shift and go to state 122 ]
  ! GREATER         [ shift and go to state 117 ]
  ! GREATEREQUAL    [ shift and go to state 120 ]
  ! EQUAL           [ shift and go to state 125 ]
  ! NOTEQUAL        [ shift and go to state 123 ]


state 156

    (93) ExprBinaryExpr -> Expr NOTEQUAL Expr .
    (50) Location -> Expr . DOT IDEN
    (51) Location -> Expr . LEFTSQRBRACKET Expr RIGHTSQRBRACKET
    (79) ExprLength -> Expr . DOT LENGTH
    (80) ExprBinaryExpr -> Expr . ADDITION Expr
    (81) ExprBinaryExpr -> Expr . SUBSTRACTION Expr
    (82) ExprBinaryExpr -> Expr . MULTIPLICATION Expr
    (83) ExprBinaryExpr -> Expr . DIVISION Expr
    (84) ExprBinaryExpr -> Expr . MODULO Expr
    (85) ExprBinaryExpr -> Expr . AND Expr
    (86) ExprBinaryExpr -> Expr . OR Expr
    (87) ExprBinaryExpr -> Expr . CONCAT Expr
    (88) ExprBinaryExpr -> Expr . LESS Expr
    (89) ExprBinaryExpr -> Expr . LESSEQUAL Expr
    (90) ExprBinaryExpr -> Expr . GREATER Expr
    (91) ExprBinaryExpr -> Expr . GREATEREQUAL Expr
    (92) ExprBinaryExpr -> Expr . EQUAL Expr
    (93) ExprBinaryExpr -> Expr . NOTEQUAL Expr
    (54) Method -> Expr . DOT IDEN

    COMMA           reduce using rule 93 (ExprBinaryExpr -> Expr NOTEQUAL Expr .)
    SEMICOLON       reduce using rule 93 (ExprBinaryExpr -> Expr NOTEQUAL Expr .)
    LEFTSQRBRACKET  reduce using rule 93 (ExprBinaryExpr -> Expr NOTEQUAL Expr .)
    RIGHTSQRBRACKET reduce using rule 93 (ExprBinaryExpr -> Expr NOTEQUAL Expr .)
    RIGHTPARENT     reduce using rule 93 (ExprBinaryExpr -> Expr NOTEQUAL Expr .)
    AND             reduce using rule 93 (ExprBinaryExpr -> Expr NOTEQUAL Expr .)
    OR              reduce using rule 93 (ExprBinaryExpr -> Expr NOTEQUAL Expr .)
    EQUAL           reduce using rule 93 (ExprBinaryExpr -> Expr NOTEQUAL Expr .)
    NOTEQUAL        reduce using rule 93 (ExprBinaryExpr -> Expr NOTEQUAL Expr .)
    DOT             shift and go to state 139
    ADDITION        shift and go to state 119
    SUBSTRACTION    shift and go to state 127
    MULTIPLICATION  shift and go to state 126
    DIVISION        shift and go to state 115
    MODULO          shift and go to state 116
    CONCAT          shift and go to state 124
    LESS            shift and go to state 118
    LESSEQUAL       shift and go to state 122
    GREATER         shift and go to state 117
    GREATEREQUAL    shift and go to state 120

  ! DOT             [ reduce using rule 93 (ExprBinaryExpr -> Expr NOTEQUAL Expr .) ]
  ! ADDITION        [ reduce using rule 93 (ExprBinaryExpr -> Expr NOTEQUAL Expr .) ]
  ! SUBSTRACTION    [ reduce using rule 93 (ExprBinaryExpr -> Expr NOTEQUAL Expr .) ]
  ! MULTIPLICATION  [ reduce using rule 93 (ExprBinaryExpr -> Expr NOTEQUAL Expr .) ]
  ! DIVISION        [ reduce using rule 93 (ExprBinaryExpr -> Expr NOTEQUAL Expr .) ]
  ! MODULO          [ reduce using rule 93 (ExprBinaryExpr -> Expr NOTEQUAL Expr .) ]
  ! CONCAT          [ reduce using rule 93 (ExprBinaryExpr -> Expr NOTEQUAL Expr .) ]
  ! LESS            [ reduce using rule 93 (ExprBinaryExpr -> Expr NOTEQUAL Expr .) ]
  ! LESSEQUAL       [ reduce using rule 93 (ExprBinaryExpr -> Expr NOTEQUAL Expr .) ]
  ! GREATER         [ reduce using rule 93 (ExprBinaryExpr -> Expr NOTEQUAL Expr .) ]
  ! GREATEREQUAL    [ reduce using rule 93 (ExprBinaryExpr -> Expr NOTEQUAL Expr .) ]
  ! LEFTSQRBRACKET  [ shift and go to state 121 ]
  ! AND             [ shift and go to state 114 ]
  ! OR              [ shift and go to state 128 ]
  ! EQUAL           [ shift and go to state 125 ]
  ! NOTEQUAL        [ shift and go to state 123 ]


state 157

    (87) ExprBinaryExpr -> Expr CONCAT Expr .
    (50) Location -> Expr . DOT IDEN
    (51) Location -> Expr . LEFTSQRBRACKET Expr RIGHTSQRBRACKET
    (79) ExprLength -> Expr . DOT LENGTH
    (80) ExprBinaryExpr -> Expr . ADDITION Expr
    (81) ExprBinaryExpr -> Expr . SUBSTRACTION Expr
    (82) ExprBinaryExpr -> Expr . MULTIPLICATION Expr
    (83) ExprBinaryExpr -> Expr . DIVISION Expr
    (84) ExprBinaryExpr -> Expr . MODULO Expr
    (85) ExprBinaryExpr -> Expr . AND Expr
    (86) ExprBinaryExpr -> Expr . OR Expr
    (87) ExprBinaryExpr -> Expr . CONCAT Expr
    (88) ExprBinaryExpr -> Expr . LESS Expr
    (89) ExprBinaryExpr -> Expr . LESSEQUAL Expr
    (90) ExprBinaryExpr -> Expr . GREATER Expr
    (91) ExprBinaryExpr -> Expr . GREATEREQUAL Expr
    (92) ExprBinaryExpr -> Expr . EQUAL Expr
    (93) ExprBinaryExpr -> Expr . NOTEQUAL Expr
    (54) Method -> Expr . DOT IDEN

    COMMA           reduce using rule 87 (ExprBinaryExpr -> Expr CONCAT Expr .)
    SEMICOLON       reduce using rule 87 (ExprBinaryExpr -> Expr CONCAT Expr .)
    LEFTSQRBRACKET  reduce using rule 87 (ExprBinaryExpr -> Expr CONCAT Expr .)
    RIGHTSQRBRACKET reduce using rule 87 (ExprBinaryExpr -> Expr CONCAT Expr .)
    RIGHTPARENT     reduce using rule 87 (ExprBinaryExpr -> Expr CONCAT Expr .)
    ADDITION        reduce using rule 87 (ExprBinaryExpr -> Expr CONCAT Expr .)
    SUBSTRACTION    reduce using rule 87 (ExprBinaryExpr -> Expr CONCAT Expr .)
    AND             reduce using rule 87 (ExprBinaryExpr -> Expr CONCAT Expr .)
    OR              reduce using rule 87 (ExprBinaryExpr -> Expr CONCAT Expr .)
    CONCAT          reduce using rule 87 (ExprBinaryExpr -> Expr CONCAT Expr .)
    LESS            reduce using rule 87 (ExprBinaryExpr -> Expr CONCAT Expr .)
    LESSEQUAL       reduce using rule 87 (ExprBinaryExpr -> Expr CONCAT Expr .)
    GREATER         reduce using rule 87 (ExprBinaryExpr -> Expr CONCAT Expr .)
    GREATEREQUAL    reduce using rule 87 (ExprBinaryExpr -> Expr CONCAT Expr .)
    EQUAL           reduce using rule 87 (ExprBinaryExpr -> Expr CONCAT Expr .)
    NOTEQUAL        reduce using rule 87 (ExprBinaryExpr -> Expr CONCAT Expr .)
    DOT             shift and go to state 139
    MULTIPLICATION  shift and go to state 126
    DIVISION        shift and go to state 115
    MODULO          shift and go to state 116

  ! DOT             [ reduce using rule 87 (ExprBinaryExpr -> Expr CONCAT Expr .) ]
  ! MULTIPLICATION  [ reduce using rule 87 (ExprBinaryExpr -> Expr CONCAT Expr .) ]
  ! DIVISION        [ reduce using rule 87 (ExprBinaryExpr -> Expr CONCAT Expr .) ]
  ! MODULO          [ reduce using rule 87 (ExprBinaryExpr -> Expr CONCAT Expr .) ]
  ! LEFTSQRBRACKET  [ shift and go to state 121 ]
  ! ADDITION        [ shift and go to state 119 ]
  ! SUBSTRACTION    [ shift and go to state 127 ]
  ! AND             [ shift and go to state 114 ]
  ! OR              [ shift and go to state 128 ]
  ! CONCAT          [ shift and go to state 124 ]
  ! LESS            [ shift and go to state 118 ]
  ! LESSEQUAL       [ shift and go to state 122 ]
  ! GREATER         [ shift and go to state 117 ]
  ! GREATEREQUAL    [ shift and go to state 120 ]
  ! EQUAL           [ shift and go to state 125 ]
  ! NOTEQUAL        [ shift and go to state 123 ]


state 158

    (92) ExprBinaryExpr -> Expr EQUAL Expr .
    (50) Location -> Expr . DOT IDEN
    (51) Location -> Expr . LEFTSQRBRACKET Expr RIGHTSQRBRACKET
    (79) ExprLength -> Expr . DOT LENGTH
    (80) ExprBinaryExpr -> Expr . ADDITION Expr
    (81) ExprBinaryExpr -> Expr . SUBSTRACTION Expr
    (82) ExprBinaryExpr -> Expr . MULTIPLICATION Expr
    (83) ExprBinaryExpr -> Expr . DIVISION Expr
    (84) ExprBinaryExpr -> Expr . MODULO Expr
    (85) ExprBinaryExpr -> Expr . AND Expr
    (86) ExprBinaryExpr -> Expr . OR Expr
    (87) ExprBinaryExpr -> Expr . CONCAT Expr
    (88) ExprBinaryExpr -> Expr . LESS Expr
    (89) ExprBinaryExpr -> Expr . LESSEQUAL Expr
    (90) ExprBinaryExpr -> Expr . GREATER Expr
    (91) ExprBinaryExpr -> Expr . GREATEREQUAL Expr
    (92) ExprBinaryExpr -> Expr . EQUAL Expr
    (93) ExprBinaryExpr -> Expr . NOTEQUAL Expr
    (54) Method -> Expr . DOT IDEN

    COMMA           reduce using rule 92 (ExprBinaryExpr -> Expr EQUAL Expr .)
    SEMICOLON       reduce using rule 92 (ExprBinaryExpr -> Expr EQUAL Expr .)
    LEFTSQRBRACKET  reduce using rule 92 (ExprBinaryExpr -> Expr EQUAL Expr .)
    RIGHTSQRBRACKET reduce using rule 92 (ExprBinaryExpr -> Expr EQUAL Expr .)
    RIGHTPARENT     reduce using rule 92 (ExprBinaryExpr -> Expr EQUAL Expr .)
    AND             reduce using rule 92 (ExprBinaryExpr -> Expr EQUAL Expr .)
    OR              reduce using rule 92 (ExprBinaryExpr -> Expr EQUAL Expr .)
    EQUAL           reduce using rule 92 (ExprBinaryExpr -> Expr EQUAL Expr .)
    NOTEQUAL        reduce using rule 92 (ExprBinaryExpr -> Expr EQUAL Expr .)
    DOT             shift and go to state 139
    ADDITION        shift and go to state 119
    SUBSTRACTION    shift and go to state 127
    MULTIPLICATION  shift and go to state 126
    DIVISION        shift and go to state 115
    MODULO          shift and go to state 116
    CONCAT          shift and go to state 124
    LESS            shift and go to state 118
    LESSEQUAL       shift and go to state 122
    GREATER         shift and go to state 117
    GREATEREQUAL    shift and go to state 120

  ! DOT             [ reduce using rule 92 (ExprBinaryExpr -> Expr EQUAL Expr .) ]
  ! ADDITION        [ reduce using rule 92 (ExprBinaryExpr -> Expr EQUAL Expr .) ]
  ! SUBSTRACTION    [ reduce using rule 92 (ExprBinaryExpr -> Expr EQUAL Expr .) ]
  ! MULTIPLICATION  [ reduce using rule 92 (ExprBinaryExpr -> Expr EQUAL Expr .) ]
  ! DIVISION        [ reduce using rule 92 (ExprBinaryExpr -> Expr EQUAL Expr .) ]
  ! MODULO          [ reduce using rule 92 (ExprBinaryExpr -> Expr EQUAL Expr .) ]
  ! CONCAT          [ reduce using rule 92 (ExprBinaryExpr -> Expr EQUAL Expr .) ]
  ! LESS            [ reduce using rule 92 (ExprBinaryExpr -> Expr EQUAL Expr .) ]
  ! LESSEQUAL       [ reduce using rule 92 (ExprBinaryExpr -> Expr EQUAL Expr .) ]
  ! GREATER         [ reduce using rule 92 (ExprBinaryExpr -> Expr EQUAL Expr .) ]
  ! GREATEREQUAL    [ reduce using rule 92 (ExprBinaryExpr -> Expr EQUAL Expr .) ]
  ! LEFTSQRBRACKET  [ shift and go to state 121 ]
  ! AND             [ shift and go to state 114 ]
  ! OR              [ shift and go to state 128 ]
  ! EQUAL           [ shift and go to state 125 ]
  ! NOTEQUAL        [ shift and go to state 123 ]


state 159

    (82) ExprBinaryExpr -> Expr MULTIPLICATION Expr .
    (50) Location -> Expr . DOT IDEN
    (51) Location -> Expr . LEFTSQRBRACKET Expr RIGHTSQRBRACKET
    (79) ExprLength -> Expr . DOT LENGTH
    (80) ExprBinaryExpr -> Expr . ADDITION Expr
    (81) ExprBinaryExpr -> Expr . SUBSTRACTION Expr
    (82) ExprBinaryExpr -> Expr . MULTIPLICATION Expr
    (83) ExprBinaryExpr -> Expr . DIVISION Expr
    (84) ExprBinaryExpr -> Expr . MODULO Expr
    (85) ExprBinaryExpr -> Expr . AND Expr
    (86) ExprBinaryExpr -> Expr . OR Expr
    (87) ExprBinaryExpr -> Expr . CONCAT Expr
    (88) ExprBinaryExpr -> Expr . LESS Expr
    (89) ExprBinaryExpr -> Expr . LESSEQUAL Expr
    (90) ExprBinaryExpr -> Expr . GREATER Expr
    (91) ExprBinaryExpr -> Expr . GREATEREQUAL Expr
    (92) ExprBinaryExpr -> Expr . EQUAL Expr
    (93) ExprBinaryExpr -> Expr . NOTEQUAL Expr
    (54) Method -> Expr . DOT IDEN

    COMMA           reduce using rule 82 (ExprBinaryExpr -> Expr MULTIPLICATION Expr .)
    SEMICOLON       reduce using rule 82 (ExprBinaryExpr -> Expr MULTIPLICATION Expr .)
    LEFTSQRBRACKET  reduce using rule 82 (ExprBinaryExpr -> Expr MULTIPLICATION Expr .)
    RIGHTSQRBRACKET reduce using rule 82 (ExprBinaryExpr -> Expr MULTIPLICATION Expr .)
    RIGHTPARENT     reduce using rule 82 (ExprBinaryExpr -> Expr MULTIPLICATION Expr .)
    ADDITION        reduce using rule 82 (ExprBinaryExpr -> Expr MULTIPLICATION Expr .)
    SUBSTRACTION    reduce using rule 82 (ExprBinaryExpr -> Expr MULTIPLICATION Expr .)
    MULTIPLICATION  reduce using rule 82 (ExprBinaryExpr -> Expr MULTIPLICATION Expr .)
    DIVISION        reduce using rule 82 (ExprBinaryExpr -> Expr MULTIPLICATION Expr .)
    MODULO          reduce using rule 82 (ExprBinaryExpr -> Expr MULTIPLICATION Expr .)
    AND             reduce using rule 82 (ExprBinaryExpr -> Expr MULTIPLICATION Expr .)
    OR              reduce using rule 82 (ExprBinaryExpr -> Expr MULTIPLICATION Expr .)
    CONCAT          reduce using rule 82 (ExprBinaryExpr -> Expr MULTIPLICATION Expr .)
    LESS            reduce using rule 82 (ExprBinaryExpr -> Expr MULTIPLICATION Expr .)
    LESSEQUAL       reduce using rule 82 (ExprBinaryExpr -> Expr MULTIPLICATION Expr .)
    GREATER         reduce using rule 82 (ExprBinaryExpr -> Expr MULTIPLICATION Expr .)
    GREATEREQUAL    reduce using rule 82 (ExprBinaryExpr -> Expr MULTIPLICATION Expr .)
    EQUAL           reduce using rule 82 (ExprBinaryExpr -> Expr MULTIPLICATION Expr .)
    NOTEQUAL        reduce using rule 82 (ExprBinaryExpr -> Expr MULTIPLICATION Expr .)
    DOT             shift and go to state 139

  ! DOT             [ reduce using rule 82 (ExprBinaryExpr -> Expr MULTIPLICATION Expr .) ]
  ! LEFTSQRBRACKET  [ shift and go to state 121 ]
  ! ADDITION        [ shift and go to state 119 ]
  ! SUBSTRACTION    [ shift and go to state 127 ]
  ! MULTIPLICATION  [ shift and go to state 126 ]
  ! DIVISION        [ shift and go to state 115 ]
  ! MODULO          [ shift and go to state 116 ]
  ! AND             [ shift and go to state 114 ]
  ! OR              [ shift and go to state 128 ]
  ! CONCAT          [ shift and go to state 124 ]
  ! LESS            [ shift and go to state 118 ]
  ! LESSEQUAL       [ shift and go to state 122 ]
  ! GREATER         [ shift and go to state 117 ]
  ! GREATEREQUAL    [ shift and go to state 120 ]
  ! EQUAL           [ shift and go to state 125 ]
  ! NOTEQUAL        [ shift and go to state 123 ]


state 160

    (81) ExprBinaryExpr -> Expr SUBSTRACTION Expr .
    (50) Location -> Expr . DOT IDEN
    (51) Location -> Expr . LEFTSQRBRACKET Expr RIGHTSQRBRACKET
    (79) ExprLength -> Expr . DOT LENGTH
    (80) ExprBinaryExpr -> Expr . ADDITION Expr
    (81) ExprBinaryExpr -> Expr . SUBSTRACTION Expr
    (82) ExprBinaryExpr -> Expr . MULTIPLICATION Expr
    (83) ExprBinaryExpr -> Expr . DIVISION Expr
    (84) ExprBinaryExpr -> Expr . MODULO Expr
    (85) ExprBinaryExpr -> Expr . AND Expr
    (86) ExprBinaryExpr -> Expr . OR Expr
    (87) ExprBinaryExpr -> Expr . CONCAT Expr
    (88) ExprBinaryExpr -> Expr . LESS Expr
    (89) ExprBinaryExpr -> Expr . LESSEQUAL Expr
    (90) ExprBinaryExpr -> Expr . GREATER Expr
    (91) ExprBinaryExpr -> Expr . GREATEREQUAL Expr
    (92) ExprBinaryExpr -> Expr . EQUAL Expr
    (93) ExprBinaryExpr -> Expr . NOTEQUAL Expr
    (54) Method -> Expr . DOT IDEN

    COMMA           reduce using rule 81 (ExprBinaryExpr -> Expr SUBSTRACTION Expr .)
    SEMICOLON       reduce using rule 81 (ExprBinaryExpr -> Expr SUBSTRACTION Expr .)
    LEFTSQRBRACKET  reduce using rule 81 (ExprBinaryExpr -> Expr SUBSTRACTION Expr .)
    RIGHTSQRBRACKET reduce using rule 81 (ExprBinaryExpr -> Expr SUBSTRACTION Expr .)
    RIGHTPARENT     reduce using rule 81 (ExprBinaryExpr -> Expr SUBSTRACTION Expr .)
    ADDITION        reduce using rule 81 (ExprBinaryExpr -> Expr SUBSTRACTION Expr .)
    SUBSTRACTION    reduce using rule 81 (ExprBinaryExpr -> Expr SUBSTRACTION Expr .)
    AND             reduce using rule 81 (ExprBinaryExpr -> Expr SUBSTRACTION Expr .)
    OR              reduce using rule 81 (ExprBinaryExpr -> Expr SUBSTRACTION Expr .)
    CONCAT          reduce using rule 81 (ExprBinaryExpr -> Expr SUBSTRACTION Expr .)
    LESS            reduce using rule 81 (ExprBinaryExpr -> Expr SUBSTRACTION Expr .)
    LESSEQUAL       reduce using rule 81 (ExprBinaryExpr -> Expr SUBSTRACTION Expr .)
    GREATER         reduce using rule 81 (ExprBinaryExpr -> Expr SUBSTRACTION Expr .)
    GREATEREQUAL    reduce using rule 81 (ExprBinaryExpr -> Expr SUBSTRACTION Expr .)
    EQUAL           reduce using rule 81 (ExprBinaryExpr -> Expr SUBSTRACTION Expr .)
    NOTEQUAL        reduce using rule 81 (ExprBinaryExpr -> Expr SUBSTRACTION Expr .)
    DOT             shift and go to state 139
    MULTIPLICATION  shift and go to state 126
    DIVISION        shift and go to state 115
    MODULO          shift and go to state 116

  ! DOT             [ reduce using rule 81 (ExprBinaryExpr -> Expr SUBSTRACTION Expr .) ]
  ! MULTIPLICATION  [ reduce using rule 81 (ExprBinaryExpr -> Expr SUBSTRACTION Expr .) ]
  ! DIVISION        [ reduce using rule 81 (ExprBinaryExpr -> Expr SUBSTRACTION Expr .) ]
  ! MODULO          [ reduce using rule 81 (ExprBinaryExpr -> Expr SUBSTRACTION Expr .) ]
  ! LEFTSQRBRACKET  [ shift and go to state 121 ]
  ! ADDITION        [ shift and go to state 119 ]
  ! SUBSTRACTION    [ shift and go to state 127 ]
  ! AND             [ shift and go to state 114 ]
  ! OR              [ shift and go to state 128 ]
  ! CONCAT          [ shift and go to state 124 ]
  ! LESS            [ shift and go to state 118 ]
  ! LESSEQUAL       [ shift and go to state 122 ]
  ! GREATER         [ shift and go to state 117 ]
  ! GREATEREQUAL    [ shift and go to state 120 ]
  ! EQUAL           [ shift and go to state 125 ]
  ! NOTEQUAL        [ shift and go to state 123 ]


state 161

    (86) ExprBinaryExpr -> Expr OR Expr .
    (50) Location -> Expr . DOT IDEN
    (51) Location -> Expr . LEFTSQRBRACKET Expr RIGHTSQRBRACKET
    (79) ExprLength -> Expr . DOT LENGTH
    (80) ExprBinaryExpr -> Expr . ADDITION Expr
    (81) ExprBinaryExpr -> Expr . SUBSTRACTION Expr
    (82) ExprBinaryExpr -> Expr . MULTIPLICATION Expr
    (83) ExprBinaryExpr -> Expr . DIVISION Expr
    (84) ExprBinaryExpr -> Expr . MODULO Expr
    (85) ExprBinaryExpr -> Expr . AND Expr
    (86) ExprBinaryExpr -> Expr . OR Expr
    (87) ExprBinaryExpr -> Expr . CONCAT Expr
    (88) ExprBinaryExpr -> Expr . LESS Expr
    (89) ExprBinaryExpr -> Expr . LESSEQUAL Expr
    (90) ExprBinaryExpr -> Expr . GREATER Expr
    (91) ExprBinaryExpr -> Expr . GREATEREQUAL Expr
    (92) ExprBinaryExpr -> Expr . EQUAL Expr
    (93) ExprBinaryExpr -> Expr . NOTEQUAL Expr
    (54) Method -> Expr . DOT IDEN

    COMMA           reduce using rule 86 (ExprBinaryExpr -> Expr OR Expr .)
    SEMICOLON       reduce using rule 86 (ExprBinaryExpr -> Expr OR Expr .)
    LEFTSQRBRACKET  reduce using rule 86 (ExprBinaryExpr -> Expr OR Expr .)
    RIGHTSQRBRACKET reduce using rule 86 (ExprBinaryExpr -> Expr OR Expr .)
    RIGHTPARENT     reduce using rule 86 (ExprBinaryExpr -> Expr OR Expr .)
    OR              reduce using rule 86 (ExprBinaryExpr -> Expr OR Expr .)
    DOT             shift and go to state 139
    ADDITION        shift and go to state 119
    SUBSTRACTION    shift and go to state 127
    MULTIPLICATION  shift and go to state 126
    DIVISION        shift and go to state 115
    MODULO          shift and go to state 116
    AND             shift and go to state 114
    CONCAT          shift and go to state 124
    LESS            shift and go to state 118
    LESSEQUAL       shift and go to state 122
    GREATER         shift and go to state 117
    GREATEREQUAL    shift and go to state 120
    EQUAL           shift and go to state 125
    NOTEQUAL        shift and go to state 123

  ! DOT             [ reduce using rule 86 (ExprBinaryExpr -> Expr OR Expr .) ]
  ! ADDITION        [ reduce using rule 86 (ExprBinaryExpr -> Expr OR Expr .) ]
  ! SUBSTRACTION    [ reduce using rule 86 (ExprBinaryExpr -> Expr OR Expr .) ]
  ! MULTIPLICATION  [ reduce using rule 86 (ExprBinaryExpr -> Expr OR Expr .) ]
  ! DIVISION        [ reduce using rule 86 (ExprBinaryExpr -> Expr OR Expr .) ]
  ! MODULO          [ reduce using rule 86 (ExprBinaryExpr -> Expr OR Expr .) ]
  ! AND             [ reduce using rule 86 (ExprBinaryExpr -> Expr OR Expr .) ]
  ! CONCAT          [ reduce using rule 86 (ExprBinaryExpr -> Expr OR Expr .) ]
  ! LESS            [ reduce using rule 86 (ExprBinaryExpr -> Expr OR Expr .) ]
  ! LESSEQUAL       [ reduce using rule 86 (ExprBinaryExpr -> Expr OR Expr .) ]
  ! GREATER         [ reduce using rule 86 (ExprBinaryExpr -> Expr OR Expr .) ]
  ! GREATEREQUAL    [ reduce using rule 86 (ExprBinaryExpr -> Expr OR Expr .) ]
  ! EQUAL           [ reduce using rule 86 (ExprBinaryExpr -> Expr OR Expr .) ]
  ! NOTEQUAL        [ reduce using rule 86 (ExprBinaryExpr -> Expr OR Expr .) ]
  ! LEFTSQRBRACKET  [ shift and go to state 121 ]
  ! OR              [ shift and go to state 128 ]


state 162

    (50) Location -> Expr DOT IDEN .
    (54) Method -> Expr DOT IDEN .

    ASSIGNMENT      reduce using rule 50 (Location -> Expr DOT IDEN .)
    COMMA           reduce using rule 50 (Location -> Expr DOT IDEN .)
    SEMICOLON       reduce using rule 50 (Location -> Expr DOT IDEN .)
    DOT             reduce using rule 50 (Location -> Expr DOT IDEN .)
    LEFTSQRBRACKET  reduce using rule 50 (Location -> Expr DOT IDEN .)
    RIGHTSQRBRACKET reduce using rule 50 (Location -> Expr DOT IDEN .)
    RIGHTPARENT     reduce using rule 50 (Location -> Expr DOT IDEN .)
    ADDITION        reduce using rule 50 (Location -> Expr DOT IDEN .)
    SUBSTRACTION    reduce using rule 50 (Location -> Expr DOT IDEN .)
    MULTIPLICATION  reduce using rule 50 (Location -> Expr DOT IDEN .)
    DIVISION        reduce using rule 50 (Location -> Expr DOT IDEN .)
    MODULO          reduce using rule 50 (Location -> Expr DOT IDEN .)
    AND             reduce using rule 50 (Location -> Expr DOT IDEN .)
    OR              reduce using rule 50 (Location -> Expr DOT IDEN .)
    CONCAT          reduce using rule 50 (Location -> Expr DOT IDEN .)
    LESS            reduce using rule 50 (Location -> Expr DOT IDEN .)
    LESSEQUAL       reduce using rule 50 (Location -> Expr DOT IDEN .)
    GREATER         reduce using rule 50 (Location -> Expr DOT IDEN .)
    GREATEREQUAL    reduce using rule 50 (Location -> Expr DOT IDEN .)
    EQUAL           reduce using rule 50 (Location -> Expr DOT IDEN .)
    NOTEQUAL        reduce using rule 50 (Location -> Expr DOT IDEN .)
    LEFTPARENT      reduce using rule 54 (Method -> Expr DOT IDEN .)


state 163

    (79) ExprLength -> Expr DOT LENGTH .

    COMMA           reduce using rule 79 (ExprLength -> Expr DOT LENGTH .)
    SEMICOLON       reduce using rule 79 (ExprLength -> Expr DOT LENGTH .)
    DOT             reduce using rule 79 (ExprLength -> Expr DOT LENGTH .)
    LEFTSQRBRACKET  reduce using rule 79 (ExprLength -> Expr DOT LENGTH .)
    RIGHTSQRBRACKET reduce using rule 79 (ExprLength -> Expr DOT LENGTH .)
    RIGHTPARENT     reduce using rule 79 (ExprLength -> Expr DOT LENGTH .)
    ADDITION        reduce using rule 79 (ExprLength -> Expr DOT LENGTH .)
    SUBSTRACTION    reduce using rule 79 (ExprLength -> Expr DOT LENGTH .)
    MULTIPLICATION  reduce using rule 79 (ExprLength -> Expr DOT LENGTH .)
    DIVISION        reduce using rule 79 (ExprLength -> Expr DOT LENGTH .)
    MODULO          reduce using rule 79 (ExprLength -> Expr DOT LENGTH .)
    AND             reduce using rule 79 (ExprLength -> Expr DOT LENGTH .)
    OR              reduce using rule 79 (ExprLength -> Expr DOT LENGTH .)
    CONCAT          reduce using rule 79 (ExprLength -> Expr DOT LENGTH .)
    LESS            reduce using rule 79 (ExprLength -> Expr DOT LENGTH .)
    LESSEQUAL       reduce using rule 79 (ExprLength -> Expr DOT LENGTH .)
    GREATER         reduce using rule 79 (ExprLength -> Expr DOT LENGTH .)
    GREATEREQUAL    reduce using rule 79 (ExprLength -> Expr DOT LENGTH .)
    EQUAL           reduce using rule 79 (ExprLength -> Expr DOT LENGTH .)
    NOTEQUAL        reduce using rule 79 (ExprLength -> Expr DOT LENGTH .)


state 164

    (102) ParentExprParent -> LEFTPARENT Expr RIGHTPARENT .

    COMMA           reduce using rule 102 (ParentExprParent -> LEFTPARENT Expr RIGHTPARENT .)
    SEMICOLON       reduce using rule 102 (ParentExprParent -> LEFTPARENT Expr RIGHTPARENT .)
    DOT             reduce using rule 102 (ParentExprParent -> LEFTPARENT Expr RIGHTPARENT .)
    LEFTSQRBRACKET  reduce using rule 102 (ParentExprParent -> LEFTPARENT Expr RIGHTPARENT .)
    RIGHTSQRBRACKET reduce using rule 102 (ParentExprParent -> LEFTPARENT Expr RIGHTPARENT .)
    RIGHTPARENT     reduce using rule 102 (ParentExprParent -> LEFTPARENT Expr RIGHTPARENT .)
    ADDITION        reduce using rule 102 (ParentExprParent -> LEFTPARENT Expr RIGHTPARENT .)
    SUBSTRACTION    reduce using rule 102 (ParentExprParent -> LEFTPARENT Expr RIGHTPARENT .)
    MULTIPLICATION  reduce using rule 102 (ParentExprParent -> LEFTPARENT Expr RIGHTPARENT .)
    DIVISION        reduce using rule 102 (ParentExprParent -> LEFTPARENT Expr RIGHTPARENT .)
    MODULO          reduce using rule 102 (ParentExprParent -> LEFTPARENT Expr RIGHTPARENT .)
    AND             reduce using rule 102 (ParentExprParent -> LEFTPARENT Expr RIGHTPARENT .)
    OR              reduce using rule 102 (ParentExprParent -> LEFTPARENT Expr RIGHTPARENT .)
    CONCAT          reduce using rule 102 (ParentExprParent -> LEFTPARENT Expr RIGHTPARENT .)
    LESS            reduce using rule 102 (ParentExprParent -> LEFTPARENT Expr RIGHTPARENT .)
    LESSEQUAL       reduce using rule 102 (ParentExprParent -> LEFTPARENT Expr RIGHTPARENT .)
    GREATER         reduce using rule 102 (ParentExprParent -> LEFTPARENT Expr RIGHTPARENT .)
    GREATEREQUAL    reduce using rule 102 (ParentExprParent -> LEFTPARENT Expr RIGHTPARENT .)
    EQUAL           reduce using rule 102 (ParentExprParent -> LEFTPARENT Expr RIGHTPARENT .)
    NOTEQUAL        reduce using rule 102 (ParentExprParent -> LEFTPARENT Expr RIGHTPARENT .)


state 165

    (62) IfStmt -> IF LEFTPARENT Expr . RIGHTPARENT Stmt ElseStmt
    (50) Location -> Expr . DOT IDEN
    (51) Location -> Expr . LEFTSQRBRACKET Expr RIGHTSQRBRACKET
    (79) ExprLength -> Expr . DOT LENGTH
    (80) ExprBinaryExpr -> Expr . ADDITION Expr
    (81) ExprBinaryExpr -> Expr . SUBSTRACTION Expr
    (82) ExprBinaryExpr -> Expr . MULTIPLICATION Expr
    (83) ExprBinaryExpr -> Expr . DIVISION Expr
    (84) ExprBinaryExpr -> Expr . MODULO Expr
    (85) ExprBinaryExpr -> Expr . AND Expr
    (86) ExprBinaryExpr -> Expr . OR Expr
    (87) ExprBinaryExpr -> Expr . CONCAT Expr
    (88) ExprBinaryExpr -> Expr . LESS Expr
    (89) ExprBinaryExpr -> Expr . LESSEQUAL Expr
    (90) ExprBinaryExpr -> Expr . GREATER Expr
    (91) ExprBinaryExpr -> Expr . GREATEREQUAL Expr
    (92) ExprBinaryExpr -> Expr . EQUAL Expr
    (93) ExprBinaryExpr -> Expr . NOTEQUAL Expr
    (54) Method -> Expr . DOT IDEN

    RIGHTPARENT     shift and go to state 180
    DOT             shift and go to state 139
    LEFTSQRBRACKET  shift and go to state 121
    ADDITION        shift and go to state 119
    SUBSTRACTION    shift and go to state 127
    MULTIPLICATION  shift and go to state 126
    DIVISION        shift and go to state 115
    MODULO          shift and go to state 116
    AND             shift and go to state 114
    OR              shift and go to state 128
    CONCAT          shift and go to state 124
    LESS            shift and go to state 118
    LESSEQUAL       shift and go to state 122
    GREATER         shift and go to state 117
    GREATEREQUAL    shift and go to state 120
    EQUAL           shift and go to state 125
    NOTEQUAL        shift and go to state 123


state 166

    (38) ExpDecl -> ASSIGNMENT Expr .
    (50) Location -> Expr . DOT IDEN
    (51) Location -> Expr . LEFTSQRBRACKET Expr RIGHTSQRBRACKET
    (79) ExprLength -> Expr . DOT LENGTH
    (80) ExprBinaryExpr -> Expr . ADDITION Expr
    (81) ExprBinaryExpr -> Expr . SUBSTRACTION Expr
    (82) ExprBinaryExpr -> Expr . MULTIPLICATION Expr
    (83) ExprBinaryExpr -> Expr . DIVISION Expr
    (84) ExprBinaryExpr -> Expr . MODULO Expr
    (85) ExprBinaryExpr -> Expr . AND Expr
    (86) ExprBinaryExpr -> Expr . OR Expr
    (87) ExprBinaryExpr -> Expr . CONCAT Expr
    (88) ExprBinaryExpr -> Expr . LESS Expr
    (89) ExprBinaryExpr -> Expr . LESSEQUAL Expr
    (90) ExprBinaryExpr -> Expr . GREATER Expr
    (91) ExprBinaryExpr -> Expr . GREATEREQUAL Expr
    (92) ExprBinaryExpr -> Expr . EQUAL Expr
    (93) ExprBinaryExpr -> Expr . NOTEQUAL Expr
    (54) Method -> Expr . DOT IDEN

    COMMA           reduce using rule 38 (ExpDecl -> ASSIGNMENT Expr .)
    SEMICOLON       reduce using rule 38 (ExpDecl -> ASSIGNMENT Expr .)
    DOT             shift and go to state 139
    LEFTSQRBRACKET  shift and go to state 121
    ADDITION        shift and go to state 119
    SUBSTRACTION    shift and go to state 127
    MULTIPLICATION  shift and go to state 126
    DIVISION        shift and go to state 115
    MODULO          shift and go to state 116
    AND             shift and go to state 114
    OR              shift and go to state 128
    CONCAT          shift and go to state 124
    LESS            shift and go to state 118
    LESSEQUAL       shift and go to state 122
    GREATER         shift and go to state 117
    GREATEREQUAL    shift and go to state 120
    EQUAL           shift and go to state 125
    NOTEQUAL        shift and go to state 123


state 167

    (33) VarDeclList -> Type IDEN ExpDecl ExpDeclList . SEMICOLON VarDeclList

    SEMICOLON       shift and go to state 181


state 168

    (37) CommaExpDecl -> COMMA . IDEN ExpDecl

    IDEN            shift and go to state 182


state 169

    (35) ExpDeclList -> CommaExpDecl . ExpDeclList
    (35) ExpDeclList -> . CommaExpDecl ExpDeclList
    (36) ExpDeclList -> . empty
    (37) CommaExpDecl -> . COMMA IDEN ExpDecl
    (108) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 168
    $end            reduce using rule 108 (empty -> .)
    LEFTBRACE       reduce using rule 108 (empty -> .)
    RIGHTBRACE      reduce using rule 108 (empty -> .)
    SEMICOLON       reduce using rule 108 (empty -> .)
    RIGHTPARENT     reduce using rule 108 (empty -> .)
    RETURN          reduce using rule 108 (empty -> .)
    IF              reduce using rule 108 (empty -> .)
    BREAK           reduce using rule 108 (empty -> .)
    CONTINUE        reduce using rule 108 (empty -> .)
    IDEN            reduce using rule 108 (empty -> .)
    WHILE           reduce using rule 108 (empty -> .)
    THIS            reduce using rule 108 (empty -> .)
    NEW             reduce using rule 108 (empty -> .)
    INT             reduce using rule 108 (empty -> .)
    STRING          reduce using rule 108 (empty -> .)
    TRUE            reduce using rule 108 (empty -> .)
    FALSE           reduce using rule 108 (empty -> .)
    NULL            reduce using rule 108 (empty -> .)
    LEFTPARENT      reduce using rule 108 (empty -> .)
    NOT             reduce using rule 108 (empty -> .)
    CIENTIFIC       reduce using rule 108 (empty -> .)
    HEXADEC         reduce using rule 108 (empty -> .)
    NUMBER          reduce using rule 108 (empty -> .)
    BINARY          reduce using rule 108 (empty -> .)
    FLOAT           reduce using rule 108 (empty -> .)
    SUBSTRACTION    reduce using rule 108 (empty -> .)
    ELSE            reduce using rule 108 (empty -> .)

  ! COMMA           [ reduce using rule 108 (empty -> .) ]

    CommaExpDecl                   shift and go to state 169
    ExpDeclList                    shift and go to state 183
    empty                          shift and go to state 170

state 170

    (36) ExpDeclList -> empty .

    SEMICOLON       reduce using rule 36 (ExpDeclList -> empty .)


state 171

    (65) WhileStmt -> WHILE LEFTPARENT Expr RIGHTPARENT . Stmt
    (40) Stmt -> . Assign SEMICOLON
    (41) Stmt -> . Call SEMICOLON
    (42) Stmt -> . Return
    (43) Stmt -> . IfStmt
    (44) Stmt -> . WhileStmt
    (45) Stmt -> . BREAK SEMICOLON
    (46) Stmt -> . CONTINUE SEMICOLON
    (47) Stmt -> . Block
    (48) Assign -> . Location ASSIGNMENT Expr
    (52) Call -> . Method LEFTPARENT Actuals RIGHTPARENT
    (59) Return -> . RETURN ReturnExpr SEMICOLON
    (62) IfStmt -> . IF LEFTPARENT Expr RIGHTPARENT Stmt ElseStmt
    (65) WhileStmt -> . WHILE LEFTPARENT Expr RIGHTPARENT Stmt
    (30) Block -> . LEFTBRACE VarDeclList StmtList RIGHTBRACE
    (49) Location -> . IDEN
    (50) Location -> . Expr DOT IDEN
    (51) Location -> . Expr LEFTSQRBRACKET Expr RIGHTSQRBRACKET
    (53) Method -> . IDEN
    (54) Method -> . Expr DOT IDEN
    (66) Expr -> . Location
    (67) Expr -> . Call
    (68) Expr -> . THIS
    (69) Expr -> . NewId
    (70) Expr -> . NewTypeExpr
    (71) Expr -> . ExprLength
    (72) Expr -> . ExprBinaryExpr
    (73) Expr -> . UnaryExpr
    (74) Expr -> . Literal
    (75) Expr -> . Number
    (76) Expr -> . ParentExprParent
    (77) NewId -> . NEW IDEN LEFTPARENT RIGHTPARENT
    (78) NewTypeExpr -> . NEW Type LEFTSQRBRACKET Expr LEFTSQRBRACKET
    (79) ExprLength -> . Expr DOT LENGTH
    (80) ExprBinaryExpr -> . Expr ADDITION Expr
    (81) ExprBinaryExpr -> . Expr SUBSTRACTION Expr
    (82) ExprBinaryExpr -> . Expr MULTIPLICATION Expr
    (83) ExprBinaryExpr -> . Expr DIVISION Expr
    (84) ExprBinaryExpr -> . Expr MODULO Expr
    (85) ExprBinaryExpr -> . Expr AND Expr
    (86) ExprBinaryExpr -> . Expr OR Expr
    (87) ExprBinaryExpr -> . Expr CONCAT Expr
    (88) ExprBinaryExpr -> . Expr LESS Expr
    (89) ExprBinaryExpr -> . Expr LESSEQUAL Expr
    (90) ExprBinaryExpr -> . Expr GREATER Expr
    (91) ExprBinaryExpr -> . Expr GREATEREQUAL Expr
    (92) ExprBinaryExpr -> . Expr EQUAL Expr
    (93) ExprBinaryExpr -> . Expr NOTEQUAL Expr
    (94) UnaryExpr -> . UnaryMinus
    (95) UnaryExpr -> . NOT
    (97) Literal -> . INT
    (98) Literal -> . STRING
    (99) Literal -> . TRUE
    (100) Literal -> . FALSE
    (101) Literal -> . NULL
    (103) Number -> . CIENTIFIC
    (104) Number -> . HEXADEC
    (105) Number -> . NUMBER
    (106) Number -> . BINARY
    (107) Number -> . FLOAT
    (102) ParentExprParent -> . LEFTPARENT Expr RIGHTPARENT
    (96) UnaryMinus -> . SUBSTRACTION Expr

    BREAK           shift and go to state 94
    CONTINUE        shift and go to state 95
    RETURN          shift and go to state 58
    IF              shift and go to state 87
    WHILE           shift and go to state 60
    LEFTBRACE       shift and go to state 47
    IDEN            shift and go to state 57
    THIS            shift and go to state 90
    NEW             shift and go to state 64
    NOT             shift and go to state 96
    INT             shift and go to state 75
    STRING          shift and go to state 77
    TRUE            shift and go to state 69
    FALSE           shift and go to state 89
    NULL            shift and go to state 65
    CIENTIFIC       shift and go to state 70
    HEXADEC         shift and go to state 81
    NUMBER          shift and go to state 98
    BINARY          shift and go to state 78
    FLOAT           shift and go to state 91
    LEFTPARENT      shift and go to state 84
    SUBSTRACTION    shift and go to state 97

    ParentExprParent               shift and go to state 59
    Literal                        shift and go to state 92
    Call                           shift and go to state 61
    Location                       shift and go to state 62
    Method                         shift and go to state 66
    Return                         shift and go to state 67
    ExprLength                     shift and go to state 68
    Stmt                           shift and go to state 184
    IfStmt                         shift and go to state 72
    NewId                          shift and go to state 73
    NewTypeExpr                    shift and go to state 79
    Expr                           shift and go to state 80
    UnaryExpr                      shift and go to state 82
    WhileStmt                      shift and go to state 83
    Assign                         shift and go to state 85
    Block                          shift and go to state 86
    ExprBinaryExpr                 shift and go to state 88
    Number                         shift and go to state 74
    UnaryMinus                     shift and go to state 93

state 172

    (77) NewId -> NEW IDEN LEFTPARENT RIGHTPARENT .

    COMMA           reduce using rule 77 (NewId -> NEW IDEN LEFTPARENT RIGHTPARENT .)
    SEMICOLON       reduce using rule 77 (NewId -> NEW IDEN LEFTPARENT RIGHTPARENT .)
    DOT             reduce using rule 77 (NewId -> NEW IDEN LEFTPARENT RIGHTPARENT .)
    LEFTSQRBRACKET  reduce using rule 77 (NewId -> NEW IDEN LEFTPARENT RIGHTPARENT .)
    RIGHTSQRBRACKET reduce using rule 77 (NewId -> NEW IDEN LEFTPARENT RIGHTPARENT .)
    RIGHTPARENT     reduce using rule 77 (NewId -> NEW IDEN LEFTPARENT RIGHTPARENT .)
    ADDITION        reduce using rule 77 (NewId -> NEW IDEN LEFTPARENT RIGHTPARENT .)
    SUBSTRACTION    reduce using rule 77 (NewId -> NEW IDEN LEFTPARENT RIGHTPARENT .)
    MULTIPLICATION  reduce using rule 77 (NewId -> NEW IDEN LEFTPARENT RIGHTPARENT .)
    DIVISION        reduce using rule 77 (NewId -> NEW IDEN LEFTPARENT RIGHTPARENT .)
    MODULO          reduce using rule 77 (NewId -> NEW IDEN LEFTPARENT RIGHTPARENT .)
    AND             reduce using rule 77 (NewId -> NEW IDEN LEFTPARENT RIGHTPARENT .)
    OR              reduce using rule 77 (NewId -> NEW IDEN LEFTPARENT RIGHTPARENT .)
    CONCAT          reduce using rule 77 (NewId -> NEW IDEN LEFTPARENT RIGHTPARENT .)
    LESS            reduce using rule 77 (NewId -> NEW IDEN LEFTPARENT RIGHTPARENT .)
    LESSEQUAL       reduce using rule 77 (NewId -> NEW IDEN LEFTPARENT RIGHTPARENT .)
    GREATER         reduce using rule 77 (NewId -> NEW IDEN LEFTPARENT RIGHTPARENT .)
    GREATEREQUAL    reduce using rule 77 (NewId -> NEW IDEN LEFTPARENT RIGHTPARENT .)
    EQUAL           reduce using rule 77 (NewId -> NEW IDEN LEFTPARENT RIGHTPARENT .)
    NOTEQUAL        reduce using rule 77 (NewId -> NEW IDEN LEFTPARENT RIGHTPARENT .)


state 173

    (78) NewTypeExpr -> NEW Type LEFTSQRBRACKET Expr . LEFTSQRBRACKET
    (50) Location -> Expr . DOT IDEN
    (51) Location -> Expr . LEFTSQRBRACKET Expr RIGHTSQRBRACKET
    (79) ExprLength -> Expr . DOT LENGTH
    (80) ExprBinaryExpr -> Expr . ADDITION Expr
    (81) ExprBinaryExpr -> Expr . SUBSTRACTION Expr
    (82) ExprBinaryExpr -> Expr . MULTIPLICATION Expr
    (83) ExprBinaryExpr -> Expr . DIVISION Expr
    (84) ExprBinaryExpr -> Expr . MODULO Expr
    (85) ExprBinaryExpr -> Expr . AND Expr
    (86) ExprBinaryExpr -> Expr . OR Expr
    (87) ExprBinaryExpr -> Expr . CONCAT Expr
    (88) ExprBinaryExpr -> Expr . LESS Expr
    (89) ExprBinaryExpr -> Expr . LESSEQUAL Expr
    (90) ExprBinaryExpr -> Expr . GREATER Expr
    (91) ExprBinaryExpr -> Expr . GREATEREQUAL Expr
    (92) ExprBinaryExpr -> Expr . EQUAL Expr
    (93) ExprBinaryExpr -> Expr . NOTEQUAL Expr
    (54) Method -> Expr . DOT IDEN

    LEFTSQRBRACKET  shift and go to state 185
    DOT             shift and go to state 139
    ADDITION        shift and go to state 119
    SUBSTRACTION    shift and go to state 127
    MULTIPLICATION  shift and go to state 126
    DIVISION        shift and go to state 115
    MODULO          shift and go to state 116
    AND             shift and go to state 114
    OR              shift and go to state 128
    CONCAT          shift and go to state 124
    LESS            shift and go to state 118
    LESSEQUAL       shift and go to state 122
    GREATER         shift and go to state 117
    GREATEREQUAL    shift and go to state 120
    EQUAL           shift and go to state 125
    NOTEQUAL        shift and go to state 123


state 174

    (52) Call -> Method LEFTPARENT Actuals RIGHTPARENT .

    SEMICOLON       reduce using rule 52 (Call -> Method LEFTPARENT Actuals RIGHTPARENT .)
    COMMA           reduce using rule 52 (Call -> Method LEFTPARENT Actuals RIGHTPARENT .)
    DOT             reduce using rule 52 (Call -> Method LEFTPARENT Actuals RIGHTPARENT .)
    LEFTSQRBRACKET  reduce using rule 52 (Call -> Method LEFTPARENT Actuals RIGHTPARENT .)
    RIGHTSQRBRACKET reduce using rule 52 (Call -> Method LEFTPARENT Actuals RIGHTPARENT .)
    RIGHTPARENT     reduce using rule 52 (Call -> Method LEFTPARENT Actuals RIGHTPARENT .)
    ADDITION        reduce using rule 52 (Call -> Method LEFTPARENT Actuals RIGHTPARENT .)
    SUBSTRACTION    reduce using rule 52 (Call -> Method LEFTPARENT Actuals RIGHTPARENT .)
    MULTIPLICATION  reduce using rule 52 (Call -> Method LEFTPARENT Actuals RIGHTPARENT .)
    DIVISION        reduce using rule 52 (Call -> Method LEFTPARENT Actuals RIGHTPARENT .)
    MODULO          reduce using rule 52 (Call -> Method LEFTPARENT Actuals RIGHTPARENT .)
    AND             reduce using rule 52 (Call -> Method LEFTPARENT Actuals RIGHTPARENT .)
    OR              reduce using rule 52 (Call -> Method LEFTPARENT Actuals RIGHTPARENT .)
    CONCAT          reduce using rule 52 (Call -> Method LEFTPARENT Actuals RIGHTPARENT .)
    LESS            reduce using rule 52 (Call -> Method LEFTPARENT Actuals RIGHTPARENT .)
    LESSEQUAL       reduce using rule 52 (Call -> Method LEFTPARENT Actuals RIGHTPARENT .)
    GREATER         reduce using rule 52 (Call -> Method LEFTPARENT Actuals RIGHTPARENT .)
    GREATEREQUAL    reduce using rule 52 (Call -> Method LEFTPARENT Actuals RIGHTPARENT .)
    EQUAL           reduce using rule 52 (Call -> Method LEFTPARENT Actuals RIGHTPARENT .)
    NOTEQUAL        reduce using rule 52 (Call -> Method LEFTPARENT Actuals RIGHTPARENT .)


state 175

    (58) ExprComma -> COMMA . Expr
    (66) Expr -> . Location
    (67) Expr -> . Call
    (68) Expr -> . THIS
    (69) Expr -> . NewId
    (70) Expr -> . NewTypeExpr
    (71) Expr -> . ExprLength
    (72) Expr -> . ExprBinaryExpr
    (73) Expr -> . UnaryExpr
    (74) Expr -> . Literal
    (75) Expr -> . Number
    (76) Expr -> . ParentExprParent
    (49) Location -> . IDEN
    (50) Location -> . Expr DOT IDEN
    (51) Location -> . Expr LEFTSQRBRACKET Expr RIGHTSQRBRACKET
    (52) Call -> . Method LEFTPARENT Actuals RIGHTPARENT
    (77) NewId -> . NEW IDEN LEFTPARENT RIGHTPARENT
    (78) NewTypeExpr -> . NEW Type LEFTSQRBRACKET Expr LEFTSQRBRACKET
    (79) ExprLength -> . Expr DOT LENGTH
    (80) ExprBinaryExpr -> . Expr ADDITION Expr
    (81) ExprBinaryExpr -> . Expr SUBSTRACTION Expr
    (82) ExprBinaryExpr -> . Expr MULTIPLICATION Expr
    (83) ExprBinaryExpr -> . Expr DIVISION Expr
    (84) ExprBinaryExpr -> . Expr MODULO Expr
    (85) ExprBinaryExpr -> . Expr AND Expr
    (86) ExprBinaryExpr -> . Expr OR Expr
    (87) ExprBinaryExpr -> . Expr CONCAT Expr
    (88) ExprBinaryExpr -> . Expr LESS Expr
    (89) ExprBinaryExpr -> . Expr LESSEQUAL Expr
    (90) ExprBinaryExpr -> . Expr GREATER Expr
    (91) ExprBinaryExpr -> . Expr GREATEREQUAL Expr
    (92) ExprBinaryExpr -> . Expr EQUAL Expr
    (93) ExprBinaryExpr -> . Expr NOTEQUAL Expr
    (94) UnaryExpr -> . UnaryMinus
    (95) UnaryExpr -> . NOT
    (97) Literal -> . INT
    (98) Literal -> . STRING
    (99) Literal -> . TRUE
    (100) Literal -> . FALSE
    (101) Literal -> . NULL
    (103) Number -> . CIENTIFIC
    (104) Number -> . HEXADEC
    (105) Number -> . NUMBER
    (106) Number -> . BINARY
    (107) Number -> . FLOAT
    (102) ParentExprParent -> . LEFTPARENT Expr RIGHTPARENT
    (53) Method -> . IDEN
    (54) Method -> . Expr DOT IDEN
    (96) UnaryMinus -> . SUBSTRACTION Expr

    THIS            shift and go to state 90
    IDEN            shift and go to state 57
    NEW             shift and go to state 64
    NOT             shift and go to state 96
    INT             shift and go to state 75
    STRING          shift and go to state 77
    TRUE            shift and go to state 69
    FALSE           shift and go to state 89
    NULL            shift and go to state 65
    CIENTIFIC       shift and go to state 70
    HEXADEC         shift and go to state 81
    NUMBER          shift and go to state 98
    BINARY          shift and go to state 78
    FLOAT           shift and go to state 91
    LEFTPARENT      shift and go to state 84
    SUBSTRACTION    shift and go to state 97

    ExprBinaryExpr                 shift and go to state 88
    Method                         shift and go to state 66
    ExprLength                     shift and go to state 68
    NewTypeExpr                    shift and go to state 79
    Expr                           shift and go to state 186
    UnaryExpr                      shift and go to state 82
    Number                         shift and go to state 74
    Literal                        shift and go to state 92
    NewId                          shift and go to state 73
    Location                       shift and go to state 102
    Call                           shift and go to state 101
    ParentExprParent               shift and go to state 59
    UnaryMinus                     shift and go to state 93

state 176

    (57) ExprCommaList -> empty .

    RIGHTPARENT     reduce using rule 57 (ExprCommaList -> empty .)


state 177

    (55) Actuals -> Expr ExprCommaList .

    RIGHTPARENT     reduce using rule 55 (Actuals -> Expr ExprCommaList .)


state 178

    (56) ExprCommaList -> ExprComma . ExprCommaList
    (56) ExprCommaList -> . ExprComma ExprCommaList
    (57) ExprCommaList -> . empty
    (58) ExprComma -> . COMMA Expr
    (108) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 175
    $end            reduce using rule 108 (empty -> .)
    LEFTBRACE       reduce using rule 108 (empty -> .)
    RIGHTBRACE      reduce using rule 108 (empty -> .)
    SEMICOLON       reduce using rule 108 (empty -> .)
    RIGHTPARENT     reduce using rule 108 (empty -> .)
    RETURN          reduce using rule 108 (empty -> .)
    IF              reduce using rule 108 (empty -> .)
    BREAK           reduce using rule 108 (empty -> .)
    CONTINUE        reduce using rule 108 (empty -> .)
    IDEN            reduce using rule 108 (empty -> .)
    WHILE           reduce using rule 108 (empty -> .)
    THIS            reduce using rule 108 (empty -> .)
    NEW             reduce using rule 108 (empty -> .)
    INT             reduce using rule 108 (empty -> .)
    STRING          reduce using rule 108 (empty -> .)
    TRUE            reduce using rule 108 (empty -> .)
    FALSE           reduce using rule 108 (empty -> .)
    NULL            reduce using rule 108 (empty -> .)
    LEFTPARENT      reduce using rule 108 (empty -> .)
    NOT             reduce using rule 108 (empty -> .)
    CIENTIFIC       reduce using rule 108 (empty -> .)
    HEXADEC         reduce using rule 108 (empty -> .)
    NUMBER          reduce using rule 108 (empty -> .)
    BINARY          reduce using rule 108 (empty -> .)
    FLOAT           reduce using rule 108 (empty -> .)
    SUBSTRACTION    reduce using rule 108 (empty -> .)
    ELSE            reduce using rule 108 (empty -> .)

  ! COMMA           [ reduce using rule 108 (empty -> .) ]

    ExprComma                      shift and go to state 178
    empty                          shift and go to state 176
    ExprCommaList                  shift and go to state 187

state 179

    (51) Location -> Expr LEFTSQRBRACKET Expr RIGHTSQRBRACKET .

    ASSIGNMENT      reduce using rule 51 (Location -> Expr LEFTSQRBRACKET Expr RIGHTSQRBRACKET .)
    COMMA           reduce using rule 51 (Location -> Expr LEFTSQRBRACKET Expr RIGHTSQRBRACKET .)
    SEMICOLON       reduce using rule 51 (Location -> Expr LEFTSQRBRACKET Expr RIGHTSQRBRACKET .)
    DOT             reduce using rule 51 (Location -> Expr LEFTSQRBRACKET Expr RIGHTSQRBRACKET .)
    LEFTSQRBRACKET  reduce using rule 51 (Location -> Expr LEFTSQRBRACKET Expr RIGHTSQRBRACKET .)
    RIGHTSQRBRACKET reduce using rule 51 (Location -> Expr LEFTSQRBRACKET Expr RIGHTSQRBRACKET .)
    RIGHTPARENT     reduce using rule 51 (Location -> Expr LEFTSQRBRACKET Expr RIGHTSQRBRACKET .)
    ADDITION        reduce using rule 51 (Location -> Expr LEFTSQRBRACKET Expr RIGHTSQRBRACKET .)
    SUBSTRACTION    reduce using rule 51 (Location -> Expr LEFTSQRBRACKET Expr RIGHTSQRBRACKET .)
    MULTIPLICATION  reduce using rule 51 (Location -> Expr LEFTSQRBRACKET Expr RIGHTSQRBRACKET .)
    DIVISION        reduce using rule 51 (Location -> Expr LEFTSQRBRACKET Expr RIGHTSQRBRACKET .)
    MODULO          reduce using rule 51 (Location -> Expr LEFTSQRBRACKET Expr RIGHTSQRBRACKET .)
    AND             reduce using rule 51 (Location -> Expr LEFTSQRBRACKET Expr RIGHTSQRBRACKET .)
    OR              reduce using rule 51 (Location -> Expr LEFTSQRBRACKET Expr RIGHTSQRBRACKET .)
    CONCAT          reduce using rule 51 (Location -> Expr LEFTSQRBRACKET Expr RIGHTSQRBRACKET .)
    LESS            reduce using rule 51 (Location -> Expr LEFTSQRBRACKET Expr RIGHTSQRBRACKET .)
    LESSEQUAL       reduce using rule 51 (Location -> Expr LEFTSQRBRACKET Expr RIGHTSQRBRACKET .)
    GREATER         reduce using rule 51 (Location -> Expr LEFTSQRBRACKET Expr RIGHTSQRBRACKET .)
    GREATEREQUAL    reduce using rule 51 (Location -> Expr LEFTSQRBRACKET Expr RIGHTSQRBRACKET .)
    EQUAL           reduce using rule 51 (Location -> Expr LEFTSQRBRACKET Expr RIGHTSQRBRACKET .)
    NOTEQUAL        reduce using rule 51 (Location -> Expr LEFTSQRBRACKET Expr RIGHTSQRBRACKET .)


state 180

    (62) IfStmt -> IF LEFTPARENT Expr RIGHTPARENT . Stmt ElseStmt
    (40) Stmt -> . Assign SEMICOLON
    (41) Stmt -> . Call SEMICOLON
    (42) Stmt -> . Return
    (43) Stmt -> . IfStmt
    (44) Stmt -> . WhileStmt
    (45) Stmt -> . BREAK SEMICOLON
    (46) Stmt -> . CONTINUE SEMICOLON
    (47) Stmt -> . Block
    (48) Assign -> . Location ASSIGNMENT Expr
    (52) Call -> . Method LEFTPARENT Actuals RIGHTPARENT
    (59) Return -> . RETURN ReturnExpr SEMICOLON
    (62) IfStmt -> . IF LEFTPARENT Expr RIGHTPARENT Stmt ElseStmt
    (65) WhileStmt -> . WHILE LEFTPARENT Expr RIGHTPARENT Stmt
    (30) Block -> . LEFTBRACE VarDeclList StmtList RIGHTBRACE
    (49) Location -> . IDEN
    (50) Location -> . Expr DOT IDEN
    (51) Location -> . Expr LEFTSQRBRACKET Expr RIGHTSQRBRACKET
    (53) Method -> . IDEN
    (54) Method -> . Expr DOT IDEN
    (66) Expr -> . Location
    (67) Expr -> . Call
    (68) Expr -> . THIS
    (69) Expr -> . NewId
    (70) Expr -> . NewTypeExpr
    (71) Expr -> . ExprLength
    (72) Expr -> . ExprBinaryExpr
    (73) Expr -> . UnaryExpr
    (74) Expr -> . Literal
    (75) Expr -> . Number
    (76) Expr -> . ParentExprParent
    (77) NewId -> . NEW IDEN LEFTPARENT RIGHTPARENT
    (78) NewTypeExpr -> . NEW Type LEFTSQRBRACKET Expr LEFTSQRBRACKET
    (79) ExprLength -> . Expr DOT LENGTH
    (80) ExprBinaryExpr -> . Expr ADDITION Expr
    (81) ExprBinaryExpr -> . Expr SUBSTRACTION Expr
    (82) ExprBinaryExpr -> . Expr MULTIPLICATION Expr
    (83) ExprBinaryExpr -> . Expr DIVISION Expr
    (84) ExprBinaryExpr -> . Expr MODULO Expr
    (85) ExprBinaryExpr -> . Expr AND Expr
    (86) ExprBinaryExpr -> . Expr OR Expr
    (87) ExprBinaryExpr -> . Expr CONCAT Expr
    (88) ExprBinaryExpr -> . Expr LESS Expr
    (89) ExprBinaryExpr -> . Expr LESSEQUAL Expr
    (90) ExprBinaryExpr -> . Expr GREATER Expr
    (91) ExprBinaryExpr -> . Expr GREATEREQUAL Expr
    (92) ExprBinaryExpr -> . Expr EQUAL Expr
    (93) ExprBinaryExpr -> . Expr NOTEQUAL Expr
    (94) UnaryExpr -> . UnaryMinus
    (95) UnaryExpr -> . NOT
    (97) Literal -> . INT
    (98) Literal -> . STRING
    (99) Literal -> . TRUE
    (100) Literal -> . FALSE
    (101) Literal -> . NULL
    (103) Number -> . CIENTIFIC
    (104) Number -> . HEXADEC
    (105) Number -> . NUMBER
    (106) Number -> . BINARY
    (107) Number -> . FLOAT
    (102) ParentExprParent -> . LEFTPARENT Expr RIGHTPARENT
    (96) UnaryMinus -> . SUBSTRACTION Expr

    BREAK           shift and go to state 94
    CONTINUE        shift and go to state 95
    RETURN          shift and go to state 58
    IF              shift and go to state 87
    WHILE           shift and go to state 60
    LEFTBRACE       shift and go to state 47
    IDEN            shift and go to state 57
    THIS            shift and go to state 90
    NEW             shift and go to state 64
    NOT             shift and go to state 96
    INT             shift and go to state 75
    STRING          shift and go to state 77
    TRUE            shift and go to state 69
    FALSE           shift and go to state 89
    NULL            shift and go to state 65
    CIENTIFIC       shift and go to state 70
    HEXADEC         shift and go to state 81
    NUMBER          shift and go to state 98
    BINARY          shift and go to state 78
    FLOAT           shift and go to state 91
    LEFTPARENT      shift and go to state 84
    SUBSTRACTION    shift and go to state 97

    ParentExprParent               shift and go to state 59
    Literal                        shift and go to state 92
    Call                           shift and go to state 61
    Location                       shift and go to state 62
    Method                         shift and go to state 66
    Return                         shift and go to state 67
    ExprLength                     shift and go to state 68
    Stmt                           shift and go to state 188
    IfStmt                         shift and go to state 72
    NewId                          shift and go to state 73
    NewTypeExpr                    shift and go to state 79
    Expr                           shift and go to state 80
    UnaryExpr                      shift and go to state 82
    WhileStmt                      shift and go to state 83
    Assign                         shift and go to state 85
    Block                          shift and go to state 86
    ExprBinaryExpr                 shift and go to state 88
    Number                         shift and go to state 74
    UnaryMinus                     shift and go to state 93

state 181

    (33) VarDeclList -> Type IDEN ExpDecl ExpDeclList SEMICOLON . VarDeclList
    (33) VarDeclList -> . Type IDEN ExpDecl ExpDeclList SEMICOLON VarDeclList
    (34) VarDeclList -> . empty
    (24) Type -> . INT
    (25) Type -> . BOOLEAN
    (26) Type -> . STRING
    (27) Type -> . IDEN
    (28) Type -> . Array
    (108) empty -> .
    (29) Array -> . Type LEFTSQRBRACKET RIGHTSQRBRACKET

  ! shift/reduce conflict for IDEN resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    INT             shift and go to state 22
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 20
    IDEN            shift and go to state 13
    $end            reduce using rule 108 (empty -> .)
    LEFTBRACE       reduce using rule 108 (empty -> .)
    RIGHTBRACE      reduce using rule 108 (empty -> .)
    SEMICOLON       reduce using rule 108 (empty -> .)
    RIGHTPARENT     reduce using rule 108 (empty -> .)
    RETURN          reduce using rule 108 (empty -> .)
    IF              reduce using rule 108 (empty -> .)
    BREAK           reduce using rule 108 (empty -> .)
    CONTINUE        reduce using rule 108 (empty -> .)
    WHILE           reduce using rule 108 (empty -> .)
    THIS            reduce using rule 108 (empty -> .)
    NEW             reduce using rule 108 (empty -> .)
    TRUE            reduce using rule 108 (empty -> .)
    FALSE           reduce using rule 108 (empty -> .)
    NULL            reduce using rule 108 (empty -> .)
    LEFTPARENT      reduce using rule 108 (empty -> .)
    NOT             reduce using rule 108 (empty -> .)
    CIENTIFIC       reduce using rule 108 (empty -> .)
    HEXADEC         reduce using rule 108 (empty -> .)
    NUMBER          reduce using rule 108 (empty -> .)
    BINARY          reduce using rule 108 (empty -> .)
    FLOAT           reduce using rule 108 (empty -> .)
    SUBSTRACTION    reduce using rule 108 (empty -> .)
    COMMA           reduce using rule 108 (empty -> .)
    ELSE            reduce using rule 108 (empty -> .)

  ! IDEN            [ reduce using rule 108 (empty -> .) ]
  ! INT             [ reduce using rule 108 (empty -> .) ]
  ! STRING          [ reduce using rule 108 (empty -> .) ]

    VarDeclList                    shift and go to state 189
    Array                          shift and go to state 25
    Type                           shift and go to state 53
    empty                          shift and go to state 54

state 182

    (37) CommaExpDecl -> COMMA IDEN . ExpDecl
    (38) ExpDecl -> . ASSIGNMENT Expr
    (39) ExpDecl -> . empty
    (108) empty -> .

    ASSIGNMENT      shift and go to state 136
    $end            reduce using rule 108 (empty -> .)
    LEFTBRACE       reduce using rule 108 (empty -> .)
    RIGHTBRACE      reduce using rule 108 (empty -> .)
    SEMICOLON       reduce using rule 108 (empty -> .)
    RIGHTPARENT     reduce using rule 108 (empty -> .)
    RETURN          reduce using rule 108 (empty -> .)
    IF              reduce using rule 108 (empty -> .)
    BREAK           reduce using rule 108 (empty -> .)
    CONTINUE        reduce using rule 108 (empty -> .)
    IDEN            reduce using rule 108 (empty -> .)
    WHILE           reduce using rule 108 (empty -> .)
    THIS            reduce using rule 108 (empty -> .)
    NEW             reduce using rule 108 (empty -> .)
    INT             reduce using rule 108 (empty -> .)
    STRING          reduce using rule 108 (empty -> .)
    TRUE            reduce using rule 108 (empty -> .)
    FALSE           reduce using rule 108 (empty -> .)
    NULL            reduce using rule 108 (empty -> .)
    LEFTPARENT      reduce using rule 108 (empty -> .)
    NOT             reduce using rule 108 (empty -> .)
    CIENTIFIC       reduce using rule 108 (empty -> .)
    HEXADEC         reduce using rule 108 (empty -> .)
    NUMBER          reduce using rule 108 (empty -> .)
    BINARY          reduce using rule 108 (empty -> .)
    FLOAT           reduce using rule 108 (empty -> .)
    SUBSTRACTION    reduce using rule 108 (empty -> .)
    COMMA           reduce using rule 108 (empty -> .)
    ELSE            reduce using rule 108 (empty -> .)

    empty                          shift and go to state 138
    ExpDecl                        shift and go to state 190

state 183

    (35) ExpDeclList -> CommaExpDecl ExpDeclList .

    SEMICOLON       reduce using rule 35 (ExpDeclList -> CommaExpDecl ExpDeclList .)


state 184

    (65) WhileStmt -> WHILE LEFTPARENT Expr RIGHTPARENT Stmt .

    RETURN          reduce using rule 65 (WhileStmt -> WHILE LEFTPARENT Expr RIGHTPARENT Stmt .)
    IF              reduce using rule 65 (WhileStmt -> WHILE LEFTPARENT Expr RIGHTPARENT Stmt .)
    BREAK           reduce using rule 65 (WhileStmt -> WHILE LEFTPARENT Expr RIGHTPARENT Stmt .)
    CONTINUE        reduce using rule 65 (WhileStmt -> WHILE LEFTPARENT Expr RIGHTPARENT Stmt .)
    IDEN            reduce using rule 65 (WhileStmt -> WHILE LEFTPARENT Expr RIGHTPARENT Stmt .)
    WHILE           reduce using rule 65 (WhileStmt -> WHILE LEFTPARENT Expr RIGHTPARENT Stmt .)
    LEFTBRACE       reduce using rule 65 (WhileStmt -> WHILE LEFTPARENT Expr RIGHTPARENT Stmt .)
    THIS            reduce using rule 65 (WhileStmt -> WHILE LEFTPARENT Expr RIGHTPARENT Stmt .)
    NEW             reduce using rule 65 (WhileStmt -> WHILE LEFTPARENT Expr RIGHTPARENT Stmt .)
    INT             reduce using rule 65 (WhileStmt -> WHILE LEFTPARENT Expr RIGHTPARENT Stmt .)
    STRING          reduce using rule 65 (WhileStmt -> WHILE LEFTPARENT Expr RIGHTPARENT Stmt .)
    TRUE            reduce using rule 65 (WhileStmt -> WHILE LEFTPARENT Expr RIGHTPARENT Stmt .)
    FALSE           reduce using rule 65 (WhileStmt -> WHILE LEFTPARENT Expr RIGHTPARENT Stmt .)
    NULL            reduce using rule 65 (WhileStmt -> WHILE LEFTPARENT Expr RIGHTPARENT Stmt .)
    LEFTPARENT      reduce using rule 65 (WhileStmt -> WHILE LEFTPARENT Expr RIGHTPARENT Stmt .)
    NOT             reduce using rule 65 (WhileStmt -> WHILE LEFTPARENT Expr RIGHTPARENT Stmt .)
    CIENTIFIC       reduce using rule 65 (WhileStmt -> WHILE LEFTPARENT Expr RIGHTPARENT Stmt .)
    HEXADEC         reduce using rule 65 (WhileStmt -> WHILE LEFTPARENT Expr RIGHTPARENT Stmt .)
    NUMBER          reduce using rule 65 (WhileStmt -> WHILE LEFTPARENT Expr RIGHTPARENT Stmt .)
    BINARY          reduce using rule 65 (WhileStmt -> WHILE LEFTPARENT Expr RIGHTPARENT Stmt .)
    FLOAT           reduce using rule 65 (WhileStmt -> WHILE LEFTPARENT Expr RIGHTPARENT Stmt .)
    SUBSTRACTION    reduce using rule 65 (WhileStmt -> WHILE LEFTPARENT Expr RIGHTPARENT Stmt .)
    RIGHTBRACE      reduce using rule 65 (WhileStmt -> WHILE LEFTPARENT Expr RIGHTPARENT Stmt .)
    ELSE            reduce using rule 65 (WhileStmt -> WHILE LEFTPARENT Expr RIGHTPARENT Stmt .)


state 185

    (78) NewTypeExpr -> NEW Type LEFTSQRBRACKET Expr LEFTSQRBRACKET .
    (51) Location -> Expr LEFTSQRBRACKET . Expr RIGHTSQRBRACKET
    (66) Expr -> . Location
    (67) Expr -> . Call
    (68) Expr -> . THIS
    (69) Expr -> . NewId
    (70) Expr -> . NewTypeExpr
    (71) Expr -> . ExprLength
    (72) Expr -> . ExprBinaryExpr
    (73) Expr -> . UnaryExpr
    (74) Expr -> . Literal
    (75) Expr -> . Number
    (76) Expr -> . ParentExprParent
    (49) Location -> . IDEN
    (50) Location -> . Expr DOT IDEN
    (51) Location -> . Expr LEFTSQRBRACKET Expr RIGHTSQRBRACKET
    (52) Call -> . Method LEFTPARENT Actuals RIGHTPARENT
    (77) NewId -> . NEW IDEN LEFTPARENT RIGHTPARENT
    (78) NewTypeExpr -> . NEW Type LEFTSQRBRACKET Expr LEFTSQRBRACKET
    (79) ExprLength -> . Expr DOT LENGTH
    (80) ExprBinaryExpr -> . Expr ADDITION Expr
    (81) ExprBinaryExpr -> . Expr SUBSTRACTION Expr
    (82) ExprBinaryExpr -> . Expr MULTIPLICATION Expr
    (83) ExprBinaryExpr -> . Expr DIVISION Expr
    (84) ExprBinaryExpr -> . Expr MODULO Expr
    (85) ExprBinaryExpr -> . Expr AND Expr
    (86) ExprBinaryExpr -> . Expr OR Expr
    (87) ExprBinaryExpr -> . Expr CONCAT Expr
    (88) ExprBinaryExpr -> . Expr LESS Expr
    (89) ExprBinaryExpr -> . Expr LESSEQUAL Expr
    (90) ExprBinaryExpr -> . Expr GREATER Expr
    (91) ExprBinaryExpr -> . Expr GREATEREQUAL Expr
    (92) ExprBinaryExpr -> . Expr EQUAL Expr
    (93) ExprBinaryExpr -> . Expr NOTEQUAL Expr
    (94) UnaryExpr -> . UnaryMinus
    (95) UnaryExpr -> . NOT
    (97) Literal -> . INT
    (98) Literal -> . STRING
    (99) Literal -> . TRUE
    (100) Literal -> . FALSE
    (101) Literal -> . NULL
    (103) Number -> . CIENTIFIC
    (104) Number -> . HEXADEC
    (105) Number -> . NUMBER
    (106) Number -> . BINARY
    (107) Number -> . FLOAT
    (102) ParentExprParent -> . LEFTPARENT Expr RIGHTPARENT
    (53) Method -> . IDEN
    (54) Method -> . Expr DOT IDEN
    (96) UnaryMinus -> . SUBSTRACTION Expr

  ! shift/reduce conflict for SUBSTRACTION resolved as shift
    COMMA           reduce using rule 78 (NewTypeExpr -> NEW Type LEFTSQRBRACKET Expr LEFTSQRBRACKET .)
    SEMICOLON       reduce using rule 78 (NewTypeExpr -> NEW Type LEFTSQRBRACKET Expr LEFTSQRBRACKET .)
    DOT             reduce using rule 78 (NewTypeExpr -> NEW Type LEFTSQRBRACKET Expr LEFTSQRBRACKET .)
    LEFTSQRBRACKET  reduce using rule 78 (NewTypeExpr -> NEW Type LEFTSQRBRACKET Expr LEFTSQRBRACKET .)
    RIGHTSQRBRACKET reduce using rule 78 (NewTypeExpr -> NEW Type LEFTSQRBRACKET Expr LEFTSQRBRACKET .)
    RIGHTPARENT     reduce using rule 78 (NewTypeExpr -> NEW Type LEFTSQRBRACKET Expr LEFTSQRBRACKET .)
    ADDITION        reduce using rule 78 (NewTypeExpr -> NEW Type LEFTSQRBRACKET Expr LEFTSQRBRACKET .)
    MULTIPLICATION  reduce using rule 78 (NewTypeExpr -> NEW Type LEFTSQRBRACKET Expr LEFTSQRBRACKET .)
    DIVISION        reduce using rule 78 (NewTypeExpr -> NEW Type LEFTSQRBRACKET Expr LEFTSQRBRACKET .)
    MODULO          reduce using rule 78 (NewTypeExpr -> NEW Type LEFTSQRBRACKET Expr LEFTSQRBRACKET .)
    AND             reduce using rule 78 (NewTypeExpr -> NEW Type LEFTSQRBRACKET Expr LEFTSQRBRACKET .)
    OR              reduce using rule 78 (NewTypeExpr -> NEW Type LEFTSQRBRACKET Expr LEFTSQRBRACKET .)
    CONCAT          reduce using rule 78 (NewTypeExpr -> NEW Type LEFTSQRBRACKET Expr LEFTSQRBRACKET .)
    LESS            reduce using rule 78 (NewTypeExpr -> NEW Type LEFTSQRBRACKET Expr LEFTSQRBRACKET .)
    LESSEQUAL       reduce using rule 78 (NewTypeExpr -> NEW Type LEFTSQRBRACKET Expr LEFTSQRBRACKET .)
    GREATER         reduce using rule 78 (NewTypeExpr -> NEW Type LEFTSQRBRACKET Expr LEFTSQRBRACKET .)
    GREATEREQUAL    reduce using rule 78 (NewTypeExpr -> NEW Type LEFTSQRBRACKET Expr LEFTSQRBRACKET .)
    EQUAL           reduce using rule 78 (NewTypeExpr -> NEW Type LEFTSQRBRACKET Expr LEFTSQRBRACKET .)
    NOTEQUAL        reduce using rule 78 (NewTypeExpr -> NEW Type LEFTSQRBRACKET Expr LEFTSQRBRACKET .)
    THIS            shift and go to state 90
    IDEN            shift and go to state 57
    NEW             shift and go to state 64
    NOT             shift and go to state 96
    INT             shift and go to state 75
    STRING          shift and go to state 77
    TRUE            shift and go to state 69
    FALSE           shift and go to state 89
    NULL            shift and go to state 65
    CIENTIFIC       shift and go to state 70
    HEXADEC         shift and go to state 81
    NUMBER          shift and go to state 98
    BINARY          shift and go to state 78
    FLOAT           shift and go to state 91
    LEFTPARENT      shift and go to state 84
    SUBSTRACTION    shift and go to state 97

  ! SUBSTRACTION    [ reduce using rule 78 (NewTypeExpr -> NEW Type LEFTSQRBRACKET Expr LEFTSQRBRACKET .) ]

    ExprBinaryExpr                 shift and go to state 88
    Method                         shift and go to state 66
    ExprLength                     shift and go to state 68
    NewTypeExpr                    shift and go to state 79
    Expr                           shift and go to state 154
    UnaryExpr                      shift and go to state 82
    Number                         shift and go to state 74
    Literal                        shift and go to state 92
    Call                           shift and go to state 101
    Location                       shift and go to state 102
    NewId                          shift and go to state 73
    ParentExprParent               shift and go to state 59
    UnaryMinus                     shift and go to state 93

state 186

    (58) ExprComma -> COMMA Expr .
    (50) Location -> Expr . DOT IDEN
    (51) Location -> Expr . LEFTSQRBRACKET Expr RIGHTSQRBRACKET
    (79) ExprLength -> Expr . DOT LENGTH
    (80) ExprBinaryExpr -> Expr . ADDITION Expr
    (81) ExprBinaryExpr -> Expr . SUBSTRACTION Expr
    (82) ExprBinaryExpr -> Expr . MULTIPLICATION Expr
    (83) ExprBinaryExpr -> Expr . DIVISION Expr
    (84) ExprBinaryExpr -> Expr . MODULO Expr
    (85) ExprBinaryExpr -> Expr . AND Expr
    (86) ExprBinaryExpr -> Expr . OR Expr
    (87) ExprBinaryExpr -> Expr . CONCAT Expr
    (88) ExprBinaryExpr -> Expr . LESS Expr
    (89) ExprBinaryExpr -> Expr . LESSEQUAL Expr
    (90) ExprBinaryExpr -> Expr . GREATER Expr
    (91) ExprBinaryExpr -> Expr . GREATEREQUAL Expr
    (92) ExprBinaryExpr -> Expr . EQUAL Expr
    (93) ExprBinaryExpr -> Expr . NOTEQUAL Expr
    (54) Method -> Expr . DOT IDEN

    COMMA           reduce using rule 58 (ExprComma -> COMMA Expr .)
    RIGHTPARENT     reduce using rule 58 (ExprComma -> COMMA Expr .)
    DOT             shift and go to state 139
    LEFTSQRBRACKET  shift and go to state 121
    ADDITION        shift and go to state 119
    SUBSTRACTION    shift and go to state 127
    MULTIPLICATION  shift and go to state 126
    DIVISION        shift and go to state 115
    MODULO          shift and go to state 116
    AND             shift and go to state 114
    OR              shift and go to state 128
    CONCAT          shift and go to state 124
    LESS            shift and go to state 118
    LESSEQUAL       shift and go to state 122
    GREATER         shift and go to state 117
    GREATEREQUAL    shift and go to state 120
    EQUAL           shift and go to state 125
    NOTEQUAL        shift and go to state 123


state 187

    (56) ExprCommaList -> ExprComma ExprCommaList .

    RIGHTPARENT     reduce using rule 56 (ExprCommaList -> ExprComma ExprCommaList .)


state 188

    (62) IfStmt -> IF LEFTPARENT Expr RIGHTPARENT Stmt . ElseStmt
    (63) ElseStmt -> . ELSE Stmt
    (64) ElseStmt -> . empty
    (108) empty -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 191
    $end            reduce using rule 108 (empty -> .)
    LEFTBRACE       reduce using rule 108 (empty -> .)
    RIGHTBRACE      reduce using rule 108 (empty -> .)
    SEMICOLON       reduce using rule 108 (empty -> .)
    RIGHTPARENT     reduce using rule 108 (empty -> .)
    RETURN          reduce using rule 108 (empty -> .)
    IF              reduce using rule 108 (empty -> .)
    BREAK           reduce using rule 108 (empty -> .)
    CONTINUE        reduce using rule 108 (empty -> .)
    IDEN            reduce using rule 108 (empty -> .)
    WHILE           reduce using rule 108 (empty -> .)
    THIS            reduce using rule 108 (empty -> .)
    NEW             reduce using rule 108 (empty -> .)
    INT             reduce using rule 108 (empty -> .)
    STRING          reduce using rule 108 (empty -> .)
    TRUE            reduce using rule 108 (empty -> .)
    FALSE           reduce using rule 108 (empty -> .)
    NULL            reduce using rule 108 (empty -> .)
    LEFTPARENT      reduce using rule 108 (empty -> .)
    NOT             reduce using rule 108 (empty -> .)
    CIENTIFIC       reduce using rule 108 (empty -> .)
    HEXADEC         reduce using rule 108 (empty -> .)
    NUMBER          reduce using rule 108 (empty -> .)
    BINARY          reduce using rule 108 (empty -> .)
    FLOAT           reduce using rule 108 (empty -> .)
    SUBSTRACTION    reduce using rule 108 (empty -> .)
    COMMA           reduce using rule 108 (empty -> .)

  ! ELSE            [ reduce using rule 108 (empty -> .) ]

    empty                          shift and go to state 193
    ElseStmt                       shift and go to state 192

state 189

    (33) VarDeclList -> Type IDEN ExpDecl ExpDeclList SEMICOLON VarDeclList .

    RETURN          reduce using rule 33 (VarDeclList -> Type IDEN ExpDecl ExpDeclList SEMICOLON VarDeclList .)
    IF              reduce using rule 33 (VarDeclList -> Type IDEN ExpDecl ExpDeclList SEMICOLON VarDeclList .)
    BREAK           reduce using rule 33 (VarDeclList -> Type IDEN ExpDecl ExpDeclList SEMICOLON VarDeclList .)
    CONTINUE        reduce using rule 33 (VarDeclList -> Type IDEN ExpDecl ExpDeclList SEMICOLON VarDeclList .)
    IDEN            reduce using rule 33 (VarDeclList -> Type IDEN ExpDecl ExpDeclList SEMICOLON VarDeclList .)
    WHILE           reduce using rule 33 (VarDeclList -> Type IDEN ExpDecl ExpDeclList SEMICOLON VarDeclList .)
    LEFTBRACE       reduce using rule 33 (VarDeclList -> Type IDEN ExpDecl ExpDeclList SEMICOLON VarDeclList .)
    THIS            reduce using rule 33 (VarDeclList -> Type IDEN ExpDecl ExpDeclList SEMICOLON VarDeclList .)
    NEW             reduce using rule 33 (VarDeclList -> Type IDEN ExpDecl ExpDeclList SEMICOLON VarDeclList .)
    INT             reduce using rule 33 (VarDeclList -> Type IDEN ExpDecl ExpDeclList SEMICOLON VarDeclList .)
    STRING          reduce using rule 33 (VarDeclList -> Type IDEN ExpDecl ExpDeclList SEMICOLON VarDeclList .)
    TRUE            reduce using rule 33 (VarDeclList -> Type IDEN ExpDecl ExpDeclList SEMICOLON VarDeclList .)
    FALSE           reduce using rule 33 (VarDeclList -> Type IDEN ExpDecl ExpDeclList SEMICOLON VarDeclList .)
    NULL            reduce using rule 33 (VarDeclList -> Type IDEN ExpDecl ExpDeclList SEMICOLON VarDeclList .)
    LEFTPARENT      reduce using rule 33 (VarDeclList -> Type IDEN ExpDecl ExpDeclList SEMICOLON VarDeclList .)
    NOT             reduce using rule 33 (VarDeclList -> Type IDEN ExpDecl ExpDeclList SEMICOLON VarDeclList .)
    CIENTIFIC       reduce using rule 33 (VarDeclList -> Type IDEN ExpDecl ExpDeclList SEMICOLON VarDeclList .)
    HEXADEC         reduce using rule 33 (VarDeclList -> Type IDEN ExpDecl ExpDeclList SEMICOLON VarDeclList .)
    NUMBER          reduce using rule 33 (VarDeclList -> Type IDEN ExpDecl ExpDeclList SEMICOLON VarDeclList .)
    BINARY          reduce using rule 33 (VarDeclList -> Type IDEN ExpDecl ExpDeclList SEMICOLON VarDeclList .)
    FLOAT           reduce using rule 33 (VarDeclList -> Type IDEN ExpDecl ExpDeclList SEMICOLON VarDeclList .)
    SUBSTRACTION    reduce using rule 33 (VarDeclList -> Type IDEN ExpDecl ExpDeclList SEMICOLON VarDeclList .)
    RIGHTBRACE      reduce using rule 33 (VarDeclList -> Type IDEN ExpDecl ExpDeclList SEMICOLON VarDeclList .)


state 190

    (37) CommaExpDecl -> COMMA IDEN ExpDecl .

    COMMA           reduce using rule 37 (CommaExpDecl -> COMMA IDEN ExpDecl .)
    SEMICOLON       reduce using rule 37 (CommaExpDecl -> COMMA IDEN ExpDecl .)


state 191

    (63) ElseStmt -> ELSE . Stmt
    (40) Stmt -> . Assign SEMICOLON
    (41) Stmt -> . Call SEMICOLON
    (42) Stmt -> . Return
    (43) Stmt -> . IfStmt
    (44) Stmt -> . WhileStmt
    (45) Stmt -> . BREAK SEMICOLON
    (46) Stmt -> . CONTINUE SEMICOLON
    (47) Stmt -> . Block
    (48) Assign -> . Location ASSIGNMENT Expr
    (52) Call -> . Method LEFTPARENT Actuals RIGHTPARENT
    (59) Return -> . RETURN ReturnExpr SEMICOLON
    (62) IfStmt -> . IF LEFTPARENT Expr RIGHTPARENT Stmt ElseStmt
    (65) WhileStmt -> . WHILE LEFTPARENT Expr RIGHTPARENT Stmt
    (30) Block -> . LEFTBRACE VarDeclList StmtList RIGHTBRACE
    (49) Location -> . IDEN
    (50) Location -> . Expr DOT IDEN
    (51) Location -> . Expr LEFTSQRBRACKET Expr RIGHTSQRBRACKET
    (53) Method -> . IDEN
    (54) Method -> . Expr DOT IDEN
    (66) Expr -> . Location
    (67) Expr -> . Call
    (68) Expr -> . THIS
    (69) Expr -> . NewId
    (70) Expr -> . NewTypeExpr
    (71) Expr -> . ExprLength
    (72) Expr -> . ExprBinaryExpr
    (73) Expr -> . UnaryExpr
    (74) Expr -> . Literal
    (75) Expr -> . Number
    (76) Expr -> . ParentExprParent
    (77) NewId -> . NEW IDEN LEFTPARENT RIGHTPARENT
    (78) NewTypeExpr -> . NEW Type LEFTSQRBRACKET Expr LEFTSQRBRACKET
    (79) ExprLength -> . Expr DOT LENGTH
    (80) ExprBinaryExpr -> . Expr ADDITION Expr
    (81) ExprBinaryExpr -> . Expr SUBSTRACTION Expr
    (82) ExprBinaryExpr -> . Expr MULTIPLICATION Expr
    (83) ExprBinaryExpr -> . Expr DIVISION Expr
    (84) ExprBinaryExpr -> . Expr MODULO Expr
    (85) ExprBinaryExpr -> . Expr AND Expr
    (86) ExprBinaryExpr -> . Expr OR Expr
    (87) ExprBinaryExpr -> . Expr CONCAT Expr
    (88) ExprBinaryExpr -> . Expr LESS Expr
    (89) ExprBinaryExpr -> . Expr LESSEQUAL Expr
    (90) ExprBinaryExpr -> . Expr GREATER Expr
    (91) ExprBinaryExpr -> . Expr GREATEREQUAL Expr
    (92) ExprBinaryExpr -> . Expr EQUAL Expr
    (93) ExprBinaryExpr -> . Expr NOTEQUAL Expr
    (94) UnaryExpr -> . UnaryMinus
    (95) UnaryExpr -> . NOT
    (97) Literal -> . INT
    (98) Literal -> . STRING
    (99) Literal -> . TRUE
    (100) Literal -> . FALSE
    (101) Literal -> . NULL
    (103) Number -> . CIENTIFIC
    (104) Number -> . HEXADEC
    (105) Number -> . NUMBER
    (106) Number -> . BINARY
    (107) Number -> . FLOAT
    (102) ParentExprParent -> . LEFTPARENT Expr RIGHTPARENT
    (96) UnaryMinus -> . SUBSTRACTION Expr

    BREAK           shift and go to state 94
    CONTINUE        shift and go to state 95
    RETURN          shift and go to state 58
    IF              shift and go to state 87
    WHILE           shift and go to state 60
    LEFTBRACE       shift and go to state 47
    IDEN            shift and go to state 57
    THIS            shift and go to state 90
    NEW             shift and go to state 64
    NOT             shift and go to state 96
    INT             shift and go to state 75
    STRING          shift and go to state 77
    TRUE            shift and go to state 69
    FALSE           shift and go to state 89
    NULL            shift and go to state 65
    CIENTIFIC       shift and go to state 70
    HEXADEC         shift and go to state 81
    NUMBER          shift and go to state 98
    BINARY          shift and go to state 78
    FLOAT           shift and go to state 91
    LEFTPARENT      shift and go to state 84
    SUBSTRACTION    shift and go to state 97

    ParentExprParent               shift and go to state 59
    Literal                        shift and go to state 92
    Call                           shift and go to state 61
    Location                       shift and go to state 62
    Method                         shift and go to state 66
    Return                         shift and go to state 67
    ExprLength                     shift and go to state 68
    Stmt                           shift and go to state 194
    IfStmt                         shift and go to state 72
    NewId                          shift and go to state 73
    NewTypeExpr                    shift and go to state 79
    Expr                           shift and go to state 80
    UnaryExpr                      shift and go to state 82
    WhileStmt                      shift and go to state 83
    Assign                         shift and go to state 85
    Block                          shift and go to state 86
    ExprBinaryExpr                 shift and go to state 88
    Number                         shift and go to state 74
    UnaryMinus                     shift and go to state 93

state 192

    (62) IfStmt -> IF LEFTPARENT Expr RIGHTPARENT Stmt ElseStmt .

    RETURN          reduce using rule 62 (IfStmt -> IF LEFTPARENT Expr RIGHTPARENT Stmt ElseStmt .)
    IF              reduce using rule 62 (IfStmt -> IF LEFTPARENT Expr RIGHTPARENT Stmt ElseStmt .)
    BREAK           reduce using rule 62 (IfStmt -> IF LEFTPARENT Expr RIGHTPARENT Stmt ElseStmt .)
    CONTINUE        reduce using rule 62 (IfStmt -> IF LEFTPARENT Expr RIGHTPARENT Stmt ElseStmt .)
    IDEN            reduce using rule 62 (IfStmt -> IF LEFTPARENT Expr RIGHTPARENT Stmt ElseStmt .)
    WHILE           reduce using rule 62 (IfStmt -> IF LEFTPARENT Expr RIGHTPARENT Stmt ElseStmt .)
    LEFTBRACE       reduce using rule 62 (IfStmt -> IF LEFTPARENT Expr RIGHTPARENT Stmt ElseStmt .)
    THIS            reduce using rule 62 (IfStmt -> IF LEFTPARENT Expr RIGHTPARENT Stmt ElseStmt .)
    NEW             reduce using rule 62 (IfStmt -> IF LEFTPARENT Expr RIGHTPARENT Stmt ElseStmt .)
    INT             reduce using rule 62 (IfStmt -> IF LEFTPARENT Expr RIGHTPARENT Stmt ElseStmt .)
    STRING          reduce using rule 62 (IfStmt -> IF LEFTPARENT Expr RIGHTPARENT Stmt ElseStmt .)
    TRUE            reduce using rule 62 (IfStmt -> IF LEFTPARENT Expr RIGHTPARENT Stmt ElseStmt .)
    FALSE           reduce using rule 62 (IfStmt -> IF LEFTPARENT Expr RIGHTPARENT Stmt ElseStmt .)
    NULL            reduce using rule 62 (IfStmt -> IF LEFTPARENT Expr RIGHTPARENT Stmt ElseStmt .)
    LEFTPARENT      reduce using rule 62 (IfStmt -> IF LEFTPARENT Expr RIGHTPARENT Stmt ElseStmt .)
    NOT             reduce using rule 62 (IfStmt -> IF LEFTPARENT Expr RIGHTPARENT Stmt ElseStmt .)
    CIENTIFIC       reduce using rule 62 (IfStmt -> IF LEFTPARENT Expr RIGHTPARENT Stmt ElseStmt .)
    HEXADEC         reduce using rule 62 (IfStmt -> IF LEFTPARENT Expr RIGHTPARENT Stmt ElseStmt .)
    NUMBER          reduce using rule 62 (IfStmt -> IF LEFTPARENT Expr RIGHTPARENT Stmt ElseStmt .)
    BINARY          reduce using rule 62 (IfStmt -> IF LEFTPARENT Expr RIGHTPARENT Stmt ElseStmt .)
    FLOAT           reduce using rule 62 (IfStmt -> IF LEFTPARENT Expr RIGHTPARENT Stmt ElseStmt .)
    SUBSTRACTION    reduce using rule 62 (IfStmt -> IF LEFTPARENT Expr RIGHTPARENT Stmt ElseStmt .)
    RIGHTBRACE      reduce using rule 62 (IfStmt -> IF LEFTPARENT Expr RIGHTPARENT Stmt ElseStmt .)
    ELSE            reduce using rule 62 (IfStmt -> IF LEFTPARENT Expr RIGHTPARENT Stmt ElseStmt .)


state 193

    (64) ElseStmt -> empty .

    RETURN          reduce using rule 64 (ElseStmt -> empty .)
    IF              reduce using rule 64 (ElseStmt -> empty .)
    BREAK           reduce using rule 64 (ElseStmt -> empty .)
    CONTINUE        reduce using rule 64 (ElseStmt -> empty .)
    IDEN            reduce using rule 64 (ElseStmt -> empty .)
    WHILE           reduce using rule 64 (ElseStmt -> empty .)
    LEFTBRACE       reduce using rule 64 (ElseStmt -> empty .)
    THIS            reduce using rule 64 (ElseStmt -> empty .)
    NEW             reduce using rule 64 (ElseStmt -> empty .)
    INT             reduce using rule 64 (ElseStmt -> empty .)
    STRING          reduce using rule 64 (ElseStmt -> empty .)
    TRUE            reduce using rule 64 (ElseStmt -> empty .)
    FALSE           reduce using rule 64 (ElseStmt -> empty .)
    NULL            reduce using rule 64 (ElseStmt -> empty .)
    LEFTPARENT      reduce using rule 64 (ElseStmt -> empty .)
    NOT             reduce using rule 64 (ElseStmt -> empty .)
    CIENTIFIC       reduce using rule 64 (ElseStmt -> empty .)
    HEXADEC         reduce using rule 64 (ElseStmt -> empty .)
    NUMBER          reduce using rule 64 (ElseStmt -> empty .)
    BINARY          reduce using rule 64 (ElseStmt -> empty .)
    FLOAT           reduce using rule 64 (ElseStmt -> empty .)
    SUBSTRACTION    reduce using rule 64 (ElseStmt -> empty .)
    RIGHTBRACE      reduce using rule 64 (ElseStmt -> empty .)
    ELSE            reduce using rule 64 (ElseStmt -> empty .)


state 194

    (63) ElseStmt -> ELSE Stmt .

    RETURN          reduce using rule 63 (ElseStmt -> ELSE Stmt .)
    IF              reduce using rule 63 (ElseStmt -> ELSE Stmt .)
    BREAK           reduce using rule 63 (ElseStmt -> ELSE Stmt .)
    CONTINUE        reduce using rule 63 (ElseStmt -> ELSE Stmt .)
    IDEN            reduce using rule 63 (ElseStmt -> ELSE Stmt .)
    WHILE           reduce using rule 63 (ElseStmt -> ELSE Stmt .)
    LEFTBRACE       reduce using rule 63 (ElseStmt -> ELSE Stmt .)
    THIS            reduce using rule 63 (ElseStmt -> ELSE Stmt .)
    NEW             reduce using rule 63 (ElseStmt -> ELSE Stmt .)
    INT             reduce using rule 63 (ElseStmt -> ELSE Stmt .)
    STRING          reduce using rule 63 (ElseStmt -> ELSE Stmt .)
    TRUE            reduce using rule 63 (ElseStmt -> ELSE Stmt .)
    FALSE           reduce using rule 63 (ElseStmt -> ELSE Stmt .)
    NULL            reduce using rule 63 (ElseStmt -> ELSE Stmt .)
    LEFTPARENT      reduce using rule 63 (ElseStmt -> ELSE Stmt .)
    NOT             reduce using rule 63 (ElseStmt -> ELSE Stmt .)
    CIENTIFIC       reduce using rule 63 (ElseStmt -> ELSE Stmt .)
    HEXADEC         reduce using rule 63 (ElseStmt -> ELSE Stmt .)
    NUMBER          reduce using rule 63 (ElseStmt -> ELSE Stmt .)
    BINARY          reduce using rule 63 (ElseStmt -> ELSE Stmt .)
    FLOAT           reduce using rule 63 (ElseStmt -> ELSE Stmt .)
    SUBSTRACTION    reduce using rule 63 (ElseStmt -> ELSE Stmt .)
    RIGHTBRACE      reduce using rule 63 (ElseStmt -> ELSE Stmt .)
    ELSE            reduce using rule 63 (ElseStmt -> ELSE Stmt .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for INT in state 11 resolved as shift
WARNING: shift/reduce conflict for STRING in state 11 resolved as shift
WARNING: shift/reduce conflict for IDEN in state 11 resolved as shift
WARNING: shift/reduce conflict for IDEN in state 15 resolved as shift
WARNING: shift/reduce conflict for INT in state 16 resolved as shift
WARNING: shift/reduce conflict for STRING in state 16 resolved as shift
WARNING: shift/reduce conflict for IDEN in state 16 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 27 resolved as shift
WARNING: shift/reduce conflict for INT in state 31 resolved as shift
WARNING: shift/reduce conflict for STRING in state 31 resolved as shift
WARNING: shift/reduce conflict for IDEN in state 31 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 34 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 45 resolved as shift
WARNING: shift/reduce conflict for IDEN in state 47 resolved as shift
WARNING: shift/reduce conflict for INT in state 47 resolved as shift
WARNING: shift/reduce conflict for STRING in state 47 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 49 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 52 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 52 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 52 resolved as shift
WARNING: shift/reduce conflict for IF in state 52 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 52 resolved as shift
WARNING: shift/reduce conflict for LEFTBRACE in state 52 resolved as shift
WARNING: shift/reduce conflict for IDEN in state 52 resolved as shift
WARNING: shift/reduce conflict for THIS in state 52 resolved as shift
WARNING: shift/reduce conflict for NEW in state 52 resolved as shift
WARNING: shift/reduce conflict for NOT in state 52 resolved as shift
WARNING: shift/reduce conflict for INT in state 52 resolved as shift
WARNING: shift/reduce conflict for STRING in state 52 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 52 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 52 resolved as shift
WARNING: shift/reduce conflict for NULL in state 52 resolved as shift
WARNING: shift/reduce conflict for CIENTIFIC in state 52 resolved as shift
WARNING: shift/reduce conflict for HEXADEC in state 52 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 52 resolved as shift
WARNING: shift/reduce conflict for BINARY in state 52 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 52 resolved as shift
WARNING: shift/reduce conflict for LEFTPARENT in state 52 resolved as shift
WARNING: shift/reduce conflict for SUBSTRACTION in state 52 resolved as shift
WARNING: shift/reduce conflict for THIS in state 58 resolved as shift
WARNING: shift/reduce conflict for IDEN in state 58 resolved as shift
WARNING: shift/reduce conflict for NEW in state 58 resolved as shift
WARNING: shift/reduce conflict for NOT in state 58 resolved as shift
WARNING: shift/reduce conflict for INT in state 58 resolved as shift
WARNING: shift/reduce conflict for STRING in state 58 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 58 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 58 resolved as shift
WARNING: shift/reduce conflict for NULL in state 58 resolved as shift
WARNING: shift/reduce conflict for CIENTIFIC in state 58 resolved as shift
WARNING: shift/reduce conflict for HEXADEC in state 58 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 58 resolved as shift
WARNING: shift/reduce conflict for BINARY in state 58 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 58 resolved as shift
WARNING: shift/reduce conflict for LEFTPARENT in state 58 resolved as shift
WARNING: shift/reduce conflict for SUBSTRACTION in state 58 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 61 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 71 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 71 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 71 resolved as shift
WARNING: shift/reduce conflict for IF in state 71 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 71 resolved as shift
WARNING: shift/reduce conflict for LEFTBRACE in state 71 resolved as shift
WARNING: shift/reduce conflict for IDEN in state 71 resolved as shift
WARNING: shift/reduce conflict for THIS in state 71 resolved as shift
WARNING: shift/reduce conflict for NEW in state 71 resolved as shift
WARNING: shift/reduce conflict for NOT in state 71 resolved as shift
WARNING: shift/reduce conflict for INT in state 71 resolved as shift
WARNING: shift/reduce conflict for STRING in state 71 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 71 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 71 resolved as shift
WARNING: shift/reduce conflict for NULL in state 71 resolved as shift
WARNING: shift/reduce conflict for CIENTIFIC in state 71 resolved as shift
WARNING: shift/reduce conflict for HEXADEC in state 71 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 71 resolved as shift
WARNING: shift/reduce conflict for BINARY in state 71 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 71 resolved as shift
WARNING: shift/reduce conflict for LEFTPARENT in state 71 resolved as shift
WARNING: shift/reduce conflict for SUBSTRACTION in state 71 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 137 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 146 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 169 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 178 resolved as shift
WARNING: shift/reduce conflict for IDEN in state 181 resolved as shift
WARNING: shift/reduce conflict for INT in state 181 resolved as shift
WARNING: shift/reduce conflict for STRING in state 181 resolved as shift
WARNING: shift/reduce conflict for SUBSTRACTION in state 185 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 188 resolved as shift
